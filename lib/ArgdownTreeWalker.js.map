{"version":3,"sources":["../src/ArgdownTreeWalker.ts"],"names":["ArgdownTreeWalker","request","response","node","parentNode","childIndex","logger","emit","name","children","length","i","child","visitNode","tokenType","tokenName","ast","EventEmitter"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AA+CA;;;;;IAKaA,iB;;;;;;;;;;;;;;;;+RAM0B,UAACC,OAAD,EAAUC,QAAV,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,UAAtC,EAAkDC,MAAlD,EAA6D;AAChG,UAAIH,IAAJ,EAAU;AACR,YAAI,4BAAWA,IAAX,CAAJ,EAAsB;AACpB,gBAAKI,IAAL,CAAUJ,KAAKK,IAAL,GAAY,OAAtB,EAA+BP,OAA/B,EAAwCC,QAAxC,EAAkDC,IAAlD,EAAwDC,UAAxD,EAAoEC,UAApE,EAAgFC,MAAhF;;AACA,cAAIH,KAAKM,QAAL,IAAiBN,KAAKM,QAAL,CAAcC,MAAd,GAAuB,CAA5C,EAA+C;AAC7C,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIR,KAAKM,QAAL,CAAcC,MAAlC,EAA0CC,GAA1C,EAA+C;AAC7C,kBAAIC,QAAQT,KAAKM,QAAL,CAAcE,CAAd,CAAZ;;AACA,oBAAKE,SAAL,CAAeZ,OAAf,EAAwBC,QAAxB,EAAkCU,KAAlC,EAAyCT,IAAzC,EAA+CQ,CAA/C,EAAkDL,MAAlD;AACD;AACF;;AACD,gBAAKC,IAAL,CAAUJ,KAAKK,IAAL,GAAY,MAAtB,EAA8BP,OAA9B,EAAuCC,QAAvC,EAAiDC,IAAjD,EAAuDC,UAAvD,EAAmEC,UAAnE,EAA+EC,MAA/E;AACD,SATD,MASO,IAAI,6BAAYH,IAAZ,CAAJ,EAAuB;AAC5B,gBAAKI,IAAL,CAAUJ,KAAKW,SAAL,CAAgBC,SAA1B,EAAsCd,OAAtC,EAA+CC,QAA/C,EAAyDC,IAAzD,EAA+DC,UAA/D,EAA2EC,UAA3E,EAAuFC,MAAvF;AACD;AACF;AACF,K;;;;;yBApBIL,O,EAA0BC,Q,EAA4BI,M,EAA8B;AACvF,UAAIJ,SAASc,GAAb,EAAkB;AAChB,aAAKH,SAAL,CAAeZ,OAAf,EAAwBC,QAAxB,EAAkCA,SAASc,GAA3C,EAAgD,IAAhD,EAAsD,IAAtD,EAA4DV,MAA5D;AACD;AACF;;;;EALoCW,0B","sourcesContent":["import { EventEmitter } from \"eventemitter3\";\nimport { IAstNode, IRuleNode, ITokenNode } from \"./model/model\";\nimport { isRuleNode, isTokenNode } from \"./model/model-utils\";\nimport { IArgdownRequest } from \"./IArgdownRequest\";\nimport { IArgdownResponse } from \"./IArgdownResponse\";\nimport { IArgdownLogger } from \"./IArgdownLogger\";\nimport { IToken } from \"chevrotain\";\nexport interface IAstNodeHandler {\n  (\n    request: IArgdownRequest,\n    response: IArgdownResponse,\n    node: IAstNode,\n    parentNode: IRuleNode | null,\n    childIndex: number | null,\n    logger: IArgdownLogger\n  ): void;\n}\n/**\n * Interface for listeners of [rule.name]Entry and [rule.name]Exit events emitted by [[ArgdownTreeWalker]]\n *\n * @param request the request should contain the input and all configuration settings\n *\n * @param response the response should contain any data produced or transformed by plugins\n *\n * @param logger an application-wide logger that should be used instead of `console.log()`\n */\nexport interface IRuleNodeHandler {\n  (\n    request: IArgdownRequest,\n    response: IArgdownResponse,\n    node: IRuleNode,\n    parentNode: IRuleNode | null,\n    childIndex: number | null,\n    logger: IArgdownLogger\n  ): void;\n}\n/**\n * Interface for listeners of [token.tokenType.tokenName] events emitted by [[ArgdownTreeWalker]]\n */\nexport interface ITokenNodeHandler {\n  (\n    request: IArgdownRequest,\n    response: IArgdownResponse,\n    token: ITokenNode,\n    parentNode: IRuleNode | null,\n    childIndex: number | null,\n    logger: IArgdownLogger\n  ): void;\n}\n/**\n * Event emitter that visits every node in an Argdown Ast structure\n * and emits events for every rule entered and exited\n * and every token visited.\n */\nexport class ArgdownTreeWalker extends EventEmitter {\n  walk(request: IArgdownRequest, response: IArgdownResponse, logger: IArgdownLogger): void {\n    if (response.ast) {\n      this.visitNode(request, response, response.ast, null, null, logger);\n    }\n  }\n  private visitNode: IAstNodeHandler = (request, response, node, parentNode, childIndex, logger) => {\n    if (node) {\n      if (isRuleNode(node)) {\n        this.emit(node.name + \"Entry\", request, response, node, parentNode, childIndex, logger);\n        if (node.children && node.children.length > 0) {\n          for (var i = 0; i < node.children.length; i++) {\n            let child = node.children[i];\n            this.visitNode(request, response, child, node, i, logger);\n          }\n        }\n        this.emit(node.name + \"Exit\", request, response, node, parentNode, childIndex, logger);\n      } else if (isTokenNode(node)) {\n        this.emit(node.tokenType!.tokenName!, request, response, node, parentNode, childIndex, logger);\n      }\n    }\n  };\n}\n"],"file":"ArgdownTreeWalker.js"}