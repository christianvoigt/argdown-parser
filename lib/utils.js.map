{"version":3,"sources":["../src/utils.ts"],"names":["mdurl","require","punycode","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","ch","escapeHtml","str","test","replace","BAD_PROTO_WITHOUT_FILE_RE","BAD_PROTO_RE","GOOD_DATA_RE","validateLink","url","allowFile","trim","toLowerCase","proto_re","RECODE_HOSTNAME_FOR","normalizeLink","parsed","parse","hostname","protocol","indexOf","toASCII","er","encode","format","normalizeLinkText","toUnicode","decode","stringToHtmlId","id","stringToClassName","getHtmlId","type","title","htmlIdsSet","originalId","i","reduceToMap","a","idProvider","reduce","acc","curr","set","Map","tokensToString","tokens","token","tokenType","tokenName","image","tokenLocationsToString","startOffset","endOffset","startLine","endLine","startColumn","endColumn","astToString","ast","logAstRecursively","astToJsonString","JSON","stringify","value","pre","undefined","name","children","length","nextPre","child"],"mappings":"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","sourcesContent":["import { IAstNode } from \"./model/model\";\nimport { isTokenNode, isRuleNode } from \"./model/model-utils\";\n\nvar mdurl = require(\"mdurl\");\nvar punycode = require(\"punycode\");\n\n// taken from: https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js\n\nconst HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nconst HTML_REPLACEMENTS: { [char: string]: string } = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\"\n};\n\nconst replaceUnsafeChar = (ch: string): string => {\n  return HTML_REPLACEMENTS[ch];\n};\n\nexport const escapeHtml = (str: string): string => {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n};\n\n// taken from https://github.com/markdown-it/markdown-it/blob/master/lib/index.js\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nconst BAD_PROTO_WITHOUT_FILE_RE = /^(vbscript|javascript|data):/;\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nexport const validateLink = (url: string, allowFile: boolean): boolean => {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n  var proto_re = allowFile ? BAD_PROTO_WITHOUT_FILE_RE : BAD_PROTO_RE;\n\n  return proto_re.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst RECODE_HOSTNAME_FOR = [\"http:\", \"https:\", \"mailto:\"];\n\nexport const normalizeLink = (url: string): string => {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) {\n        /**/\n      }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n};\n\nexport const normalizeLinkText = (url: string): string => {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) {\n        /**/\n      }\n    }\n  }\n\n  return mdurl.decode(mdurl.format(parsed));\n};\n\n////////////////////////////////////////////////////////////////////////////////////\n// ARGDOWN Utils\n\nexport const stringToHtmlId = (str: string): string => {\n  let id = str;\n  id = id.toLowerCase();\n  id = id.replace(/ä/g, \"ae\");\n  id = id.replace(/ö/g, \"oe\");\n  id = id.replace(/ü/g, \"ue\");\n  id = id.replace(/ß/g, \"ss\");\n  id = id.replace(/\\s/g, \"-\");\n  id = id.replace(/[^a-z0-9\\-]/g, \"\");\n  return id;\n};\nexport const stringToClassName = (str: string): string => stringToHtmlId(str);\n\n/// Returns a html id of the form \"type-title\".\n/// If htmlIdsSet is not null, creates an id that is not already a member of the set.\n/// Example: If \"statement-s1\" is already a member of the set, it will return \"statement-s1-occurrence-2\".\n/// Note that you still have to add the new id to the set yourself if you want to avoid duplicates.\nexport const getHtmlId = (type: string, title: string, htmlIdsSet?: { [id: string]: boolean }): string => {\n  let id = type + \"-\" + title;\n  id = stringToHtmlId(id);\n  if (htmlIdsSet) {\n    let originalId = id;\n    let i = 1;\n    while (htmlIdsSet[id]) {\n      i++;\n      id = originalId + \"-occurrence-\" + i;\n    }\n  }\n  return id;\n};\nexport const reduceToMap = <K, V extends object>(a: V[], idProvider: (curr: V) => K): Map<K, V> => {\n  return a.reduce((acc, curr): Map<K, V> => {\n    acc.set(idProvider(curr), curr);\n    return acc;\n  }, new Map<K, V>());\n};\nexport const tokensToString = (tokens: chevrotain.IToken[]): string => {\n  let str = \"\";\n  for (let token of tokens) {\n    if (token.tokenType) {\n      str += token.tokenType.tokenName + \" \" + token.image + \"\\n\";\n    }\n  }\n  return str;\n};\nexport const tokenLocationsToString = (tokens: chevrotain.IToken[]): string => {\n  let str = \"\";\n  for (let token of tokens) {\n    if (!token.tokenType) {\n      continue;\n    }\n    str += token.tokenType.tokenName + \" \" + token.image + \"\\n\";\n    str +=\n      \"startOffset: \" +\n      token.startOffset +\n      \" endOffset: \" +\n      token.endOffset +\n      \" startLine: \" +\n      token.startLine +\n      \" endLine: \" +\n      token.endLine +\n      \" startColumn: \" +\n      token.startColumn +\n      \" endColumn: \" +\n      token.endColumn +\n      \"\\n\\n\";\n  }\n  return str;\n};\nexport const astToString = (ast: IAstNode): string => {\n  return logAstRecursively(ast, \"\", \"\");\n};\nexport const astToJsonString = (ast: IAstNode[]): string => {\n  return JSON.stringify(ast, null, 2);\n};\nconst logAstRecursively = (value: IAstNode, pre: string, str: string): string => {\n  if (value === undefined) {\n    str += \"undefined\";\n    return str;\n  } else if (isTokenNode(value)) {\n    str += value.tokenType!.tokenName;\n    return str;\n  } else if (isRuleNode(value)) {\n    str += value.name;\n    if (value.children && value.children.length > 0) {\n      let nextPre = pre + \" |\";\n      for (let child of value.children) {\n        str += \"\\n\" + nextPre + \"__\";\n        str = logAstRecursively(child, nextPre, str);\n      }\n      str += \"\\n\" + pre;\n    }\n  }\n  return str;\n};\n"],"file":"utils.js"}