{"version":3,"sources":["../../src/plugins/MetaDataPlugin.ts"],"names":["defaultSettings","mergeFrontMatterIntoRequest","switchToBlockFormatIfMultiline","frontMatterStartPattern","frontMatterEndPattern","blockFormatStartPattern","blockFormatEndPattern","MetaDataPlugin","config","_","defaultsDeep","getSettings","request","defaults","tokenListeners","MetaData","token","parentNode","logger","options","metaDataStr","image","settings","match","exec","substr","length","replace","metaData","yaml","safeLoad","FrontMatter","response","frontMatter","isObject","merge","r","metadata"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;AAoCA;;;AAGA,IAAMA,kBAAqC;AACzCC,+BAA6B,IADY;AAEzCC,kCAAgC;AAFS,CAA3C;AAIA,IAAMC,0BAA0B,YAAhC;AACA,IAAMC,wBAAwB,YAA9B;AACA,IAAMC,0BAA0B,mBAAhC;AACA,IAAMC,wBAAwB,OAA9B;AACA;;;;;;;;;;;;;;IAaaC,c;;;AAIX,0BAAYC,MAAZ,EAAwC;AAAA;;AAAA;;AAAA,kCAHjC,gBAGiC;;AAAA;;AAAA;;AAAA,qCA0Cb,mBAAW;AACpCC,QAAEC,YAAF,CAAe,MAAKC,WAAL,CAAiBC,OAAjB,CAAf,EAA0C,MAAKC,QAA/C;AACD,KA5CuC;;AACtC,SAAKA,QAAL,GAAgBJ,EAAEC,YAAF,CAAe,EAAf,EAAmBF,MAAnB,EAA2BR,eAA3B,CAAhB;AACA,SAAKc,cAAL,GAAsB;AACpBC,gBAAU,kBAACH,OAAD,QAAcI,KAAd,EAAqBC,UAArB,SAAqCC,MAArC,EAAgD;AAAA;;AAAA;;AACxD,YAAMC,UAA4B,EAAlC;AACA,YAAIC,cAAcJ,MAAMK,KAAxB;;AACA,YAAMC,WAAW,MAAKX,WAAL,CAAiBC,OAAjB,CAAjB;;AACA,YAAIU,SAASpB,8BAAb,EAA6C;AAC3C,cAAMqB,QAAQlB,wBAAwBmB,IAAxB,CAA6BJ,WAA7B,CAAd;;AACA,cAAIG,KAAJ,EAAW;AACTH,0BAAcA,YAAYK,MAAZ,CAAmBF,MAAM,CAAN,EAASG,MAA5B,EAAoCC,OAApC,CAA4CrB,qBAA5C,EAAmE,EAAnE,CAAd;AACD;AACF;;AACD,YAAMsB,WAAWC,KAAKC,QAAL,CAAcV,WAAd,EAA2BD,OAA3B,CAAjB;;AACA,YAAIF,UAAJ,EAAgB;AACdA,qBAAWW,QAAX,GAAsBA,QAAtB;AACD;AACF,OAfmB;AAgBpBG,mBAAa,qBAACnB,OAAD,EAAUoB,QAAV,EAAoBhB,KAApB,EAA2BC,UAA3B,SAA2CC,MAA3C,EAAsD;AAAA;;AACjE,YAAMC,UAA4B,EAAlC;AACA,YAAIC,cAAcJ,MAAMK,KAAN,CAAYM,OAAZ,CAAoBxB,uBAApB,EAA6C,EAA7C,EAAiDwB,OAAjD,CAAyDvB,qBAAzD,EAAgF,EAAhF,CAAlB;AACA,YAAMwB,WAAgBC,KAAKC,QAAL,CAAcV,WAAd,EAA2BD,OAA3B,CAAtB;;AACA,YAAIF,UAAJ,EAAgB;AACdA,qBAAWW,QAAX,GAAsBA,QAAtB;AACD;;AACmBI,gBAApB,CAA8BC,WAA9B,GAA4CL,QAA5C;;AACA,YAAMN,WAAW,MAAKX,WAAL,CAAiBC,OAAjB,CAAjB;;AACA,YAAIgB,YAAYnB,EAAEyB,QAAF,CAAWN,QAAX,CAAZ,IAAoCN,SAAUrB,2BAAlD,EAA+E;AAC7EQ,YAAE0B,KAAF,CAAQvB,OAAR,EAAiBgB,QAAjB;AACD;AACF;AA5BmB,KAAtB;AA8BD;;;;gCACWhB,O,EAA0B;AACpC,UAAMwB,IAAIxB,OAAV;;AACA,UAAIwB,EAAEC,QAAN,EAAgB;AACd,eAAOD,EAAEC,QAAT;AACD,OAFD,MAEO;AACLD,UAAEC,QAAF,GAAa,EAAb;AACA,eAAOD,EAAEC,QAAT;AACD;AACF,K,CAID","sourcesContent":["import * as _ from \"lodash\";\nimport * as yaml from \"js-yaml\";\nimport { IArgdownPlugin, IRequestHandler } from \"../IArgdownPlugin\";\nimport { IArgdownRequest } from \"../IArgdownRequest\";\nimport { IArgdownResponse } from \"../IArgdownResponse\";\nimport { IAstNodeHandler, IRuleNodeHandler, ITokenNodeHandler } from \"../ArgdownTreeWalker\";\n\n/**\n * Settings for the MetaDataPlugin\n */\nexport interface IMetaDataSettings {\n  /**\n   * If true the front matter yaml data is merged into the request object.\n   * This makes it possible to configure plugins without using an external argdown.config.js file.\n   */\n  mergeFrontMatterIntoRequest?: boolean;\n  /**\n   * If false the YAML metaData of arguments, statements and headings is always parsed with the outer curly brackets.\n   * In this case the YAML data has to always be in inline format which looks similar to JSON data.\n   *\n   * If true the metaData is parsed without the outer curly brackets if the opening bracket is followed by a line break.\n   * This means that the YAML data has to be in block format instead of the JSON-like inline format.\n   */\n  switchToBlockFormatIfMultiline?: boolean;\n}\n/**\n * Request configuration data used by the MetaDataPlugin\n */\nexport interface IMetaDataRequest extends IArgdownRequest {\n  metadata?: IMetaDataSettings;\n}\n/**\n * Response data produced by the MetaDataPlugin\n */\nexport interface IMetaDataResponse extends IArgdownResponse {\n  frontMatter?: any;\n}\n/**\n * The default settings of the MetaDataPlugin\n */\nconst defaultSettings: IMetaDataSettings = {\n  mergeFrontMatterIntoRequest: true,\n  switchToBlockFormatIfMultiline: true\n};\nconst frontMatterStartPattern = /^\\s*\\={3,}/;\nconst frontMatterEndPattern = /\\={3,}\\s*$/;\nconst blockFormatStartPattern = /^{[ \\t]*(\\n\\r|\\n)/;\nconst blockFormatEndPattern = /}\\s*$/;\n/**\n * The MetaDataPlugin parses Argdown YAML front matter and YAML meta data of statements, arguments, headings or inferences.\n * In the ParserPlugin the Argdown lexer treats these sections as single tokens so that their contents are ignored by the Argdown parser. Instead the YAML parsing is done\n * afterwards in this plugin by traversing the produced AST and using the `js-yaml` parser for parsing the content of the FrontMatter and MetaData tokens.\n *\n * The parsed metaData is added to the AST nodes and the data model elements it is meant for.\n * If multiple metaData sections exist for the same argument or equivalence class, the data is merged in order of appearance (last wins).\n *\n * The front matter data is added to the topmost AST `argdown` node and to the [[IMetaDataResponse.frontMatter]] response property.\n * By default (or if `response.metaData.mergeFrontMatterIntoRequest` is true) the front matter is also merged into the request object so that it can be used to configure subsequent plugins.\n *\n * Depends on data of: [[ParserPlugin]]\n */\nexport class MetaDataPlugin implements IArgdownPlugin {\n  name = \"MetaDataPlugin\";\n  defaults: IMetaDataSettings;\n  tokenListeners: { [eventId: string]: ITokenNodeHandler };\n  constructor(config?: IMetaDataSettings) {\n    this.defaults = _.defaultsDeep({}, config, defaultSettings);\n    this.tokenListeners = {\n      MetaData: (request, {}, token, parentNode, {}, logger) => {\n        const options: yaml.LoadOptions = {};\n        let metaDataStr = token.image;\n        const settings = this.getSettings(request);\n        if (settings.switchToBlockFormatIfMultiline) {\n          const match = blockFormatStartPattern.exec(metaDataStr);\n          if (match) {\n            metaDataStr = metaDataStr.substr(match[0].length).replace(blockFormatEndPattern, \"\");\n          }\n        }\n        const metaData = yaml.safeLoad(metaDataStr, options);\n        if (parentNode) {\n          parentNode.metaData = metaData;\n        }\n      },\n      FrontMatter: (request, response, token, parentNode, {}, logger) => {\n        const options: yaml.LoadOptions = {};\n        let metaDataStr = token.image.replace(frontMatterStartPattern, \"\").replace(frontMatterEndPattern, \"\");\n        const metaData: any = yaml.safeLoad(metaDataStr, options);\n        if (parentNode) {\n          parentNode.metaData = metaData;\n        }\n        (<IMetaDataResponse>response).frontMatter = metaData;\n        const settings = this.getSettings(request);\n        if (metaData && _.isObject(metaData) && settings!.mergeFrontMatterIntoRequest) {\n          _.merge(request, metaData);\n        }\n      }\n    };\n  }\n  getSettings(request: IArgdownRequest) {\n    const r = request as IMetaDataRequest;\n    if (r.metadata) {\n      return r.metadata;\n    } else {\n      r.metadata = {};\n      return r.metadata;\n    }\n  }\n  prepare: IRequestHandler = request => {\n    _.defaultsDeep(this.getSettings(request), this.defaults);\n  };\n  //   run: IRequestHandler = (request, response, logger) => {};\n}\n"],"file":"MetaDataPlugin.js"}