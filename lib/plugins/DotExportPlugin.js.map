{"version":3,"sources":["../../src/plugins/DotExportPlugin.ts"],"names":["defaultSettings","useHtmlLabels","graphname","lineLength","groupColors","graphVizSettings","rankdir","concentrate","ratio","size","colorNodesByTag","DotExportPlugin","config","request","response","mapResponse","map","ArgdownPluginError","name","statements","arguments","relations","_","defaultsDeep","getSettings","defaults","logger","settings","groupCount","dot","keys","Object","key","value","nodes","node","exportNodesRecursive","edges","edge","color","relationType","RelationType","ATTACK","UNDERCUT","attributes","type","from","id","to","r","undefined","ArgdownTypes","GROUP_MAP_NODE","groupNode","dotGroupId","groupLabel","labelTitle","foldAndEscape","escapeQuotesForDot","groupColor","length","level","labelloc","children","child","title","text","labelText","label","tags","tagsDictionary","tag","tagData","getLabel","ARGUMENT_MAP_NODE","STATEMENT_MAP_NODE","fold","s","n","useSpaces","a","push","line","substring","lastSpaceRgx","idx","search","nextIdx","str","strArray","i","escapeForHtml","join","replace","c","charCodeAt","isEmpty","titleLabel","textLabel"],"mappings":"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","sourcesContent":["import * as _ from \"lodash\";\nimport { IArgdownRequest } from \"../IArgdownRequest\";\nimport { IArgdownResponse } from \"../IArgdownResponse\";\nimport { IArgdownPlugin, IRequestHandler } from \"../IArgdownPlugin\";\nimport { IMapResponse } from \"./MapPlugin\";\nimport { ArgdownPluginError } from \"../ArgdownPluginError\";\nimport { RelationType, ArgdownTypes, IMapNode, IGroupMapNode } from \"../model/model\";\n\nexport interface IDotSettings {\n  useHtmlLabels?: boolean;\n  graphname?: string;\n  lineLength?: number;\n  groupColors?: string[];\n  graphVizSettings?: { [name: string]: string };\n  colorNodesByTag?: boolean;\n}\nexport interface IDotRequest extends IArgdownRequest {\n  dot?: IDotSettings;\n}\nexport interface IDotResponse extends IArgdownResponse {\n  dot?: string;\n  groupCount?: number;\n}\nconst defaultSettings: IDotSettings = {\n  useHtmlLabels: true,\n  graphname: \"Argument Map\",\n  lineLength: 25,\n  groupColors: [\"#DADADA\", \"#BABABA\", \"#AAAAAA\"],\n  graphVizSettings: {\n    rankdir: \"BT\", //BT | TB | LR | RL\n    concentrate: \"false\",\n    ratio: \"auto\",\n    size: \"10,10\"\n  },\n  colorNodesByTag: true\n};\n/**\n * Exports map data to dot format.\n * The result ist stored in the [[IDotResponse.dot]] response object property.\n *\n * Depends on data from: [[MapPlugin]]\n */\nexport class DotExportPlugin implements IArgdownPlugin {\n  name: string = \"DotExportPlugin\";\n  defaults: IDotSettings;\n  constructor(config?: IDotSettings) {\n    this.defaults = _.defaultsDeep({}, config, defaultSettings);\n  }\n  getSettings(request: IArgdownRequest): IDotSettings {\n    const r: IDotRequest = request as IDotRequest;\n    if (r.dot) {\n      return r.dot;\n    } else {\n      r.dot = {};\n      return r.dot;\n    }\n  }\n  prepare: IRequestHandler = (request, response) => {\n    const mapResponse = <IMapResponse>response;\n    if (!mapResponse.map) {\n      throw new ArgdownPluginError(this.name, \"No map property in response.\");\n    }\n    if (!mapResponse.statements) {\n      throw new ArgdownPluginError(this.name, \"No statements property in response.\");\n    }\n    if (!mapResponse.arguments) {\n      throw new ArgdownPluginError(this.name, \"No arguments property in response.\");\n    }\n    if (!mapResponse.relations) {\n      throw new ArgdownPluginError(this.name, \"No relations property in response.\");\n    }\n    _.defaultsDeep(this.getSettings(request), this.defaults);\n  };\n  run: IRequestHandler = (request, response, logger) => {\n    const settings = this.getSettings(request);\n    const mapResponse = <IMapResponse>response;\n\n    (<IDotResponse>response).groupCount = 0;\n    let dot = 'digraph \"' + settings.graphname + '\" {\\n\\n';\n    if (settings.graphVizSettings) {\n      const keys = Object.keys(settings.graphVizSettings);\n      for (let key of keys) {\n        const value = settings.graphVizSettings[key];\n        dot += key + ' = \"' + value + '\";\\n';\n      }\n    }\n\n    for (let node of mapResponse.map!.nodes) {\n      dot += this.exportNodesRecursive(node, response, settings);\n    }\n\n    dot += \"\\n\\n\";\n    const edges = mapResponse.map!.edges;\n    for (let edge of edges) {\n      let color = \"green\";\n      if (edge.relationType == RelationType.ATTACK) {\n        color = \"red\";\n      } else if (edge.relationType == RelationType.UNDERCUT) {\n        color = \"purple\";\n      }\n      let attributes = 'color=\"' + color + '\", type=\"' + edge.type + '\"';\n      dot += \"  \" + edge.from.id + \" -> \" + edge.to.id + \" [\" + attributes + \"];\\n\";\n    }\n\n    dot += \"\\n}\";\n\n    (<IDotResponse>response).dot = dot;\n    return response;\n  };\n  exportNodesRecursive(node: IMapNode, response: IDotResponse, settings: IDotSettings): string {\n    let dot = \"\";\n    response.groupCount = response.groupCount === undefined ? 0 : response.groupCount;\n    if (node.type === ArgdownTypes.GROUP_MAP_NODE) {\n      const groupNode: IGroupMapNode = <IGroupMapNode>node;\n      response.groupCount++;\n      let dotGroupId = \"cluster_\" + response.groupCount;\n      let groupLabel = node.labelTitle || \"\";\n      if (settings.useHtmlLabels) {\n        groupLabel = foldAndEscape(groupLabel, settings.lineLength || defaultSettings.lineLength!);\n        groupLabel = '<<FONT FACE=\"Arial\" POINT-SIZE=\"10\">' + groupLabel + \"</FONT>>\";\n      } else {\n        groupLabel = '\"' + escapeQuotesForDot(groupLabel) + '\"';\n      }\n      let groupColor = \"#CCCCCC\";\n      if (settings.groupColors && settings.groupColors.length > 0) {\n        const level = groupNode.level || 0;\n        if (settings.groupColors.length >= level) {\n          groupColor = settings.groupColors[level];\n        } else {\n          groupColor = settings.groupColors[settings.groupColors.length - 1];\n        }\n      }\n\n      dot += \"\\nsubgraph \" + dotGroupId + \" {\\n\";\n      dot += \"  label = \" + groupLabel + \";\\n\";\n      dot += '  color = \"' + groupColor + '\";\\n';\n      dot += \"  style = filled;\\n\";\n      let labelloc = \"t\";\n      if (settings.graphVizSettings && settings.graphVizSettings.rankdir == \"BT\") {\n        labelloc = \"b\";\n      }\n      dot += ' labelloc = \"' + labelloc + '\";\\n\\n';\n      if (groupNode.children) {\n        for (let child of groupNode.children) {\n          dot += this.exportNodesRecursive(child, response, settings);\n        }\n      }\n      dot += \"\\n}\\n\\n\";\n      return dot;\n    }\n\n    let title = node.labelTitle || \"\";\n    let text = node.labelText || \"\";\n    let label = \"\";\n    let color = \"#63AEF2\";\n    if (settings.colorNodesByTag && node.tags && response.tagsDictionary) {\n      const tag = node.tags[0];\n      let tagData = response.tagsDictionary[tag];\n      if (tagData && tagData.color) {\n        color = tagData.color;\n      }\n    }\n    label = getLabel(title, text, settings);\n    if (node.type === ArgdownTypes.ARGUMENT_MAP_NODE) {\n      dot +=\n        \"  \" +\n        node.id +\n        \" [label=\" +\n        label +\n        ', shape=\"box\", style=\"filled,rounded\", fillcolor=\"' +\n        color +\n        '\",  type=\"' +\n        node.type +\n        '\"];\\n';\n    } else if (node.type === ArgdownTypes.STATEMENT_MAP_NODE) {\n      dot +=\n        \"  \" +\n        node.id +\n        \" [label=\" +\n        label +\n        ', shape=\"box\", style=\"filled,rounded,bold\", color=\"' +\n        color +\n        '\", fillcolor=\"white\", labelfontcolor=\"white\", type=\"' +\n        node.type +\n        '\"];\\n';\n    }\n    return dot;\n  }\n}\nconst fold = (s: string, n: number, useSpaces: boolean, a?: string[]): string[] => {\n  if (!s) return [];\n\n  a = a || [];\n  if (s.length <= n) {\n    a.push(s);\n    return a;\n  }\n  var line = s.substring(0, n);\n  if (!useSpaces) {\n    // insert newlines anywhere\n    a.push(line);\n    return fold(s.substring(n), n, useSpaces, a);\n  } else {\n    // attempt to insert newlines after whitespace\n    var lastSpaceRgx = /\\s(?!.*\\s)/;\n    var idx = line.search(lastSpaceRgx);\n    var nextIdx = n;\n    if (idx > 0) {\n      line = line.substring(0, idx);\n      nextIdx = idx;\n    }\n    a.push(line);\n    return fold(s.substring(nextIdx), n, useSpaces, a);\n  }\n};\nconst foldAndEscape = (str: string, lineLength: number): string => {\n  let strArray = fold(str, lineLength, true);\n  for (let i = 0; i < strArray.length; i++) {\n    strArray[i] = escapeForHtml(strArray[i]);\n  }\n  return strArray.join(\"<br/>\");\n};\nconst escapeForHtml = (s: string): string => {\n  return s.replace(/[^0-9A-Za-z ]/g, function(c) {\n    return \"&#\" + c.charCodeAt(0) + \";\";\n  });\n};\nconst escapeQuotesForDot = (str: string): string => {\n  return str.replace(/\\\"/g, '\\\\\"');\n};\nconst getLabel = (title: string, text: string, settings: IDotSettings): string => {\n  let label = \"\";\n  if (settings.useHtmlLabels) {\n    label += '<<FONT FACE=\"Arial\" POINT-SIZE=\"8\"><TABLE BORDER=\"0\" CELLSPACING=\"0\">';\n    if (!_.isEmpty(title)) {\n      let titleLabel = foldAndEscape(title, settings.lineLength || defaultSettings.lineLength!);\n      titleLabel = '<TR><TD ALIGN=\"center\"><B>' + titleLabel + \"</B></TD></TR>\";\n      label += titleLabel;\n    }\n    if (!_.isEmpty(text)) {\n      let textLabel = foldAndEscape(text, settings.lineLength || defaultSettings.lineLength!);\n      textLabel = '<TR><TD ALIGN=\"center\">' + textLabel + \"</TD></TR>\";\n      label += textLabel;\n    }\n    label += \"</TABLE></FONT>>\";\n  } else {\n    label = '\"' + escapeQuotesForDot(title) + '\"';\n  }\n  return label;\n};\n"],"file":"DotExportPlugin.js"}