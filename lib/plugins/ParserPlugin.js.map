{"version":3,"sources":["../../src/plugins/ParserPlugin.ts"],"names":["tokenMatcher","chevrotain","ParserPlugin","request","response","logger","input","ArgdownPluginError","name","lexResult","argdownLexer","tokenize","tokens","lexerErrors","errors","parser","ast","argdown","parserErrors","length","log","JSON","stringify"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAKA;;;;;;;;;;;;AAEA,IAAMA,eAAeC,WAAWD,YAAhC;AAEA;;;;;;;;;;;;;IAYaE,Y;;;;;;kCACI,c;;;;;wBACXC,O,EAA0BC,Q,EAA4BC,M,EAAwB;AAChF,UAAI,CAACF,QAAQG,KAAb,EAAoB;AAClB,cAAM,IAAIC,sCAAJ,CAAuB,KAAKC,IAA5B,EAAkC,4BAAlC,CAAN;AACD;;AAED,UAAIC,YAAYC,aAAaC,QAAb,CAAsBR,QAAQG,KAA9B,CAAhB;AACAF,eAASQ,MAAT,GAAkBH,UAAUG,MAA5B;AACAR,eAASS,WAAT,GAAuBJ,UAAUK,MAAjC;AACAC,qBAAOT,KAAP,GAAeG,UAAUG,MAAzB;AACAR,eAASY,GAAT,GAAeD,eAAOE,OAAP,EAAf;AACAb,eAASc,YAAT,GAAwBH,eAAOD,MAA/B;;AAEA,UAAIV,SAASS,WAAT,IAAwBT,SAASS,WAAT,CAAqBM,MAArB,GAA8B,CAA1D,EAA6D;AAC3Dd,eAAOe,GAAP,CAAW,SAAX,EAAsB,6CAA6CC,KAAKC,SAAL,CAAelB,SAASS,WAAxB,CAAnE;AACD;;AACD,UAAIT,SAASc,YAAT,IAAyBd,SAASc,YAAT,CAAsBC,MAAtB,GAA+B,CAA5D,EAA+D;AAC7Dd,eAAOe,GAAP,CAAW,SAAX,EAAsB,8CAA8CC,KAAKC,SAAL,CAAelB,SAASc,YAAxB,CAApE;AACD,OAjB+E,CAkBhF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,aAAOd,QAAP;AACD","sourcesContent":["import * as _ from \"lodash\";\nimport * as argdownLexer from \"../lexer\";\nimport { parser } from \"../parser\";\nimport * as chevrotain from \"chevrotain\";\nimport { IArgdownPlugin } from \"../IArgdownPlugin\";\nimport { IArgdownRequest } from \"../IArgdownRequest\";\nimport { IArgdownResponse } from \"../IArgdownResponse\";\nimport { IArgdownLogger } from \"../IArgdownLogger\";\nimport { ArgdownPluginError } from \"../ArgdownPluginError\";\n\nconst tokenMatcher = chevrotain.tokenMatcher;\n\n/**\n * The ParserPlugin is the most basic building block of an ArgdownApplication.\n * It takes a string provided in [[IArgdownRequest.input]]\n * and scans it for tokens. The resulting tokens list is added to the [[IArgdownResponse.tokens]] response property.\n * The tokens are parsed into an abstract syntax tree (AST).\n * The AST is added to the [[IArgdownResponse.ast]] response property.\n *\n * The AST is then used by the [[ModelPlugin]] to build the basic data model used by most other plugins.\n *\n * Lexer errors are added to [[IArgdownResponse.lexerErrors]] response property. Parser errors are added to the [[IArgdownResponse.parserErrors]] response property.\n * These errors can be used to build an Argdown linter.\n */\nexport class ParserPlugin implements IArgdownPlugin {\n  name: string = \"ParserPlugin\";\n  run(request: IArgdownRequest, response: IArgdownResponse, logger: IArgdownLogger) {\n    if (!request.input) {\n      throw new ArgdownPluginError(this.name, \"No input field in request.\");\n    }\n\n    let lexResult = argdownLexer.tokenize(request.input);\n    response.tokens = lexResult.tokens;\n    response.lexerErrors = lexResult.errors;\n    parser.input = lexResult.tokens;\n    response.ast = parser.argdown();\n    response.parserErrors = parser.errors;\n\n    if (response.lexerErrors && response.lexerErrors.length > 0) {\n      logger.log(\"verbose\", \"[ParserPlugin]: Lexer returned errors.\\n\" + JSON.stringify(response.lexerErrors));\n    }\n    if (response.parserErrors && response.parserErrors.length > 0) {\n      logger.log(\"verbose\", \"[ParserPlugin]: Parser returned errors.\\n\" + JSON.stringify(response.parserErrors));\n    }\n    // if (response.parserErrors && response.parserErrors.length > 0) {\n    //   // //add location if token is EOF\n    //   var lastToken = _.last(response.tokens);\n    //   for (let error of response.parserErrors) {\n    //     if (error.token && tokenMatcher(error.token, chevrotain.EOF)) {\n    //       const startLine = lastToken.endLine;\n    //       const endLine = startLine;\n    //       const startOffset = lastToken.endOffset;\n    //       const endOffset = startOffset;\n    //       const startColumn = lastToken.endColumn;\n    //       const endColumn = startColumn;\n    //       const newToken = chevrotain.createTokenInstance(\n    //         chevrotain.EOF,\n    //         \"\",\n    //         startOffset,\n    //         endOffset,\n    //         startLine,\n    //         endLine,\n    //         startColumn,\n    //         endColumn\n    //       );\n    //       error.token = newToken;\n    //     }\n    //   }\n    // }\n    return response;\n  }\n}\n"],"file":"ParserPlugin.js"}