{"version":3,"sources":["../../src/plugins/HtmlExportPlugin.ts"],"names":["defaultSettings","headless","cssFile","title","lang","charset","allowFileProtocol","validateLink","utils","normalizeLink","HtmlExportPlugin","request","r","settings","html","config","response","logger","_","defaultsDeep","getSettings","defaults","ast","ArgdownPluginError","name","statements","arguments","$","htmlRequest","htmlResponse","tokenListeners","TokenNames","STATEMENT_DEFINITION","token","parentNode","htmlId","getHtmlId","htmlIds","classes","equivalenceClass","sortedTags","getCssClassesFromTags","escape","STATEMENT_REFERENCE","STATEMENT_MENTION","trailingWhitespace","ARGUMENT_MENTION","argument","LINK","linkUrl","url","linkText","text","TAG","node","tag","ruleListeners","RuleNames","ARGDOWN","head","STATEMENT","tags","startLine","ARGUMENT_REFERENCE","ARGUMENT_DEFINITION","INCOMING_SUPPORT","INCOMING_ATTACK","INCOMING_UNDERCUT","OUTGOING_SUPPORT","OUTGOING_ATTACK","OUTGOING_UNDERCUT","CONTRADICTION","RELATIONS","ORDERED_LIST","UNORDERED_LIST","ORDERED_LIST_ITEM","UNORDERED_LIST_ITEM","HEADING","level","replace","BOLD","PCS","statement","inference","inferenceRules","length","i","inferenceRule","role","statementNr","ARGUMENT_STATEMENT","tagsDictionary","index","tagData","cssClass"],"mappings":"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","sourcesContent":["import * as _ from \"lodash\";\nimport * as utils from \"../utils\";\nimport { IArgdownPlugin, IRequestHandler } from \"../IArgdownPlugin\";\nimport { IArgdownRequest } from \"../IArgdownRequest\";\nimport { IAstNodeHandler, IRuleNodeHandler, ITokenNodeHandler } from \"../ArgdownTreeWalker\";\nimport { IArgdownResponse } from \"../IArgdownResponse\";\nimport { ArgdownPluginError } from \"../ArgdownPluginError\";\nimport { isConclusion } from \"../model/model-utils\";\nimport { ITokenNode, IRuleNode } from \"../model/model\";\nimport { TokenNames } from \"../TokenNames\";\nimport { RuleNames } from \"../RuleNames\";\n\n/**\n * Settings used by the HTMLExportPlugin\n */\nexport interface IHtmlExportSettings {\n  /**\n   * Remove sourrounding html and body tags, remove head section of HTML.\n   *\n   * Instead a simple div containing the argdown HTML is returned.\n   */\n  headless?: boolean;\n  /**\n   * External CSS file to include in the HTML head section.\n   */\n  cssFile?: string;\n  /** Title of the HTML document. If not provided, the first top-level heading will be used. */\n  title?: string;\n  lang?: string;\n  charset?: string;\n  allowFileProtocol?: boolean;\n  /** Optional setting to specify a custom head section. */\n  head?: string;\n  /** Function to test if a link is valid. */\n  validateLink?: (url: string, allowFile: boolean) => boolean;\n  /** Function to normalize links. */\n  normalizeLink?: (url: string) => string;\n}\nconst defaultSettings: IHtmlExportSettings = {\n  headless: false,\n  cssFile: \"./argdown.css\",\n  title: \"Argdown Document\",\n  lang: \"en\",\n  charset: \"utf8\",\n  allowFileProtocol: false,\n  validateLink: utils.validateLink,\n  normalizeLink: utils.normalizeLink\n};\n/**\n * Request configuration data used by the HTMLExportPlugin.\n */\nexport interface IHtmlRequest extends IArgdownRequest {\n  html?: IHtmlExportSettings;\n}\n/**\n * Response data produced by the HTMLExportPlugin.\n */\nexport interface IHtmlResponse extends IArgdownResponse {\n  /** the exported html string */\n  html?: string;\n  htmlIds?: { [id: string]: boolean } | null;\n}\n/**\n * Exports the Argdown code to HTML.\n *\n * Depends on data from: ParserPlugin, ModelPlugin\n *\n * Can use data from: TagPlugin\n */\nexport class HtmlExportPlugin implements IArgdownPlugin {\n  name = \"HtmlExportPlugin\";\n  defaults: IHtmlExportSettings;\n  ruleListeners: { [eventId: string]: IRuleNodeHandler };\n  tokenListeners: { [eventId: string]: ITokenNodeHandler };\n  getSettings(request: IArgdownRequest) {\n    const r = request as IHtmlRequest;\n    let settings = r.html;\n    if (!settings) {\n      settings = {};\n      r.html = settings;\n    }\n    return settings;\n  }\n  prepare: IRequestHandler = (request, response, logger) => {\n    _.defaultsDeep(this.getSettings(request), this.defaults);\n    if (!response.ast) {\n      throw new ArgdownPluginError(this.name, \"No AST field in response.\");\n    }\n    if (!response.statements) {\n      throw new ArgdownPluginError(this.name, \"No statements field in response.\");\n    }\n    if (!response.arguments) {\n      throw new ArgdownPluginError(this.name, \"No arguments field in response.\");\n    }\n  };\n  constructor(config?: IHtmlExportSettings) {\n    this.defaults = _.defaultsDeep({}, config, defaultSettings);\n    const $ = this;\n    let htmlRequest: IHtmlRequest;\n    let htmlResponse: IHtmlResponse;\n    this.tokenListeners = {\n      [TokenNames.STATEMENT_DEFINITION]: (request, response, token, parentNode) => {\n        let htmlId = utils.getHtmlId(\"statement\", token.title!, htmlResponse.htmlIds!);\n        htmlResponse.htmlIds![htmlId] = true;\n        let classes = \"definition statement-definition definiendum\";\n        if (parentNode!.equivalenceClass && parentNode!.equivalenceClass!.sortedTags) {\n          classes += \" \" + $.getCssClassesFromTags(response, parentNode!.equivalenceClass!.sortedTags!);\n        }\n        htmlResponse.html += `<span id=${htmlId}\" class=\"${classes}\">[<span class=\"title statement-title\">${_.escape(\n          token.title\n        )}</span>]: </span>`;\n      },\n      [TokenNames.STATEMENT_REFERENCE]: (request, response, token, parentNode) => {\n        let htmlId = utils.getHtmlId(\"statement\", token.title!);\n        let classes = \"reference statement-reference\";\n        if (parentNode!.equivalenceClass && parentNode!.equivalenceClass!.sortedTags) {\n          classes += \" \" + $.getCssClassesFromTags(response, parentNode!.equivalenceClass!.sortedTags!);\n        }\n        htmlResponse.html += `<a href=\"#${htmlId}\" class=\"${classes}\">[<span class=\"title statement-title\">${_.escape(\n          token.title\n        )}</span>] </a>`;\n      },\n      [TokenNames.STATEMENT_MENTION]: (request, response, token) => {\n        const equivalenceClass = response.statements![token.title!];\n        let classes = \"mention statement-mention\";\n        if (equivalenceClass.sortedTags) {\n          classes += \" \" + $.getCssClassesFromTags(response, equivalenceClass.sortedTags);\n        }\n        let htmlId = utils.getHtmlId(\"statement\", token.title!);\n        htmlResponse.html += `<a href=\"#${htmlId}\" class=\"${classes}\">@[<span class=\"title statement-title\">${_.escape(\n          token.title\n        )}</span>]</a>${token.trailingWhitespace}`;\n      },\n      [TokenNames.ARGUMENT_MENTION]: (request, response, token) => {\n        let htmlId = utils.getHtmlId(\"argument\", token.title!);\n        let classes = \"mention argument-mention\";\n        const argument = response.arguments![token.title!];\n        if (argument.sortedTags) {\n          classes += \" \" + $.getCssClassesFromTags(response, argument.sortedTags);\n        }\n        htmlResponse.html += `<a href=\"#${htmlId}\" class=\"${classes}\">@&lt;<span class=\"title argument-title\">${_.escape(\n          token.title\n        )}</span>&gt;</a>${token.trailingWhitespace}`;\n      },\n      [TokenNames.LINK]: (request, response, token) => {\n        let settings = $.getSettings(request);\n        let linkUrl = settings.normalizeLink!(token.url!);\n        let linkText = token.text;\n        if (!settings.validateLink!(linkUrl, settings.allowFileProtocol || false)) {\n          linkUrl = \"\";\n          linkText = \"removed insecure url.\";\n        }\n        htmlResponse.html += `<a href=\"${linkUrl}\">${linkText}</a>${token.trailingWhitespace}`;\n      },\n      [TokenNames.TAG]: (request, response, node) => {\n        const token = node as ITokenNode;\n        if (token.text) {\n          htmlResponse.html += `<span class=\"tag ${$.getCssClassesFromTags(response, [token.tag!])}\">${_.escape(\n            token.text\n          )}</span>`;\n        }\n      }\n    };\n    this.ruleListeners = {\n      [RuleNames.ARGDOWN + \"Entry\"]: (request, response) => {\n        htmlRequest = request as IHtmlRequest;\n        htmlResponse = response as IHtmlResponse;\n        htmlResponse.html = \"\";\n        htmlResponse.htmlIds = {};\n        let settings = $.getSettings(request);\n        if (!settings.headless) {\n          let head = settings.head;\n          if (!head) {\n            head = `<!doctype html><html lang=\"${settings.lang}\"><head><meta charset=\"${settings.charset}\"><title>${\n              settings.title\n            }</title>`;\n            if (settings.cssFile) {\n              head += `<link rel=\"stylesheet\" href=${settings.cssFile}\">`;\n            }\n            head += \"</head>\";\n          }\n          htmlResponse.html += head;\n          htmlResponse.html += \"<body>\";\n        }\n        htmlResponse.html += `<div class=\"argdown\">`;\n      },\n      [RuleNames.ARGDOWN + \"Exit\"]: (request, response) => {\n        let settings = $.getSettings(request);\n        // Remove htmlIds, because other plugins might create their own ones.\n        // Ids only need to be unique within one document, not across documents.\n        htmlResponse.htmlIds = null;\n        htmlResponse.html += \"</div>\";\n        if (!settings.headless) {\n          htmlResponse.html += \"</body></html>\";\n        }\n      },\n      [RuleNames.STATEMENT + \"Entry\"]: (request, response, node) => {\n        let classes = \"statement\";\n        if (node.equivalenceClass && node.equivalenceClass.tags && node.equivalenceClass.sortedTags) {\n          classes += \" \" + $.getCssClassesFromTags(response, node.equivalenceClass.sortedTags);\n        }\n        htmlResponse.html += `<div data-line=\"has-line ${node.startLine}\" class=\"${classes}\">`;\n      },\n      [RuleNames.STATEMENT + \"Exit\"]: (request, response) => (htmlResponse.html += \"</div>\"),\n      [RuleNames.ARGUMENT_REFERENCE + \"Entry\"]: (request, response, node) => {\n        let htmlId = utils.getHtmlId(\"argument\", node.argument!.title!);\n        let classes = \"reference argument-reference\";\n        if (node.argument!.tags && node.argument!.sortedTags) {\n          classes += \" \" + $.getCssClassesFromTags(response, node.argument!.sortedTags!);\n        }\n        htmlResponse.html += `<a href=\"#${htmlId}\" data-line=\"${\n          node.startLine\n        }\" class=\"has-line ${classes}\">&lt;<span class=\"title argument-title\">${_.escape(\n          node.argument!.title\n        )}</span>&gt; </a>`;\n      },\n      [RuleNames.ARGUMENT_DEFINITION + \"Entry\"]: (request, response, node) => {\n        let htmlId = utils.getHtmlId(\"argument\", node.argument!.title!, htmlResponse.htmlIds!);\n        htmlResponse.htmlIds![htmlId] = true;\n        let classes = \"definition argument-definition\";\n        if (node.argument!.tags && node.argument!.sortedTags) {\n          classes += \" \" + $.getCssClassesFromTags(response, node.argument!.sortedTags!);\n        }\n        htmlResponse.html += `<div id=\"${htmlId}\" data-line=\"${\n          node.startLine\n        }\" class=\"has-line ${classes}\"><span class=\"definiendum argument-definiendum\">&lt;<span class=\"title argument-title\">${_.escape(\n          node.argument!.title\n        )}</span>&gt;: </span><span class=\"argument-definiens definiens description\">`;\n      },\n      [RuleNames.ARGUMENT_DEFINITION + \"Exit\"]: (request, response) => (htmlResponse.html += \"</span></div>\"),\n      [RuleNames.INCOMING_SUPPORT + \"Entry\"]: (request, response, node) => {\n        htmlResponse.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line incoming support relation\"><div class=\"incoming support relation-symbol\"><span>+&gt;</span></div>`;\n      },\n      [RuleNames.INCOMING_SUPPORT + \"Exit\"]: (request, response) => (htmlResponse.html += \"</div>\"),\n      [RuleNames.INCOMING_ATTACK + \"Entry\"]: (request, response, node) => {\n        htmlResponse.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line incoming attack relation\"><div class=\"incoming attack relation-symbol\"><span>-&gt;</span></div>`;\n      },\n      [RuleNames.INCOMING_ATTACK + \"Exit\"]: (request, response) => (htmlResponse.html += \"</div>\"),\n      [RuleNames.INCOMING_UNDERCUT + \"Entry\"]: (request, response, node) => {\n        htmlResponse.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line incoming undercut relation\"><div class=\"incoming undercut relation-symbol\"><span>_&gt;</span></div>`;\n      },\n      [RuleNames.INCOMING_UNDERCUT + \"Exit\"]: (request, response) => (htmlResponse.html += \"</div>\"),\n      [RuleNames.OUTGOING_SUPPORT + \"Entry\"]: (request, response, node) => {\n        htmlResponse.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line outgoing support relation\"><div class=\"outgoing support relation-symbol\"><span>+</span></div>`;\n      },\n      [RuleNames.OUTGOING_SUPPORT + \"Exit\"]: (request, response) => {\n        htmlResponse.html += \"</div>\";\n      },\n      [RuleNames.OUTGOING_ATTACK + \"Entry\"]: (request, response, node) => {\n        htmlResponse.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line outgoing attack relation\"><div class=\"outgoing attack relation-symbol\"><span>-</span></div>`;\n      },\n      [RuleNames.OUTGOING_ATTACK + \"Exit\"]: (request, response) => {\n        htmlResponse.html += \"</div>\";\n      },\n      [RuleNames.OUTGOING_UNDERCUT + \"Entry\"]: (request, response, node) => {\n        htmlResponse.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line outgoing undercut relation\"><div class=\"outgoing undercut relation-symbol\"><span>&lt;_</span></div>`;\n      },\n      [RuleNames.OUTGOING_UNDERCUT + \"Exit\"]: (request, response) => {\n        htmlResponse.html += \"</div>\";\n      },\n      [RuleNames.CONTRADICTION + \"Entry\"]: (request, response, node) => {\n        htmlResponse.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line contradiction relation\"><div class=\"contradiction relation-symbol\"><span>&gt;&lt;</span></div>`;\n      },\n      [RuleNames.CONTRADICTION + \"Exit\"]: (request, response) => {\n        htmlResponse.html += \"</div>\";\n      },\n      [RuleNames.RELATIONS + \"Entry\"]: (request, response) => {\n        htmlResponse.html += `<div class=\"relations\">`;\n      },\n      [RuleNames.RELATIONS + \"Exit\"]: (request, response) => {\n        htmlResponse.html += \"</div>\";\n      },\n      [RuleNames.ORDERED_LIST + \"Entry\"]: (request, response) => (htmlResponse.html += \"<ol>\"),\n      [RuleNames.ORDERED_LIST + \"Exit\"]: (request, response) => (htmlResponse.html += \"</ol>\"),\n      [RuleNames.UNORDERED_LIST + \"Entry\"]: (request, response) => (htmlResponse.html += \"<ul>\"),\n      [RuleNames.UNORDERED_LIST + \"Exit\"]: (request, response) => (htmlResponse.html += \"</ul>\"),\n      [RuleNames.ORDERED_LIST_ITEM + \"Entry\"]: (request, response, node) =>\n        (htmlResponse.html += `<li data-line=\"${node.startLine}\" class=\"has-line\">`),\n      [RuleNames.ORDERED_LIST_ITEM + \"Exit\"]: (request, response) => (htmlResponse.html += \"</li>\"),\n      [RuleNames.UNORDERED_LIST_ITEM + \"Entry\"]: (request, response, node) =>\n        (htmlResponse.html += `<li data-line=\"${node.startLine}\" class=\"has-line\">`),\n      [RuleNames.UNORDERED_LIST_ITEM + \"Exit\"]: (request, response) => (htmlResponse.html += \"</li>\"),\n      [RuleNames.HEADING + \"Entry\"]: (request, response, node) => {\n        let settings = $.getSettings(request);\n        if (node.level === 1) {\n          if (settings.title == \"Argdown Document\") {\n            htmlResponse.html = htmlResponse.html!.replace(\n              \"<title>Argdown Document</title>\",\n              \"<title>\" + _.escape(node.text) + \"</title>\"\n            );\n          }\n        }\n        let htmlId = utils.getHtmlId(\"heading\", node.text!, htmlResponse.htmlIds!);\n        htmlResponse.htmlIds![htmlId] = true;\n        htmlResponse.html += `<h${node.level} data-line=\"${node.startLine}\" id=\"${htmlId}\" class=\"has-line heading\">`;\n      },\n      [RuleNames.HEADING + \"Exit\"]: (request, response, node) =>\n        (htmlResponse.html += \"</h\" + (<IRuleNode>node).level + \">\"),\n      freestyleTextEntry: (request, response, node, parentNode) => {\n        if (parentNode && parentNode.name != \"inferenceRules\") {\n          htmlResponse.html += _.escape(node.text);\n        }\n      },\n      [RuleNames.BOLD + \"Entry\"]: (request, response) => (htmlResponse.html += \"<b>\"),\n      boldExit: (request, response, node) => (htmlResponse.html += \"</b>\" + node.trailingWhitespace),\n      italicEntry: (request, response) => (htmlResponse.html += \"<i>\"),\n      italicExit: (request, response, node) => (htmlResponse.html += \"</i>\" + node.trailingWhitespace),\n      pcsEntry: (request, response, node) => {\n        let classes = \"argument pcs\";\n        if (node.argument!.sortedTags) {\n          classes += \" \" + $.getCssClassesFromTags(response, node.argument!.sortedTags!);\n        }\n        htmlResponse.html += `<div class=\"${classes}\">`;\n      },\n      [RuleNames.PCS + \"Exit\"]: (request, response) => (htmlResponse.html += \"</div>\"),\n      argumentStatementEntry: (request, response, node) => {\n        const statement = node.statement;\n        if (statement && isConclusion(statement) && statement.inference) {\n          let inference = statement.inference;\n          if (!inference.inferenceRules || inference.inferenceRules.length == 0) {\n            htmlResponse.html += `<div data-line=\"${inference.startLine}\" class=\"has-line inference\">`;\n          } else {\n            htmlResponse.html += `<div data-line=\"${inference.startLine}\" class=\"has-line inference with-data\">`;\n          }\n\n          htmlResponse.html += `<span class=\"inference-rules\">`;\n          if (inference.inferenceRules && inference.inferenceRules.length > 0) {\n            let i = 0;\n            for (let inferenceRule of inference.inferenceRules) {\n              if (i > 0) htmlResponse.html += \", \";\n              htmlResponse.html += `<span class=\"inference-rule\">${inferenceRule}</span>`;\n              i++;\n            }\n            htmlResponse.html += \"</span> \";\n          }\n          htmlResponse.html += \"</div>\";\n        }\n        htmlResponse.html += `<div data-line=\"${node.startLine}\" class=\"has-line ${\n          node.statement!.role\n        } argument-statement\"><div class=\"statement-nr\">(<span>${node.statementNr}</span>)</div>`;\n      },\n      [RuleNames.ARGUMENT_STATEMENT + \"Exit\"]: (request, response) => (htmlResponse.html += \"</div>\")\n    };\n  }\n  getCssClassesFromTags(response: IArgdownResponse, tags: string[]): string {\n    let classes = \"\";\n    if (!tags || !response.tagsDictionary) {\n      return classes;\n    }\n    let index = 0;\n    for (let tag of tags) {\n      if (index > 0) {\n        classes += \" \";\n      }\n      index++;\n      const tagData = response.tagsDictionary[tag];\n      classes += tagData.cssClass;\n    }\n    return classes;\n  }\n}\n"],"file":"HtmlExportPlugin.js"}