{"version":3,"sources":["../../src/plugins/JSONExportPlugin.ts"],"names":["defaultSettings","spaces","removeEmbeddedRelations","exportMap","exportSections","exportTags","exportMetaData","JSONExportPlugin","config","_","defaultsDeep","getSettings","request","defaults","response","logger","statements","ArgdownPluginError","name","arguments","relations","argdown","settings","mapResponse","map","nodes","edges","sections","tags","tagsDictionary","json","key","value","undefined","type","ArgdownTypes","ARGUMENT","types","EQUIVALENCE_CLASS","r"],"mappings":";;;;;;;;;AAAA;;AAGA;;AACA;;AAEA;;;;;;;;;;;;AAwCA,IAAMA,kBAAiC;AACrCC,UAAQ,CAD6B;AAErCC,2BAAyB,KAFY;AAGrCC,aAAW,IAH0B;AAIrCC,kBAAgB,IAJqB;AAKrCC,cAAY,IALyB;AAMrCC,kBAAgB;AANqB,CAAvC;AAQA;;;;;;;;;;IASaC,gB;;;AAGX,4BAAYC,MAAZ,EAAoC;AAAA;;AAAA;;AAAA,kCAF7B,kBAE6B;;AAAA;;AAAA,qCAYT,mBAAW;AACpCC,QAAEC,YAAF,CAAe,MAAKC,WAAL,CAAiBC,OAAjB,CAAf,EAA0C,MAAKC,QAA/C;AACD,KAdmC;;AAAA,iCAeb,UAACD,OAAD,EAAUE,QAAV,EAAoBC,MAApB,EAA+B;AACpD,UAAI,CAACD,SAASE,UAAd,EAA0B;AACxB,cAAM,IAAIC,sCAAJ,CAAuB,MAAKC,IAA5B,EAAkC,kCAAlC,CAAN;AACD;;AACD,UAAI,CAACJ,SAASK,SAAd,EAAyB;AACvB,cAAM,IAAIF,sCAAJ,CAAuB,MAAKC,IAA5B,EAAkC,iCAAlC,CAAN;AACD;;AACD,UAAI,CAACJ,SAASM,SAAd,EAAyB;AACvB,cAAM,IAAIH,sCAAJ,CAAuB,MAAKC,IAA5B,EAAkC,iCAAlC,CAAN;AACD;;AACD,UAAMG,UAAe;AACnBF,mBAAWL,SAASK,SADD;AAEnBH,oBAAYF,SAASE,UAFF;AAGnBI,mBAAWN,SAASM;AAHD,OAArB;;AAKA,UAAME,WAAW,MAAKX,WAAL,CAAiBC,OAAjB,CAAjB;;AACA,UAAMW,cAAcT,QAApB;;AACA,UAAIQ,SAASnB,SAAT,IAAsBoB,YAAYC,GAAlC,IAAyCD,YAAYC,GAAZ,CAAgBC,KAAzD,IAAkEF,YAAYC,GAAZ,CAAgBE,KAAtF,EAA6F;AAC3FL,gBAAQG,GAAR,GAAc;AACZC,iBAAOF,YAAYC,GAAZ,CAAgBC,KADX;AAEZC,iBAAOH,YAAYC,GAAZ,CAAgBE;AAFX,SAAd;AAID;;AACD,UAAIJ,SAASlB,cAAT,IAA2BU,SAASa,QAAxC,EAAkD;AAChDN,gBAAQM,QAAR,GAAmBb,SAASa,QAA5B;AACD;;AACD,UAAIL,SAASjB,UAAT,IAAuBS,SAASc,IAAhC,IAAwCd,SAASe,cAArD,EAAqE;AACnER,gBAAQO,IAAR,GAAed,SAASc,IAAxB;AACAP,gBAAQQ,cAAR,GAAyBf,SAASe,cAAlC;AACD;;AACef,cAAhB,CAA0BgB,IAA1B,GAAiC,oBAC/BT,OAD+B,EAE/B,UAAoBU,GAApB,EAAyBC,KAAzB,EAAgC;AAC9B,YAAI,CAACV,SAAShB,cAAV,IAA4ByB,QAAQ,UAAxC,EAAoD;AAClD,iBAAOE,SAAP;AACD;;AACD,YACEX,SAASpB,uBAAT,IACA6B,QAAQ,WADR,IAEA,KAAKG,IAFL,KAGC,KAAKA,IAAL,KAAcC,oBAAaC,QAA3B,IAAuC,KAAKC,KAAL,KAAeF,oBAAaG,iBAHpE,CADF,EAKE;AACA,iBAAOL,SAAP;AACD;;AAED,YACE,CAACX,SAASlB,cAAV,IACA2B,QAAQ,SADR,IAEA,KAAKG,IAFL,KAGC,KAAKA,IAAL,KAAcC,oBAAaC,QAA3B,IAAuC,KAAKC,KAAL,KAAeF,oBAAaG,iBAHpE,CADF,EAKE;AACA,iBAAOL,SAAP;AACD;;AAED,eAAOD,KAAP;AACD,OAzB8B,EA0B/BV,SAASrB,MA1BsB,CAAjC;AA4BA,aAAOa,QAAP;AACD,KA1EmC;;AAClC,SAAKD,QAAL,GAAgBJ,EAAEC,YAAF,CAAe,EAAf,EAAmBF,MAAnB,EAA2BR,eAA3B,CAAhB;AACD;;;;gCACWY,O,EAA0B;AACpC,UAAM2B,IAAI3B,OAAV;;AACA,UAAI2B,EAAET,IAAN,EAAY;AACV,eAAOS,EAAET,IAAT;AACD,OAFD,MAEO;AACLS,UAAET,IAAF,GAAS,EAAT;AACA,eAAOS,EAAET,IAAT;AACD;AACF","sourcesContent":["import * as _ from \"lodash\";\nimport { IArgdownPlugin, IRequestHandler } from \"../IArgdownPlugin\";\nimport { IArgdownRequest } from \"../IArgdownRequest\";\nimport { ArgdownPluginError } from \"../ArgdownPluginError\";\nimport { toJSON } from \"../model/toJSON\";\nimport { ArgdownTreeWalker } from \"../ArgdownTreeWalker\";\nimport { ArgdownTypes } from \"../model/model\";\n\n/**\n * Settings used by the JSONExportPlugin\n */\nexport interface IJSONSettings {\n  spaces?: number;\n  /**\n   * Should [[Argument.relations]], [[Statement.relations]] be removed from the JSON objects?\n   */\n  removeEmbeddedRelations?: boolean;\n  /**\n   * Should the JSON data include the response.map property?\n   */\n  exportMap?: boolean;\n  /**\n   * Should the JSON data include sections?\n   */\n  exportSections?: boolean;\n  /**\n   * Should the JSON data include tag data?\n   */\n  exportTags?: boolean;\n  /**\n   * Should the JSON data include metaData?\n   */\n  exportMetaData?: boolean;\n}\n/**\n * Request configuration data used by the JSONExportPlugin\n */\nexport interface IJSONRequest {\n  json?: IJSONSettings;\n}\n/**\n * Response data added by the JSONExportPlugin\n */\nexport interface IJSONResponse {\n  json?: string;\n}\nconst defaultSettings: IJSONSettings = {\n  spaces: 2,\n  removeEmbeddedRelations: false,\n  exportMap: true,\n  exportSections: true,\n  exportTags: true,\n  exportMetaData: true\n};\n/**\n * Exports data in the response object to JSON.\n * The result ist stored in the [[IJSONResponse.json]] response object property.\n *\n * Note: The [[IArgdownResponse.ast]] object is not exported to JSON.\n *\n * Depends on data from: [[ModelPlugin]]\n * Can use data from: [[TagPlugin]], [[MetaDataPlugin]], [[MapPlugin]]\n */\nexport class JSONExportPlugin implements IArgdownPlugin {\n  name = \"JSONExportPlugin\";\n  defaults: IJSONSettings;\n  constructor(config?: IJSONSettings) {\n    this.defaults = _.defaultsDeep({}, config, defaultSettings);\n  }\n  getSettings(request: IArgdownRequest) {\n    const r = request as IJSONRequest;\n    if (r.json) {\n      return r.json;\n    } else {\n      r.json = {};\n      return r.json;\n    }\n  }\n  prepare: IRequestHandler = request => {\n    _.defaultsDeep(this.getSettings(request), this.defaults);\n  };\n  run: IRequestHandler = (request, response, logger) => {\n    if (!response.statements) {\n      throw new ArgdownPluginError(this.name, \"No statements field in response.\");\n    }\n    if (!response.arguments) {\n      throw new ArgdownPluginError(this.name, \"No arguments field in response.\");\n    }\n    if (!response.relations) {\n      throw new ArgdownPluginError(this.name, \"No relations field in response.\");\n    }\n    const argdown: any = {\n      arguments: response.arguments,\n      statements: response.statements,\n      relations: response.relations\n    };\n    const settings = this.getSettings(request);\n    const mapResponse = response as { map?: { nodes?: any[]; edges?: any[] } };\n    if (settings.exportMap && mapResponse.map && mapResponse.map.nodes && mapResponse.map.edges) {\n      argdown.map = {\n        nodes: mapResponse.map.nodes,\n        edges: mapResponse.map.edges\n      };\n    }\n    if (settings.exportSections && response.sections) {\n      argdown.sections = response.sections;\n    }\n    if (settings.exportTags && response.tags && response.tagsDictionary) {\n      argdown.tags = response.tags;\n      argdown.tagsDictionary = response.tagsDictionary;\n    }\n    (<IJSONResponse>response).json = toJSON(\n      argdown,\n      function(this: any, key, value) {\n        if (!settings.exportMetaData && key === \"metaData\") {\n          return undefined;\n        }\n        if (\n          settings.removeEmbeddedRelations &&\n          key === \"relations\" &&\n          this.type &&\n          (this.type === ArgdownTypes.ARGUMENT || this.types === ArgdownTypes.EQUIVALENCE_CLASS)\n        ) {\n          return undefined;\n        }\n\n        if (\n          !settings.exportSections &&\n          key === \"section\" &&\n          this.type &&\n          (this.type === ArgdownTypes.ARGUMENT || this.types === ArgdownTypes.EQUIVALENCE_CLASS)\n        ) {\n          return undefined;\n        }\n\n        return value;\n      },\n      settings.spaces\n    );\n    return response;\n  };\n}\n"],"file":"JSONExportPlugin.js"}