{"version":3,"sources":["../../src/plugins/TagPlugin.ts"],"names":["defaultSettings","colorScheme","TagPlugin","config","settings","getSettings","request","_","defaultsDeep","defaults","r","tagColorScheme","tags","response","logger","ArgdownPluginError","name","statements","arguments","tagsDictionary","selectedTags","tagData","tag","push","tagRequest","tagConfig","find","clone","index","indexOf","cssClass","utils","stringToClassName","color","length","Object","keys","title","equivalenceClass","sortedTags","sortTags","argument","tagPlugin","filtered","filter","sorted","sortBy"],"mappings":"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","sourcesContent":["import * as _ from \"lodash\";\nimport * as utils from \"../utils\";\nimport { IArgdownPlugin, IRequestHandler } from \"../IArgdownPlugin\";\nimport { IArgdownRequest } from \"../IArgdownRequest\";\nimport { ITagData, IArgdownResponse } from \"../IArgdownResponse\";\nimport { ArgdownPluginError } from \"../ArgdownPluginError\";\n\nexport interface ITagPluginSettings {\n  colorScheme?: string[];\n  tags?: ITagData[];\n}\nexport interface ITagPluginRequest {\n  tagPlugin?: ITagPluginSettings;\n  tagColorScheme?: string[];\n  tags?: ITagData[];\n}\nconst defaultSettings: ITagPluginSettings = {\n  colorScheme: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\", \"#e6ab02\", \"#a6761d\", \"#666666\"]\n};\nexport class TagPlugin implements IArgdownPlugin {\n  name = \"TagPlugin\";\n  defaults: ITagPluginSettings;\n  constructor(config?: ITagPluginSettings) {\n    this.defaults = _.defaultsDeep({}, config, defaultSettings);\n  }\n  getSettings(request: IArgdownRequest): ITagPluginSettings {\n    const r = request as ITagPluginRequest;\n    if (!r.tagPlugin) {\n      r.tagPlugin = {};\n    }\n    return r.tagPlugin;\n  }\n  prepare: IRequestHandler = request => {\n    const settings = this.getSettings(request);\n    _.defaultsDeep(settings, this.defaults);\n    const r = request as ITagPluginRequest;\n    if (r.tagColorScheme) {\n      settings.colorScheme = r.tagColorScheme;\n    }\n    if (r.tags) {\n      settings.tags = r.tags;\n    }\n  };\n  run: IRequestHandler = (request, response, logger) => {\n    if (!response.tags) {\n      throw new ArgdownPluginError(this.name, \"Missing tags field in response.\");\n    }\n    if (!response.statements) {\n      throw new ArgdownPluginError(this.name, \"Missing statements field in response.\");\n    }\n    if (!response.arguments) {\n      throw new ArgdownPluginError(this.name, \"Missing arguments field in response.\");\n    }\n    response.tagsDictionary = {};\n\n    let selectedTags: string[] = response.tags;\n    const settings = this.getSettings(request);\n    if (settings.tags) {\n      selectedTags = [];\n      for (let tagData of settings.tags) {\n        if (tagData.tag) {\n          selectedTags.push(tagData.tag);\n        }\n      }\n    }\n    const tagRequest = request as ITagPluginRequest;\n    for (let tag of response.tags) {\n      let tagData = null;\n      if (settings.tags && tagRequest.tags) {\n        let tagConfig = _.find(tagRequest.tags, { tag: tag });\n        tagData = _.clone(tagConfig);\n      }\n      if (!tagData) {\n        tagData = { tag: tag };\n      }\n      response.tagsDictionary[tag] = tagData;\n      let index = selectedTags.indexOf(tag);\n      tagData.cssClass = utils.stringToClassName(\"tag-\" + tag);\n      if (index > -1) {\n        if (!tagData.color && index < settings.colorScheme!.length) {\n          tagData.color = settings.colorScheme![index];\n        }\n        tagData.cssClass += \" tag\" + index;\n        tagData.index = index;\n      }\n    }\n    for (let title of Object.keys(response.statements)) {\n      let equivalenceClass = response.statements[title];\n      if (equivalenceClass.tags) {\n        equivalenceClass.sortedTags = this.sortTags(equivalenceClass.tags, response);\n      }\n    }\n    for (let title of Object.keys(response.arguments)) {\n      let argument = response.arguments[title];\n      if (argument.tags) {\n        argument.sortedTags = this.sortTags(argument.tags, response);\n      }\n    }\n  };\n  sortTags(tags: string[], response: IArgdownResponse): string[] {\n    const filtered = _.filter(tags, function(tag) {\n      return response.tagsDictionary![tag].index != null;\n    });\n    const sorted = _.sortBy(filtered, function(tag) {\n      return response.tagsDictionary![tag].index;\n    });\n    return sorted;\n  }\n}\n"],"file":"TagPlugin.js"}