{"version":3,"sources":["../../src/ArgdownParser.js"],"names":["ArgdownParser","input","lexer","tokens","$","argdown","RULE","OPTION1","CONSUME1","Emptyline","atLeastOne","AT_LEAST_ONE_SEP","SEP","DEF","OR","ALT","SUBRULE","heading","statement","argument","argumentDefinition","argumentReference","orderedList","unorderedList","name","children","values","push","CONSUME","HeadingStart","AT_LEAST_ONE","statementContent","argumentStatement","argumentBody","MANY","SUBRULE2","inference","SUBRULE1","ArgumentStatementStart","InferenceStart","inferenceRules","OPTION2","metadata","InferenceEnd","AT_LEAST_ONE_SEP1","ListDelimiter","freestyleText","MetadataStart","MetadataStatementEnd","metadataStatement","MetadataEnd","Colon","list","Indent","orderedListItem","Dedent","unorderedListItem","UnorderedListItem","OrderedListItem","ArgumentReference","OPTION","relations","argumentDescription","ArgumentDefinition","StatementReference","StatementDefinition","incomingSupport","incomingAttack","outgoingSupport","outgoingAttack","contradiction","concat","IncomingSupport","IncomingAttack","OutgoingSupport","OutgoingAttack","Contradiction","bold","UnderscoreBoldStart","UnderscoreBoldEnd","AsteriskBoldStart","AsteriskBoldEnd","italic","UnderscoreItalicStart","SUBRULE3","UnderscoreItalicEnd","AsteriskItalicStart","SUBRULE4","AsteriskItalicEnd","Link","Tag","ArgumentMention","StatementMention","Freestyle","UnusedControlChar","performSelfAnalysis","value","logAstRecursively","JSON","stringify","pre","str","undefined","tokenType","tokenName","length","nextPre","child","Parser","module","exports"],"mappings":"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","file":"ArgdownParser.js","sourcesContent":["'use strict';\n\nimport chevrotain, {\n    Parser,\n    getTokenConstructor\n} from 'chevrotain';\nimport {ArgdownLexer} from './ArgdownLexer.js';\n\nclass ArgdownParser extends chevrotain.Parser {\n\n    constructor(input, lexer) {\n        super(input, lexer.tokens);\n        let $ = this;\n        $.lexer = lexer;        \n\n        $.argdown = $.RULE(\"argdown\", () => {\n            $.OPTION1(() => {\n                $.CONSUME1(lexer.Emptyline);\n            });        \n            let atLeastOne = $.AT_LEAST_ONE_SEP({\n                SEP: lexer.Emptyline,\n                DEF: () => $.OR([{\n                    ALT: () => $.SUBRULE($.heading)\n                }, {\n                    ALT: () => $.SUBRULE($.statement)\n                },  {\n                    ALT: () => $.SUBRULE($.argument)\n                },  {\n                    ALT: () => $.SUBRULE($.argumentDefinition)\n                },  {\n                    ALT: () => $.SUBRULE($.argumentReference)\n                }, {\n                    ALT: () => $.SUBRULE($.orderedList)\n                }, {\n                    ALT: () => $.SUBRULE($.unorderedList)\n                }])\n            });            \n                   \n            return {\n                name: 'argdown',\n                children: atLeastOne.values\n            };\n        });\n\n        $.heading = $.RULE(\"heading\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.HeadingStart));\n            $.AT_LEAST_ONE({\n              DEF:()=>children.push($.SUBRULE($.statementContent))\n            });\n\n            return {\n                name: \"heading\",\n                children: children\n            };\n        });\n        $.argument = $.RULE(\"argument\", () => {\n            let children = [];\n            children.push($.SUBRULE($.argumentStatement));                        \n            $.AT_LEAST_ONE({\n              DEF:()=>{\n                children.push($.SUBRULE($.argumentBody));\n              }\n            });\n            return {\n                name: \"argument\",\n                children: children\n            };\n        });\n        $.argumentBody = $.RULE(\"argumentBody\",() =>{\n          let children = [];\n          $.MANY({\n            DEF:()=>{\n              children.push($.SUBRULE2($.argumentStatement));\n            }\n          });\n          children.push($.SUBRULE($.inference));          \n          children.push($.SUBRULE1($.argumentStatement));\n          return {\n              name: \"argumentBody\",\n              children: children\n          };        \n        });\n        $.argumentStatement = $.RULE(\"argumentStatement\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.ArgumentStatementStart));\n            children.push($.SUBRULE($.statement));\n            return {\n                name: \"argumentStatement\",\n                children: children\n            };\n        });\n        $.inference = $.RULE(\"inference\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.InferenceStart));\n            $.OPTION1(() => {\n                children.push($.SUBRULE($.inferenceRules));\n            });\n            $.OPTION2(() => {\n                children.push($.SUBRULE($.metadata));\n            });\n            children.push($.CONSUME(lexer.InferenceEnd));\n            return {\n                name: \"inference\",\n                children: children\n            };\n        });\n        $.inferenceRules = $.RULE(\"inferenceRules\", () => {\n            let children = [];\n            $.AT_LEAST_ONE_SEP1({\n                SEP: lexer.ListDelimiter,\n                DEF: () => children.push($.SUBRULE($.freestyleText))\n            });\n            return {\n                name: \"inferenceRules\",\n                children: children\n            };\n        });\n        $.metadata = $.RULE(\"metadata\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.MetadataStart));\n            $.AT_LEAST_ONE_SEP({\n                SEP: lexer.MetadataStatementEnd,\n                DEF: () => children.push($.SUBRULE($.metadataStatement))\n            });\n            children.push($.CONSUME(lexer.MetadataEnd));\n            return {\n                name: \"metadata\",\n                children: children\n            };\n        });\n        $.metadataStatement = $.RULE(\"metadataStatement\", () => {\n            let children = [];\n            children.push($.SUBRULE1($.freestyleText));\n            $.CONSUME(lexer.Colon);\n            $.AT_LEAST_ONE_SEP({\n                SEP: lexer.ListDelimiter,\n                DEF: () => children.push($.SUBRULE2($.freestyleText))\n            });\n            return {\n                name: \"metadataStatement\",\n                children: children\n            };\n        });\n\n        $.list = $.RULE(\"orderedList\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.Indent));\n            $.AT_LEAST_ONE(() => children.push($.SUBRULE($.orderedListItem)));\n            children.push($.CONSUME(lexer.Dedent));\n            return {\n                name: 'orderedList',\n                children: children\n            };\n        });\n        $.list = $.RULE(\"unorderedList\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.Indent));\n            $.AT_LEAST_ONE(() => children.push($.SUBRULE($.unorderedListItem)));\n            children.push($.CONSUME(lexer.Dedent));\n            return {\n                name: 'unorderedList',\n                children: children\n            };\n        });\n\n        $.unorderedListItem = $.RULE(\"unorderedListItem\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.UnorderedListItem));\n            children.push($.SUBRULE($.statement));\n            return {\n                name: \"unorderedListItem\",\n                children: children\n            };\n        });\n        $.orderedListItem = $.RULE(\"orderedListItem\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.OrderedListItem));\n            children.push($.SUBRULE($.statement));\n            return {\n                name: \"orderedListItem\",\n                children: children\n            };\n        });\n\n        $.argumentReference = $.RULE(\"argumentReference\", ()=>{\n          let children = [];\n          children.push($.CONSUME(lexer.ArgumentReference));\n          $.OPTION(() => {\n              children.push($.SUBRULE($.relations))\n          });\n          return {\n              name: 'argumentReference',\n              children: children\n          };\n        });\n\n        $.argumentDescription = $.RULE(\"argumentDefinition\", () =>{\n          let children = [];\n          children.push($.CONSUME(lexer.ArgumentDefinition));\n          children.push($.SUBRULE2($.statementContent));\n          $.OPTION1(() => {\n              children.push($.SUBRULE($.relations))\n          });\n          return {\n              name: 'argumentDefinition',\n              children: children\n          };\n        });\n\n        $.statement = $.RULE(\"statement\", () => {\n            let children = [];\n            children[0] = $.OR([{\n                ALT: () => $.SUBRULE1($.statementContent)\n            }, {\n                ALT: () => $.CONSUME(lexer.StatementReference)\n            }, {\n                ALT: () => {\n                    let children = [];\n                    children.push($.CONSUME(lexer.StatementDefinition));\n                    children.push($.SUBRULE2($.statementContent));\n                    return {\n                        name: \"statementDefinition\",\n                        children: children\n                    };\n                }\n              }]);\n            $.OPTION(() => {\n                children.push($.SUBRULE($.relations))\n            });\n            return {\n                name: 'statement',\n                children: children\n            };\n        });\n\n        $.relations = $.RULE(\"relations\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.Indent));\n            let atLeastOne = $.AT_LEAST_ONE(() => $.OR([{\n                ALT: () => $.SUBRULE($.incomingSupport)\n            }, {\n                ALT: () => $.SUBRULE($.incomingAttack)\n            }, {\n                ALT: () => $.SUBRULE($.outgoingSupport)\n            }, {\n                ALT: () => $.SUBRULE($.outgoingAttack)\n            },{\n                ALT: () => $.SUBRULE($.contradiction)\n            }]));\n            children = children.concat(atLeastOne);\n            children.push($.CONSUME(lexer.Dedent));\n            return {\n                name: 'relations',\n                children: children\n            };\n        });\n\n        $.incomingSupport = $.RULE(\"incomingSupport\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.IncomingSupport));\n            $.OR({\n              DEF : [\n                {ALT: ()=> children.push($.SUBRULE($.statement))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentDefinition))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentReference))}\n              ]\n            });\n\n            return {\n                name: 'incomingSupport',\n                children: children\n            };\n        });\n        $.incomingAttack = $.RULE(\"incomingAttack\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.IncomingAttack));\n            $.OR({\n              DEF : [\n                {ALT: ()=> children.push($.SUBRULE($.statement))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentDefinition))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentReference))}\n              ]\n            });\n            return {\n                name: 'incomingAttack',\n                children: children\n            };\n        });\n        $.outgoingSupport = $.RULE(\"outgoingSupport\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.OutgoingSupport));\n            $.OR({\n              DEF : [\n                {ALT: ()=> children.push($.SUBRULE($.statement))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentDefinition))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentReference))}\n              ]\n            });\n            return {\n                name: 'outgoingSupport',\n                children: children\n            };\n        });\n        $.outgoingAttack = $.RULE(\"outgoingAttack\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.OutgoingAttack));\n            $.OR({\n              DEF : [\n                {ALT: ()=> children.push($.SUBRULE($.statement))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentDefinition))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentReference))}\n              ]\n            });\n            return {\n                name: 'outgoingAttack',\n                children: children\n            };\n        });\n        $.contradiction = $.RULE(\"contradiction\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.Contradiction));\n            children.push($.SUBRULE($.statement));\n            return {\n                name: 'contradiction',\n                children: children\n            };\n        });\n\n        $.bold = $.RULE(\"bold\",()=>{\n          let children = [];\n          $.OR([{\n              ALT: () => {\n                  children.push($.CONSUME(lexer.UnderscoreBoldStart));\n                  children.push($.SUBRULE1($.statementContent));\n                  children.push($.CONSUME(lexer.UnderscoreBoldEnd));\n              }\n          }, {\n              ALT: () => {\n                  children.push($.CONSUME(lexer.AsteriskBoldStart));\n                  children.push($.SUBRULE2($.statementContent));\n                  children.push($.CONSUME(lexer.AsteriskBoldEnd));\n              }\n          }]);\n          return {name:'bold', children:children};\n        });\n        $.italic = $.RULE(\"italic\",()=>{\n          let children = [];\n          $.OR([{\n              ALT: () => {\n                  children.push($.CONSUME(lexer.UnderscoreItalicStart));\n                  children.push($.SUBRULE3($.statementContent));\n                  children.push($.CONSUME(lexer.UnderscoreItalicEnd));\n              }\n          }, {\n              ALT: () => {\n                  children.push($.CONSUME(lexer.AsteriskItalicStart));\n                  children.push($.SUBRULE4($.statementContent));\n                  children.push($.CONSUME(lexer.AsteriskItalicEnd));\n              }\n          }]);\n          return {name:'italic', children:children};\n        });\n        $.statementContent = $.RULE(\"statementContent\", () => {\n            let children = [];\n            $.AT_LEAST_ONE(() => $.OR([{\n                ALT: () => children.push($.SUBRULE($.freestyleText))\n            }, {\n                ALT: () => children.push($.CONSUME(lexer.Link))\n            }, {\n                ALT: () => children.push($.SUBRULE($.bold))\n            }, {\n                ALT: () => children.push($.SUBRULE($.italic))\n            }, {\n                ALT: () => children.push($.CONSUME(lexer.Tag))\n            }, {\n                ALT: () => children.push($.CONSUME(lexer.ArgumentMention))\n            }, {\n                ALT: () => children.push($.CONSUME(lexer.StatementMention))\n            }]));\n            return {\n                name: 'statementContent',\n                children: children\n            };\n        });\n\n        $.freestyleText = $.RULE(\"freestyleText\", () => {\n            let children = [];\n            $.AT_LEAST_ONE(() => $.OR([{\n                ALT: () => children.push($.CONSUME(lexer.Freestyle))\n            }, {\n                ALT: () => children.push($.CONSUME(lexer.UnusedControlChar))\n            }]));\n            return {\n                name: \"freestyleText\",\n                children: children\n            };\n        });\n        // very important to call this after all the rules have been defined.\n        // otherwise the parser may not work correctly as it will lack information\n        // derived during the self analysis phase.\n        Parser.performSelfAnalysis(this);\n    }\n\n    astToString(value) {\n        return this.logAstRecursively(value, \"\", \"\");\n    }\n    astToJsonString(value) {\n        return JSON.stringify(value, null, 2);\n    }\n    logAstRecursively(value, pre, str) {\n        if (value === undefined) {\n            str += \"undefined\";\n            return str;\n        } else if (value.tokenType) {\n            str += getTokenConstructor(value).tokenName;\n            return str;\n        }\n        str += value.name;\n        if (value.children && value.children.length > 0) {\n            let nextPre = pre + \" |\";\n            for (let child of value.children) {\n                str += \"\\n\" + nextPre + \"__\";\n                str = this.logAstRecursively(child, nextPre, str);\n            }\n            str += \"\\n\" + pre;\n        }\n        return str;\n    }\n\n}\n\nmodule.exports = {\n    ArgdownParser: new ArgdownParser(null, ArgdownLexer)\n}\n"]}