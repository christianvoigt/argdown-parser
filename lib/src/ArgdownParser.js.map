{"version":3,"sources":["../../src/ArgdownParser.js"],"names":["ArgdownParser","input","lexer","tokens","errorMessageProvider","recoveryEnabled","$","argdown","RULE","OPTION1","CONSUME1","Emptyline","atLeastOne","AT_LEAST_ONE_SEP","SEP","DEF","OR","c1","ALT","SUBRULE","heading","statement","argument","argumentDefinition","argumentReference","orderedList","unorderedList","name","children","values","push","CONSUME","HeadingStart","AT_LEAST_ONE","statementContent","startLine","argumentStatement","argumentBody","MANY","SUBRULE2","inference","SUBRULE1","StatementNumber","InferenceStart","inferenceRules","OPTION2","metadata","InferenceEnd","AT_LEAST_ONE_SEP1","ListDelimiter","freestyleText","MetadataStart","MetadataStatementEnd","metadataStatement","MetadataEnd","Colon","Indent","orderedListItem","Dedent","unorderedListItem","UnorderedListItem","OrderedListItem","ArgumentReference","OPTION","argumentRelations","ArgumentDefinition","StatementReference","StatementDefinition","SUBRULE3","statementRelations","c2","incomingSupport","incomingAttack","outgoingSupport","outgoingAttack","contradiction","incomingUndercut","concat","c3","outgoingUndercut","IncomingSupport","IncomingAttack","IncomingUndercut","OutgoingUndercut","OutgoingSupport","OutgoingAttack","Contradiction","bold","UnderscoreBoldStart","UnderscoreBoldEnd","AsteriskBoldStart","AsteriskBoldEnd","italic","UnderscoreItalicStart","UnderscoreItalicEnd","AsteriskItalicStart","SUBRULE4","AsteriskItalicEnd","c4","Link","Tag","ArgumentMention","StatementMention","Freestyle","UnusedControlChar","EscapedChar","performSelfAnalysis","value","logAstRecursively","JSON","stringify","pre","str","undefined","tokenType","tokenName","length","nextPre","child","Parser","module","exports"],"mappings":"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","file":"ArgdownParser.js","sourcesContent":["'use strict';\n\nimport chevrotain, {\n    Parser\n} from 'chevrotain';\nimport {ArgdownLexer} from './ArgdownLexer.js';\nimport {ArgdownErrorMessageProvider} from './ArgdownErrorMessageProvider.js';\n\nclass ArgdownParser extends chevrotain.Parser {\n\n    constructor(input, lexer) {\n        super(input, lexer.tokens, {\n            errorMessageProvider: ArgdownErrorMessageProvider,\n            recoveryEnabled: true            \n        });\n        let $ = this;\n        $.lexer = lexer;        \n\n        $.argdown = $.RULE(\"argdown\", () => {\n            $.OPTION1(() => {\n                $.CONSUME1(lexer.Emptyline);\n            });        \n            // OR caching. see: http://sap.github.io/chevrotain/docs/FAQ.html#major-performance-benefits\n            let atLeastOne = $.AT_LEAST_ONE_SEP({\n                SEP: lexer.Emptyline,\n                DEF: () => $.OR($.c1 ||\n                    ($.c1 = [{\n                    ALT: () => $.SUBRULE($.heading)\n                }, {\n                    ALT: () => $.SUBRULE($.statement)\n                },  {\n                    ALT: () => $.SUBRULE($.argument)\n                },  {\n                    ALT: () => $.SUBRULE($.argumentDefinition)\n                },  {\n                    ALT: () => $.SUBRULE($.argumentReference)\n                }, {\n                    ALT: () => $.SUBRULE($.orderedList)\n                }, {\n                    ALT: () => $.SUBRULE($.unorderedList)\n                }]))\n            });            \n                   \n            return {\n                name: 'argdown',\n                children: atLeastOne.values\n            };\n        });\n\n        $.heading = $.RULE(\"heading\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.HeadingStart));\n            $.AT_LEAST_ONE({\n              DEF:()=>children.push($.SUBRULE($.statementContent))\n            });\n\n            return {\n                name: \"heading\",\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        $.argument = $.RULE(\"argument\", () => {\n            let children = [];\n            children.push($.SUBRULE($.argumentStatement));                        \n            $.AT_LEAST_ONE({\n              DEF:()=>{\n                children.push($.SUBRULE($.argumentBody));\n              }\n            });\n            return {\n                name: \"argument\",\n                children: children\n            };\n        });\n        $.argumentBody = $.RULE(\"argumentBody\",() =>{\n          let children = [];\n          $.MANY({\n            DEF:()=>{\n              children.push($.SUBRULE2($.argumentStatement));\n            }\n          });\n          children.push($.SUBRULE($.inference));          \n          children.push($.SUBRULE1($.argumentStatement));\n          return {\n              name: \"argumentBody\",\n              children: children\n          };        \n        });\n        $.argumentStatement = $.RULE(\"argumentStatement\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.StatementNumber));\n            children.push($.SUBRULE($.statement));\n            return {\n                name: \"argumentStatement\",\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        $.inference = $.RULE(\"inference\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.InferenceStart));\n            $.OPTION1(() => {\n                children.push($.SUBRULE($.inferenceRules));\n            });\n            $.OPTION2(() => {\n                children.push($.SUBRULE($.metadata));\n            });\n            children.push($.CONSUME(lexer.InferenceEnd));\n            return {\n                name: \"inference\",\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        $.inferenceRules = $.RULE(\"inferenceRules\", () => {\n            let children = [];\n            $.AT_LEAST_ONE_SEP1({\n                SEP: lexer.ListDelimiter,\n                DEF: () => children.push($.SUBRULE($.freestyleText))\n            });\n            return {\n                name: \"inferenceRules\",\n                children: children\n            };\n        });\n        $.metadata = $.RULE(\"metadata\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.MetadataStart));\n            $.AT_LEAST_ONE_SEP({\n                SEP: lexer.MetadataStatementEnd,\n                DEF: () => children.push($.SUBRULE($.metadataStatement))\n            });\n            children.push($.CONSUME(lexer.MetadataEnd));\n            return {\n                name: \"metadata\",\n                children: children\n            };\n        });\n        $.metadataStatement = $.RULE(\"metadataStatement\", () => {\n            let children = [];\n            children.push($.SUBRULE1($.freestyleText));\n            $.CONSUME(lexer.Colon);\n            $.AT_LEAST_ONE_SEP({\n                SEP: lexer.ListDelimiter,\n                DEF: () => children.push($.SUBRULE2($.freestyleText))\n            });\n            return {\n                name: \"metadataStatement\",\n                children: children\n            };\n        });\n\n        $.orderedList = $.RULE(\"orderedList\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.Indent));\n            $.AT_LEAST_ONE(() => children.push($.SUBRULE($.orderedListItem)));\n            children.push($.CONSUME(lexer.Dedent));\n            return {\n                name: 'orderedList',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        $.unorderedList = $.RULE(\"unorderedList\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.Indent));\n            $.AT_LEAST_ONE(() => children.push($.SUBRULE($.unorderedListItem)));\n            children.push($.CONSUME(lexer.Dedent));\n            return {\n                name: 'unorderedList',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n\n        $.unorderedListItem = $.RULE(\"unorderedListItem\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.UnorderedListItem));\n            children.push($.SUBRULE($.statement));\n            return {\n                name: \"unorderedListItem\",\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        $.orderedListItem = $.RULE(\"orderedListItem\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.OrderedListItem));\n            children.push($.SUBRULE($.statement));\n            return {\n                name: \"orderedListItem\",\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n\n        $.argumentReference = $.RULE(\"argumentReference\", ()=>{\n          let children = [];\n          children.push($.CONSUME(lexer.ArgumentReference));\n          $.OPTION(() => {\n              children.push($.SUBRULE($.argumentRelations))\n          });\n          return {\n              name: 'argumentReference',\n              startLine: children[0].startLine,\n              children: children\n          };\n        });\n\n        $.argumentDefinition = $.RULE(\"argumentDefinition\", () =>{\n          let children = [];\n          children.push($.CONSUME(lexer.ArgumentDefinition));\n          children.push($.SUBRULE2($.statementContent));\n          $.OPTION1(() => {\n              children.push($.SUBRULE($.argumentRelations))\n          });\n          return {\n              name: 'argumentDefinition',\n              startLine: children[0].startLine,\n              children: children\n          };\n        });\n\n        $.statement = $.RULE(\"statement\", () => {\n            let children = [];\n            children[0] = $.OR([{\n                ALT: () => $.SUBRULE1($.statementContent)\n            }, {\n                ALT: () => $.CONSUME(lexer.StatementReference)\n            }, {\n                ALT: () => {\n                    let children = [];\n                    children.push($.CONSUME(lexer.StatementDefinition));\n                    children.push($.SUBRULE3($.statementContent));\n                    return {\n                        name: \"statementDefinition\",\n                        startLine: children[0].startLine,\n                        children: children\n                    };\n                }}\n                // , {\n                // ALT: () => {\n                //     let children = [];\n                //     children.push($.CONSUME(lexer.StatementReferenceByNumber));\n                //     return {\n                //         name: \"statementReferenceByNumber\",\n                //         children: children\n                //     };\n                // }},{\n                // ALT: () => {\n                //     let children = [];\n                //     children.push($.CONSUME(lexer.StatementDefinitionByNumber));\n                //     children.push($.SUBRULE2($.statementContent));\n                //     return {\n                //         name: \"statementDefinitionByNumber\",\n                //         children: children\n                //     };\n                // }\n              //}\n            ]);\n            $.OPTION(() => {\n                children.push($.SUBRULE($.statementRelations))\n            });\n            return {\n                name: 'statement',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n\n        $.statementRelations = $.RULE(\"statementRelations\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.Indent));\n            // OR caching. see: http://sap.github.io/chevrotain/docs/FAQ.html#major-performance-benefits\n            let atLeastOne = $.AT_LEAST_ONE(() => $.OR($.c2 ||\n                ($.c2 =[{\n                ALT: () => $.SUBRULE($.incomingSupport)\n            }, {\n                ALT: () => $.SUBRULE($.incomingAttack)\n            }, {\n                ALT: () => $.SUBRULE($.outgoingSupport)\n            }, {\n                ALT: () => $.SUBRULE($.outgoingAttack)\n            },{\n                ALT: () => $.SUBRULE($.contradiction)\n            },{\n                ALT: () => $.SUBRULE($.incomingUndercut)\n            }])));\n            children = children.concat(atLeastOne);\n            children.push($.CONSUME(lexer.Dedent));\n            return {\n                name: 'relations',\n                children: children\n            };\n        });\n        $.argumentRelations = $.RULE(\"argumentRelations\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.Indent));\n            // OR caching. see: http://sap.github.io/chevrotain/docs/FAQ.html#major-performance-benefits\n            let atLeastOne = $.AT_LEAST_ONE(() => $.OR($.c3 ||\n                ($.c3 =[{\n                ALT: () => $.SUBRULE($.incomingSupport)\n            }, {\n                ALT: () => $.SUBRULE($.incomingAttack)\n            }, {\n                ALT: () => $.SUBRULE($.outgoingSupport)\n            }, {\n                ALT: () => $.SUBRULE($.outgoingAttack)\n            }, {\n                ALT: () => $.SUBRULE($.incomingUndercut)\n            }, {\n                ALT: () => $.SUBRULE($.outgoingUndercut)\n            }])));\n            children = children.concat(atLeastOne);\n            children.push($.CONSUME(lexer.Dedent));\n            return {\n                name: 'relations',\n                children: children\n            };\n        });\n        $.incomingSupport = $.RULE(\"incomingSupport\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.IncomingSupport));\n            $.OR({\n              DEF : [\n                {ALT: ()=> children.push($.SUBRULE($.statement))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentDefinition))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentReference))}\n              ]\n            });\n\n            return {\n                name: 'incomingSupport',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        $.incomingAttack = $.RULE(\"incomingAttack\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.IncomingAttack));\n            $.OR({\n              DEF : [\n                {ALT: ()=> children.push($.SUBRULE($.statement))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentDefinition))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentReference))}\n              ]\n            });\n            return {\n                name: 'incomingAttack',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        $.incomingUndercut = $.RULE(\"incomingUndercut\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.IncomingUndercut));\n            $.OR({\n                DEF: [\n                    { ALT: () => children.push($.SUBRULE($.argumentDefinition)) },\n                    { ALT: () => children.push($.SUBRULE($.argumentReference)) }\n                ]\n            });\n            return {\n                name: 'incomingUndercut',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        $.outgoingUndercut = $.RULE(\"outgoingUndercut\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.OutgoingUndercut));\n            $.OR({\n                DEF: [\n                    { ALT: () => children.push($.SUBRULE($.statement)) },\n                    { ALT: () => children.push($.SUBRULE($.argumentDefinition)) },\n                    { ALT: () => children.push($.SUBRULE($.argumentReference)) }\n                ]\n            });\n            return {\n                name: 'outgoingUndercut',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n\n        $.outgoingSupport = $.RULE(\"outgoingSupport\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.OutgoingSupport));\n            $.OR({\n              DEF : [\n                {ALT: ()=> children.push($.SUBRULE($.statement))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentDefinition))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentReference))}\n              ]\n            });\n            return {\n                name: 'outgoingSupport',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        $.outgoingAttack = $.RULE(\"outgoingAttack\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.OutgoingAttack));\n            $.OR({\n              DEF : [\n                {ALT: ()=> children.push($.SUBRULE($.statement))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentDefinition))},\n                {ALT: ()=> children.push($.SUBRULE($.argumentReference))}\n              ]\n            });\n            return {\n                name: 'outgoingAttack',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        $.contradiction = $.RULE(\"contradiction\", () => {\n            let children = [];\n            children.push($.CONSUME(lexer.Contradiction));\n            children.push($.SUBRULE($.statement));\n            return {\n                name: 'contradiction',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n\n        $.bold = $.RULE(\"bold\",()=>{\n          let children = [];\n          $.OR([{\n              ALT: () => {\n                  children.push($.CONSUME(lexer.UnderscoreBoldStart));\n                  children.push($.SUBRULE1($.statementContent));\n                  children.push($.CONSUME(lexer.UnderscoreBoldEnd));\n              }\n          }, {\n              ALT: () => {\n                  children.push($.CONSUME(lexer.AsteriskBoldStart));\n                  children.push($.SUBRULE2($.statementContent));\n                  children.push($.CONSUME(lexer.AsteriskBoldEnd));\n              }\n          }]);\n          return {name:'bold', children:children};\n        });\n        $.italic = $.RULE(\"italic\",()=>{\n          let children = [];\n          $.OR([{\n              ALT: () => {\n                  children.push($.CONSUME(lexer.UnderscoreItalicStart));\n                  children.push($.SUBRULE3($.statementContent));\n                  children.push($.CONSUME(lexer.UnderscoreItalicEnd));\n              }\n          }, {\n              ALT: () => {\n                  children.push($.CONSUME(lexer.AsteriskItalicStart));\n                  children.push($.SUBRULE4($.statementContent));\n                  children.push($.CONSUME(lexer.AsteriskItalicEnd));\n              }\n          }]);\n          return {name:'italic', children:children};\n        });\n        $.statementContent = $.RULE(\"statementContent\", () => {\n            let children = [];\n            // OR caching. see: http://sap.github.io/chevrotain/docs/FAQ.html#major-performance-benefits\n            let atLeastOne = $.AT_LEAST_ONE(() => $.OR($.c4 ||\n                ($.c4 =[{\n                    ALT: () => $.SUBRULE($.freestyleText)\n                }, {\n                    ALT: () => $.CONSUME(lexer.Link)\n                }, {\n                    ALT: () => $.SUBRULE($.bold)\n                }, {\n                    ALT: () => $.SUBRULE($.italic)\n                }, {\n                    ALT: () => $.CONSUME(lexer.Tag)\n                }, {\n                    ALT: () => $.CONSUME(lexer.ArgumentMention)\n                }, {\n                    ALT: () => $.CONSUME(lexer.StatementMention)\n                }\n            // , {\n            //     ALT: () => children.push($.CONSUME(lexer.StatementMentionByNumber))\n            // }\n            ])));\n            children = atLeastOne;\n            return {\n                name: 'statementContent',\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n\n        $.freestyleText = $.RULE(\"freestyleText\", () => {\n            let children = [];\n            $.AT_LEAST_ONE(() => $.OR([{\n                ALT: () => children.push($.CONSUME(lexer.Freestyle))\n            }, {\n                ALT: () => children.push($.CONSUME(lexer.UnusedControlChar))\n            },{\n                ALT: () => children.push($.CONSUME(lexer.EscapedChar))\n            }]));\n            return {\n                name: \"freestyleText\",\n                startLine: children[0].startLine,\n                children: children\n            };\n        });\n        // very important to call this after all the rules have been defined.\n        // otherwise the parser may not work correctly as it will lack information\n        // derived during the self analysis phase.\n        Parser.performSelfAnalysis(this);\n    }\n\n    astToString(value) {\n        return this.logAstRecursively(value, \"\", \"\");\n    }\n    astToJsonString(value) {\n        return JSON.stringify(value, null, 2);\n    }\n    logAstRecursively(value, pre, str) {\n        if (value === undefined) {\n            str += \"undefined\";\n            return str;\n        } else if (value.tokenType) {\n            str += value.tokenType.tokenName;\n            return str;\n        }\n        str += value.name;\n        if (value.children && value.children.length > 0) {\n            let nextPre = pre + \" |\";\n            for (let child of value.children) {\n                str += \"\\n\" + nextPre + \"__\";\n                str = this.logAstRecursively(child, nextPre, str);\n            }\n            str += \"\\n\" + pre;\n        }\n        return str;\n    }\n\n}\n\nmodule.exports = {\n    ArgdownParser: new ArgdownParser(\"\", ArgdownLexer)\n}\n"]}