{"version":3,"sources":["../../src/ArgdownApplication.js"],"names":["_","ArgdownApplication","logger","init","plugin","processorId","processor","processors","plugins","walker","push","argdownListeners","Object","keys","key","addListener","index","indexOf","removeListener","splice","name","getPlugins","removePlugin","isFunction","log","setLevel","level","logLevel","message","console","request","response","processorsToRun","resp","process","isArray","isEmpty","prepare","ast","walk","run","newResponse","isObject","responseOfLastRun","module","exports"],"mappings":"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","file":"ArgdownApplication.js","sourcesContent":["\"use strict\";\n\nimport { ArgdownTreeWalker } from \"./ArgdownTreeWalker.js\";\nimport * as _ from \"lodash\";\n\nclass ArgdownApplication {\n    constructor(logger) {\n        this.init(logger);\n    }\n    addPlugin(plugin, processorId) {\n        if (!processorId) {\n            processorId = \"default\";\n        }\n\n        let processor = this.processors[processorId];\n        if (!processor) {\n            processor = {\n                plugins: [],\n                walker: null\n            };\n            this.processors[processorId] = processor;\n        }\n\n        processor.plugins.push(plugin);\n        if (plugin.argdownListeners) {\n            if (!processor.walker) {\n                processor.walker = new ArgdownTreeWalker();\n            }\n            for (let key of Object.keys(plugin.argdownListeners)) {\n                processor.walker.addListener(key, plugin.argdownListeners[key]);\n            }\n        }\n    }\n\n    removePlugin(plugin, processorId) {\n        if (!processorId) {\n            processorId = \"default\";\n        }\n\n        let processor = this.processors[processorId];\n        if (!processor) {\n            return;\n        }\n\n        let index = processor.plugins.indexOf(plugin);\n        if (index > -1) {\n            for (let key of Object.keys(plugin.argdownListeners)) {\n                processor.walker.removeListener(key, plugin.argdownListeners[key]);\n            }\n            processor.plugins.splice(index, 1);\n        }\n    }\n    getPlugins(processorId) {\n        if (!processorId) {\n            processorId = \"default\";\n        }\n        let processor = this.processors[processorId];\n        if (processor) return processor.plugins;\n        else {\n            return null;\n        }\n    }\n    getPlugin(name, processorId) {\n        let plugins = this.getPlugins(processorId);\n        if (plugins) {\n            for (let plugin of plugins) {\n                if (plugin.name == name) return plugin;\n            }\n        }\n    }\n    removeProcessor(processorId) {\n        let processor = this.processors[processorId];\n        if (!processor) return;\n        for (let plugin of processor.plugins) {\n            this.removePlugin(plugin, processorId);\n        }\n        delete this.processors[processorId];\n    }\n    init(logger) {\n        this.processors = {};\n        if (logger && _.isFunction(logger.log) && _.isFunction(logger.setLevel)) {\n            this.logger = logger;\n        } else {\n            this.logger = {\n                setLevel(level) {\n                    this.logLevel = level;\n                },\n                log(level, message) {\n                    if (level == \"verbose\") {\n                        if (this.logLevel == \"verbose\") {\n                            console.log(message);\n                        }\n                    } else {\n                        console.log(message);\n                    }\n                }\n            };\n        }\n    }\n    run(request, response) {\n        let processorsToRun = null;\n        this.logger.setLevel(\"error\");\n        let resp = response || {};\n\n        if (request) {\n            if (request.logLevel) {\n                this.logger.setLevel(request.logLevel);\n            }\n            if (request.process) {\n                if (_.isArray(request.process)) {\n                    processorsToRun = request.process;\n                }\n            }\n        }\n\n        if (_.isEmpty(processorsToRun)) {\n            this.logger.log(\"verbose\", \"No processors to run.\");\n            return resp;\n        }\n\n        for (let processorId of processorsToRun) {\n            let processor = this.processors[processorId];\n            if (!processor) {\n                this.logger.log(\"verbose\", \"Processor not found: \" + processorId);\n                continue;\n            }\n            this.logger.log(\"verbose\", \"Running processor: \" + processorId);\n\n            for (let plugin of processor.plugins) {\n                this.logger.log(\"verbose\", \"Preparing plugin: \" + plugin.name);\n                if (_.isFunction(plugin.prepare)) {\n                    plugin.prepare(request, response, this.logger);\n                }\n            }\n\n            if (resp.ast && processor.walker) {\n                processor.walker.walk(request, resp, this.logger);\n            }\n\n            for (let plugin of processor.plugins) {\n                this.logger.log(\"verbose\", \"Running plugin: \" + plugin.name);\n                if (_.isFunction(plugin.run)) {\n                    let newResponse = plugin.run(request, resp, this.logger);\n                    if (_.isObject(newResponse)) {\n                        resp = newResponse;\n                    }\n                }\n            }\n        }\n        this.responseOfLastRun = resp;\n        return resp;\n    }\n}\n\nmodule.exports = {\n    ArgdownApplication: ArgdownApplication\n};\n"]}