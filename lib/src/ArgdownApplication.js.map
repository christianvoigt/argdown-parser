{"version":3,"sources":["../../src/ArgdownApplication.js"],"names":["_","ArgdownApplication","logger","init","plugin","processorId","processor","processors","plugins","walker","push","argdownListeners","Object","keys","key","addListener","index","indexOf","removeListener","splice","name","getPlugins","removePlugin","isFunction","log","setLevel","level","logLevel","message","console","request","response","processorsToRun","resp","process","isArray","isEmpty","promise","Promise","resolve","ast","wrappedWalk","walk","then","runAsync","run","wrappedRun","newResponse","isObject","responseOfLastRun","module","exports"],"mappings":"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","file":"ArgdownApplication.js","sourcesContent":["\"use strict\";\n\nimport {ArgdownTreeWalker} from \"./ArgdownTreeWalker.js\";\nimport * as _ from 'lodash';\n\nclass ArgdownApplication{\n  constructor(logger){\n    this.init(logger);\n  }\n  addPlugin(plugin, processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n\n    let processor = this.processors[processorId];\n    if(!processor){\n      processor = {\n        plugins:[],\n        walker: null\n      };\n      this.processors[processorId] = processor;\n    }\n\n    processor.plugins.push(plugin);\n    if(plugin.argdownListeners){\n      if(!processor.walker){\n        processor.walker = new ArgdownTreeWalker();        \n      }\n      for(let key of Object.keys(plugin.argdownListeners)){\n        processor.walker.addListener(key, plugin.argdownListeners[key]);\n      }\n    }\n  }\n\n  removePlugin(plugin, processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n\n    let processor = this.processors[processorId];\n    if(!processor){\n      return;\n    }\n\n    let index = processor.plugins.indexOf(plugin);\n    if(index > -1){\n      for(let key of Object.keys(plugin.argdownListeners)){\n        processor.walker.removeListener(key, plugin.argdownListeners[key]);\n      }\n      processor.plugins.splice(index, 1);\n    }\n  }\n  getPlugins(processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n    let processor = this.processors[processorId];\n    if(processor)\n      return processor.plugins;\n    else {\n      return null;\n    }\n  }\n  getPlugin(name, processorId){\n    let plugins = this.getPlugins(processorId);\n    if(plugins){\n      for(let plugin of plugins){\n        if(plugin.name == name)\n          return plugin;\n      }      \n    }\n  }\n  removeProcessor(processorId){\n    let processor = this.processors[processorId];\n    if(!processor)\n      return;\n    for(let plugin of processor.plugins){\n      this.removePlugin(plugin, processorId);\n    }\n    delete this.processors[processorId];\n  }\n  init(logger){\n    this.processors = {};\n    if(logger && _.isFunction(logger.log) && _.isFunction(logger.setLevel)){\n      this.logger = logger;\n    }else{\n      this.logger = {\n        setLevel(level){\n          this.logLevel = level;\n        },\n        log(level, message){\n          if(level == \"verbose\"){\n            if(this.logLevel == \"verbose\"){\n              console.log(message);\n            }\n          }else{\n            console.log(message);\n          }\n        }\n      };\n    }\n  }\n  runAsync(request, response){\n    let processorsToRun = null;\n    this.logger.setLevel(\"error\");\n    let resp = response || {};\n\n    if (request) {\n      if (request.logLevel) {\n        this.logger.setLevel(request.logLevel);\n      }\n      if (request.process) {\n        if (_.isArray(request.process)) {\n          processorsToRun = request.process;\n        }\n      }\n    }\n\n    if (_.isEmpty(processorsToRun)) {\n      this.logger.log(\"verbose\", \"No processors to run.\");\n      return resp;\n    }\n    let promise = new Promise().resolve(resp);\n    for (let processorId of processorsToRun) {\n      let processor = this.processors[processorId];\n      if (!processor) {\n        this.logger.log(\"verbose\", \"Processor not found: \" + processorId);\n        continue;\n      }\n\n      if (resp.ast && processor.walker) {\n        var wrappedWalk = () => {\n          processor.walker.walk(request, resp, this.logger); \n          return resp; \n        };\n        promise = promise.then(wrappedWalk);\n      }\n\n      for (let plugin of processor.plugins) {\n        this.logger.log(\"verbose\", \"Running plugin: \" + plugin.name);\n        if (_.isFunction(plugin.runAsync)) {\n          promise = promise.then(plugin.runAsync(request, resp, this.logger));\n        } else if (_.isFunction(plugin.run)){\n          var wrappedRun = (resp)=>{\n            plugin.run(request, resp, this.logger);\n            return resp;\n          };\n          promise = promise.then(wrappedRun);\n        }\n      }\n    }\n    return promise;\n  }\n  run(request, response){\n    let processorsToRun = null;\n    this.logger.setLevel(\"error\");\n    let resp = response ||{};\n\n    if (request) {\n      if (request.logLevel) {\n        this.logger.setLevel(request.logLevel);\n      }\n      if (request.process) {\n        if (_.isArray(request.process)) {\n          processorsToRun = request.process;\n        }\n      }\n    }\n\n    if (_.isEmpty(processorsToRun)) {\n      this.logger.log(\"verbose\", \"No processors to run.\");\n      return resp;\n    }\n\n    for (let processorId of processorsToRun) {\n      let processor = this.processors[processorId];\n      if (!processor) {\n        this.logger.log(\"verbose\", \"Processor not found: \" + processorId);\n        continue;\n      }\n      this.logger.log(\"verbose\", \"Running processor: \" + processorId);\n\n      if (resp.ast && processor.walker) {\n        processor.walker.walk(resp.ast, resp, this.logger);\n      }\n\n      for (let plugin of processor.plugins) {\n        this.logger.log(\"verbose\", \"Running plugin: \" + plugin.name);\n        if (_.isFunction(plugin.run)) {\n          let newResponse = plugin.run(request, resp, this.logger);\n          if (_.isObject(newResponse)) {\n            resp = newResponse;\n          }\n        }\n      }\n    }\n    this.responseOfLastRun = resp;\n    return resp;\n  }\n}\n\nmodule.exports = {\n  ArgdownApplication: ArgdownApplication\n}\n"]}