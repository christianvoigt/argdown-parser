{"version":3,"sources":["../../src/ArgdownApplication.js"],"names":["_","ArgdownApplication","init","plugin","processorId","processor","processors","plugins","walker","push","argdownListeners","Object","keys","key","addListener","index","indexOf","removeListener","splice","name","getPlugins","removePlugin","lexer","parser","inputText","verbose","data","lexResult","tokenize","tokens","lexerErrors","errors","input","ast","argdown","parserErrors","length","console","log","param","previousData","processorsToRun","isString","isArray","isObject","config","process","parse","isEmpty","walk","isFunction","run","newData","module","exports"],"mappings":"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","file":"ArgdownApplication.js","sourcesContent":["\"use strict\";\n\nimport {ArgdownLexer} from './ArgdownLexer.js';\nimport {ArgdownParser} from \"./ArgdownParser.js\";\nimport {ArgdownTreeWalker} from \"./ArgdownTreeWalker.js\";\nimport * as _ from 'lodash';\n\nclass ArgdownApplication{\n  constructor(){\n    this.init();\n  }\n  addPlugin(plugin, processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n\n    let processor = this.processors[processorId];\n    if(!processor){\n      processor = {\n        plugins:[],\n        walker: null\n      };\n      this.processors[processorId] = processor;\n    }\n\n    processor.plugins.push(plugin);\n    if(plugin.argdownListeners){\n      if(!processor.walker){\n        processor.walker = new ArgdownTreeWalker();        \n      }\n      for(let key of Object.keys(plugin.argdownListeners)){\n        processor.walker.addListener(key, plugin.argdownListeners[key]);\n      }\n    }\n  }\n\n  removePlugin(plugin, processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n\n    let processor = this.processors[processorId];\n    if(!processor){\n      return;\n    }\n\n    let index = processor.plugins.indexOf(plugin);\n    if(index > -1){\n      for(let key of Object.keys(plugin.argdownListeners)){\n        processor.walker.removeListener(key, plugin.argdownListeners[key]);\n      }\n      processor.plugins.splice(index, 1);\n    }\n  }\n  getPlugins(processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n    let processor = this.processors[processorId];\n    if(processor)\n      return processor.plugins;\n    else {\n      return null;\n    }\n  }\n  getPlugin(name, processorId){\n    let plugins = this.getPlugins(processorId);\n    for(let plugin of plugins){\n      if(plugin.name == name)\n        return plugin;\n    }\n  }\n  removeProcessor(processorId){\n    let processor = this.processors[processorId];\n    if(!processor)\n      return;\n    for(let plugin of processor.plugins){\n      this.removePlugin(plugin, processorId);\n    }\n    delete this.processors[processorId];\n  }\n  init(){\n    this.processors = {};\n    this.lexer = ArgdownLexer;\n    this.parser = ArgdownParser;\n  }\n  parse(inputText, verbose, data){\n      data = data ||{};\n      let lexResult = this.lexer.tokenize(inputText);\n      this.tokens = lexResult.tokens;\n      data.tokens = lexResult.tokens; \n      this.lexerErrors = lexResult.errors;\n      data.lexerErrors = lexResult.errors;\n\n      this.parser.input = lexResult.tokens;\n      this.ast = this.parser.argdown();\n      data.ast = this.ast;\n      data.parserErrors = this.parser.errors;\n      this.parserErrors = this.parser.errors;\n      if(verbose && data.lexerErrors && data.lexerErrors.length > 0){\n        console.log(data.lexerErrors);\n      }\n      if(verbose && data.parserErrors && data.parserErrors.length > 0){\n        console.log(data.parserErrors);\n      }\n      return data;\n  }\n  run(param, previousData){\n    let processorsToRun = null;\n    let verbose = false;\n    let data = {};\n    \n    if(param == null){\n      processorsToRun = ['default'];\n    }else if(_.isString(param)){\n      processorsToRun = [param];\n      if(previousData){\n        data = previousData;\n      }\n    }else if(_.isArray(param)){\n      processorsToRun = param;\n      if(previousData){\n        data = previousData;\n      }\n    }else if(_.isObject(param)){\n      data = param;\n    }\n    if(data.config){\n      verbose = data.config.verbose;\n      if(data.config.process){\n        if(_.isArray(data.config.process)){\n          processorsToRun = data.config.process;\n        }\n      }\n    }\n    if(data.input){\n      this.parse(data.input, verbose, data);\n    }\n    \n    if(_.isEmpty(processorsToRun)){\n      if(verbose){\n        console.log(\"No processors to run.\");\n      }\n      return data;\n    }\n    \n    let ast = data.ast;\n    if(!ast){\n      ast = this.ast;\n    }\n    if(!ast){\n      if(verbose){\n        console.log(\"Ast not found.\");\n      }\n      return data;\n    }\n    for(let processorId of processorsToRun){\n      let processor = this.processors[processorId];\n      if(!processor){\n        if(verbose){\n          console.log(\"Processor not found: \"+processorId);\n        }\n        continue;\n      }\n      if(verbose){\n        console.log(\"Running processor: \"+processorId);\n      }\n\n      if(processor.walker){\n        processor.walker.walk(ast, data);\n      }\n\n      for(let plugin of processor.plugins){\n        if(verbose){\n          console.log(\"Running plugin: \"+plugin.name);\n        }\n        if(_.isFunction(plugin.run)){\n          let newData = plugin.run(data);\n          if(_.isObject(newData)){\n            data = newData;\n          }\n        }\n      }\n    }\n    return data;\n  }\n}\n\nmodule.exports = {\n  ArgdownApplication: ArgdownApplication\n}\n"]}