{"version":3,"sources":["../../src/ArgdownApplication.js"],"names":["_","ArgdownApplication","init","plugin","processorId","processor","processors","plugins","walker","push","argdownListeners","Object","keys","key","addListener","index","indexOf","removeListener","splice","name","getPlugins","removePlugin","param","previousData","processorsToRun","verbose","data","isString","isArray","isObject","config","process","isEmpty","console","log","ast","walk","isFunction","run","newData","dataOfLastRun","module","exports"],"mappings":"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","file":"ArgdownApplication.js","sourcesContent":["\"use strict\";\n\nimport {ArgdownTreeWalker} from \"./ArgdownTreeWalker.js\";\nimport * as _ from 'lodash';\n\nclass ArgdownApplication{\n  constructor(){\n    this.init();\n  }\n  addPlugin(plugin, processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n\n    let processor = this.processors[processorId];\n    if(!processor){\n      processor = {\n        plugins:[],\n        walker: null\n      };\n      this.processors[processorId] = processor;\n    }\n\n    processor.plugins.push(plugin);\n    if(plugin.argdownListeners){\n      if(!processor.walker){\n        processor.walker = new ArgdownTreeWalker();        \n      }\n      for(let key of Object.keys(plugin.argdownListeners)){\n        processor.walker.addListener(key, plugin.argdownListeners[key]);\n      }\n    }\n  }\n\n  removePlugin(plugin, processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n\n    let processor = this.processors[processorId];\n    if(!processor){\n      return;\n    }\n\n    let index = processor.plugins.indexOf(plugin);\n    if(index > -1){\n      for(let key of Object.keys(plugin.argdownListeners)){\n        processor.walker.removeListener(key, plugin.argdownListeners[key]);\n      }\n      processor.plugins.splice(index, 1);\n    }\n  }\n  getPlugins(processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n    let processor = this.processors[processorId];\n    if(processor)\n      return processor.plugins;\n    else {\n      return null;\n    }\n  }\n  getPlugin(name, processorId){\n    let plugins = this.getPlugins(processorId);\n    if(plugins){\n      for(let plugin of plugins){\n        if(plugin.name == name)\n          return plugin;\n      }      \n    }\n  }\n  removeProcessor(processorId){\n    let processor = this.processors[processorId];\n    if(!processor)\n      return;\n    for(let plugin of processor.plugins){\n      this.removePlugin(plugin, processorId);\n    }\n    delete this.processors[processorId];\n  }\n  init(){\n    this.processors = {};\n  }\n  run(param, previousData){\n    let processorsToRun = null;\n    let verbose = false;\n    let data = {};\n    \n    if(param == null){\n      processorsToRun = ['default'];\n    }else if(_.isString(param)){\n      processorsToRun = [param];\n      if(previousData){\n        data = previousData;\n      }\n    }else if(_.isArray(param)){\n      processorsToRun = param;\n      if(previousData){\n        data = previousData;\n      }\n    }else if(_.isObject(param)){\n      data = param;\n    }\n    if(data.config){\n      verbose = data.config.verbose;\n      if(data.config.process){\n        if(_.isArray(data.config.process)){\n          processorsToRun = data.config.process;\n        }\n      }\n    }\n    \n    if(_.isEmpty(processorsToRun)){\n      if(verbose){\n        console.log(\"No processors to run.\");\n      }\n      return data;\n    }\n    \n    for(let processorId of processorsToRun){\n      let processor = this.processors[processorId];\n      if(!processor){\n        if(verbose){\n          console.log(\"Processor not found: \"+processorId);\n        }\n        continue;\n      }\n      if(verbose){\n        console.log(\"Running processor: \"+processorId);\n      }\n\n      if(data.ast && processor.walker){\n        processor.walker.walk(data.ast, data);\n      }\n\n      for(let plugin of processor.plugins){\n        if(verbose){\n          console.log(\"Running plugin: \"+plugin.name);\n        }\n        if(_.isFunction(plugin.run)){\n          let newData = plugin.run(data);\n          if(_.isObject(newData)){\n            data = newData;\n          }\n        }\n      }\n    }\n    this.dataOfLastRun = data;\n    return data;\n  }\n}\n\nmodule.exports = {\n  ArgdownApplication: ArgdownApplication\n}\n"]}