{"version":3,"sources":["../../src/ArgdownApplication.js"],"names":["_","ArgdownApplication","init","plugin","processorId","processor","processors","plugins","walker","push","argdownListeners","Object","keys","key","addListener","index","indexOf","removeListener","splice","name","getPlugins","removePlugin","lexer","parser","inputText","lexResult","tokenize","lexerErrors","errors","tokens","input","parserErrors","ast","argdown","processorsToRun","data","isString","console","log","walk","isFunction","run","newData","isObject","module","exports"],"mappings":"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","file":"ArgdownApplication.js","sourcesContent":["\"use strict\";\n\nimport {ArgdownLexer} from './ArgdownLexer.js';\nimport {ArgdownParser} from \"./ArgdownParser.js\";\nimport {ArgdownTreeWalker} from \"./ArgdownTreeWalker.js\";\nimport * as _ from 'lodash';\n\nclass ArgdownApplication{\n  constructor(){\n    this.init();\n  }\n  addPlugin(plugin, processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n\n    let processor = this.processors[processorId];\n    if(!processor){\n      processor = {\n        plugins:[],\n        walker: null\n      };\n      this.processors[processorId] = processor;\n    }\n\n    processor.plugins.push(plugin);\n    if(plugin.argdownListeners){\n      if(!processor.walker)\n        processor.walker = new ArgdownTreeWalker();\n      for(let key of Object.keys(plugin.argdownListeners)){\n        processor.walker.addListener(key, plugin.argdownListeners[key]);\n      }\n    }\n  }\n\n  removePlugin(plugin, processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n\n    let processor = this.processors[processorId];\n    if(!processor){\n      return;\n    }\n\n    let index = processor.plugins.indexOf(plugin);\n    if(index > -1){\n      for(let key of Object.keys(plugin.argdownListeners)){\n        processor.walker.removeListener(key, plugin.argdownListeners[key]);\n      }\n      processor.plugins.splice(index, 1);\n    }\n  }\n  getPlugins(processorId){\n    if(!processorId){\n      processorId = 'default';\n    }\n    let processor = this.processors[processorId];\n    if(processor)\n      return processor.plugins;\n    else {\n      return null;\n    }\n  }\n  getPlugin(name, processorId){\n    let plugins = this.getPlugins(processorId);\n    for(let plugin of plugins){\n      if(plugin.name == name)\n        return plugin;\n    }\n  }\n  removeProcessor(processorId){\n    let processor = this.processors[processorId];\n    if(!processor)\n      return;\n    for(let plugin of processor.plugins){\n      this.removePlugin(plugin, processorId);\n    }\n    delete this.processors[processorId];\n  }\n  init(){\n    this.processors = {};\n    this.lexer = ArgdownLexer;\n    this.parser = ArgdownParser;\n  }\n  parse(inputText){\n      let lexResult = this.lexer.tokenize(inputText);\n      this.lexerErrors = lexResult.errors;\n      this.tokens = lexResult.tokens;\n      this.parser.input = lexResult.tokens;\n      this.parserErrors = this.parser.errors;\n      this.ast = this.parser.argdown();\n  }\n  run(processorsToRun){\n    let data = {\n      ast : this.ast,\n      parserErrors : this.parserErrors,\n      lexerErrors : this.lexerErrors,\n      tokens : this.tokens\n    };\n    if(!this.ast){\n      return data;\n    }\n\n    if(!processorsToRun){\n      processorsToRun = ['default'];\n    }else if(_.isString(processorsToRun)){\n      processorsToRun = [processorsToRun];\n    }\n\n    for(let processorId of processorsToRun){\n      let processor = this.processors[processorId];\n      if(!processor){\n        console.log(\"Processor not found: \"+processorId);\n        continue;\n      }\n      console.log(\"Running processor: \"+processorId);\n\n      if(processor.walker){\n        processor.walker.walk(this.ast);\n      }\n\n      for(let plugin of processor.plugins){\n        console.log(\"Running plugin: \"+plugin.name);\n        if(_.isFunction(plugin.run)){\n          let newData = plugin.run(data);\n          if(_.isObject(newData)){\n            data = newData;\n          }\n        }\n      }\n    }\n    return data;\n  }\n}\n\nmodule.exports = {\n  ArgdownApplication: ArgdownApplication\n}\n"]}