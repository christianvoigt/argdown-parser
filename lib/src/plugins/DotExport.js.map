{"version":3,"sources":["../../../src/plugins/DotExport.js"],"names":["_","DotExport","config","settings","defaults","useHtmlLabels","onlyTitlesInHtmlLabels","graphname","name","data","dot","map","nodes","node","element","type","statements","title","arguments","label","escapeQuotesForDot","lastMember","last","members","descriptions","text","id","relations","nodeRelation","color","from","to","str","replace","module","exports"],"mappings":"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","file":"DotExport.js","sourcesContent":["import * as _ from 'lodash';\n\nclass DotExport{\n  set config(config){\n    this.settings = _.defaults(config ||{}, {\n      useHtmlLabels : false,\n      onlyTitlesInHtmlLabels: false,\n      graphname: 'Argument Map',\n    });\n  }\n  constructor(){\n    this.name = \"DotExport\";\n  }\n  run(data){\n    let dot = \"digraph \\\"\"+this.settings.graphname+\"\\\" {\\n\\n\";\n\n    for(let node of data.map.nodes){\n      let element;\n      if(node.type == \"statement\"){\n        element = data.statements[node.title];\n      }else{\n        element = data.arguments[node.title];\n      }\n      let label = \"\";\n      if(this.settings.useHtmlLabels){\n        label = \"\\\"<h3 class='title'>\"+this.escapeQuotesForDot(node.title)+\"</h3>\";\n        if(!this.settings.onlyTitlesInHtmlLabels){\n          let lastMember;\n          if(node.type == \"statement\"){\n            lastMember = _.last(element.members);\n          }else{\n            lastMember = _.last(element.descriptions);\n          }\n          if(lastMember){\n            let text = lastMember.text;\n            if(text)\n              label += \"<p>\"+this.escapeQuotesForDot(text)+\"</p>\";\n          }\n        }\n        label += \"\\\"\";\n      }else{\n        label = \"\\\"\"+this.escapeQuotesForDot(node.title)+\"\\\"\";\n      }\n      if(node.type == \"statement\"){\n        dot += \"  \"+node.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded\\\", color=\\\"cornflowerblue\\\", fillcolor=\\\"white\\\", labelfontcolor=\\\"white\\\", type=\\\"\"+node.type+\"\\\"];\\n\";\n      }else{\n        dot += \"  \"+node.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded\\\", fillcolor=\\\"blue\\\", fontcolor=\\\"white\\\", type=\\\"\"+node.type+\"\\\"];\\n\";\n      }\n    }\n\n    dot +=\"\\n\\n\";\n\n    for(let nodeRelation of data.map.relations){\n      let color = \"green\";\n      if(nodeRelation.type == \"attack\"){\n        color = \"red\";\n      }\n      dot += \"  \"+nodeRelation.from.id + \" -> \" + nodeRelation.to.id + \" [color=\\\"\"+color+\"\\\", type=\\\"\"+nodeRelation.type+\"\\\"];\\n\";\n    }\n\n    dot += \"\\n}\";\n\n    data.dot = dot;\n    return data;\n  }\n  escapeQuotesForDot(str){\n    return str.replace(/\\\"/g,'\\\\\\\"');\n  }\n}\nmodule.exports = {\n  DotExport: DotExport\n}\n"]}