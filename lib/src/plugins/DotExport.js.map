{"version":3,"sources":["../../../src/plugins/DotExport.js"],"names":["_","DotExport","config","settings","defaults","useHtmlLabels","onlyTitlesInHtmlLabels","graphname","name","data","dot","Object","keys","map","statementNodes","statementKey","statement","statements","statementNode","label","escapeQuotesForDot","title","lastMember","last","members","text","id","type","argumentsKeys","argumentNodes","length","key","argument","arguments","argumentNode","lastDescription","descriptions","relations","nodeRelation","color","from","to","str","replace","module","exports"],"mappings":"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","file":"DotExport.js","sourcesContent":["import * as _ from 'lodash';\n\nclass DotExport{\n  set config(config){\n    this.settings = _.defaults(config ||{}, {\n      useHtmlLabels : false,\n      onlyTitlesInHtmlLabels: false,\n      graphname: 'Argument Map',\n    });\n  }\n  constructor(){\n    this.name = \"DotExport\";\n  }\n  run(data){\n    let dot = \"digraph \\\"\"+this.settings.graphname+\"\\\" {\\n\\n\";\n\n    for(let statementKey of Object.keys(data.map.statementNodes)){\n      let statement = data.statements[statementKey];\n      let statementNode = data.map.statementNodes[statementKey];\n      let label = \"\";\n      if(this.settings.useHtmlLabels){\n        label = \"\\\"<h3 class='title'>\"+this.escapeQuotesForDot(statementNode.title)+\"</h3>\";\n        if(!this.settings.onlyTitlesInHtmlLabels){\n          let lastMember = _.last(statement.members);\n          if(lastMember){\n            let text = lastMember.text;\n            if(text)\n              label += \"<p>\"+this.escapeQuotesForDot(text)+\"</p>\";\n          }\n        }\n        label += \"\\\"\";\n      }else{\n        label = \"\\\"\"+this.escapeQuotesForDot(statementNode.title)+\"\\\"\";\n      }\n      dot += \"  \"+statementNode.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded\\\", color=\\\"cornflowerblue\\\", fillcolor=\\\"white\\\", labelfontcolor=\\\"white\\\", type=\\\"\"+statementNode.type+\"\\\"];\\n\";\n    }\n\n    let argumentsKeys = Object.keys(data.map.argumentNodes);\n    if(argumentsKeys.length > 0)\n      dot += \"\\n\\n\";\n\n    for(let key of argumentsKeys){\n      let argument = data.arguments[key];\n      let argumentNode = data.map.argumentNodes[key];\n      let label = \"\";\n      if(this.settings.useHtmlLabels){\n        label = \"\\\"<h3 class='title'>\"+this.escapeQuotesForDot(argumentNode.title)+\"</h3>\";\n        if(!this.settings.onlyTitlesInHtmlLabels){\n          let lastDescription = _.last(argument.descriptions);\n          if(lastDescription){\n            let text = lastDescription.text;\n            if(text)\n              label += \"<p>\"+this.escapeQuotesForDot(text)+\"</p>\";\n          }\n        }\n        label += \"\\\"\";\n      }else{\n        label = \"\\\"\"+this.escapeQuotesForDot(argumentNode.title)+\"\\\"\";\n      }\n      dot += \"  \"+argumentNode.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded\\\", fillcolor=\\\"blue\\\", fontcolor=\\\"white\\\", type=\\\"\"+argumentNode.type+\"\\\"];\\n\";\n    }\n\n    dot +=\"\\n\\n\";\n\n    for(let nodeRelation of data.map.relations){\n      let color = \"green\";\n      if(nodeRelation.type == \"attack\"){\n        color = \"red\";\n      }\n      dot += \"  \"+nodeRelation.from.id + \" -> \" + nodeRelation.to.id + \" [color=\\\"\"+color+\"\\\", type=\\\"\"+nodeRelation.type+\"\\\"];\\n\";\n    }\n\n    dot += \"\\n}\";\n\n    data.dot = dot;\n    return data;\n  }\n  escapeQuotesForDot(str){\n    return str.replace(/\\\"/g,'\\\\\\\"');\n  }\n}\nmodule.exports = {\n  DotExport: DotExport\n}\n"]}