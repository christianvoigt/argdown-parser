{"version":3,"sources":["../../../src/plugins/ParserPlugin.js"],"names":["_","chevrotain","tokenMatcher","ParserPlugin","config","name","lexer","parser","request","response","logger","input","reset","lexResult","tokenize","tokens","lexerErrors","errors","ast","argdown","parserErrors","length","log","lastToken","last","error","token","EOF","startLine","endLine","startOffset","endOffset","startColumn","endColumn","newToken","createTokenInstance","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;AACZ;;AACA;;AACA;;IAAYC,U;;AACZ;;;;;;;;;;AAEA,IAAMC,eAAeD,WAAWC,YAAhC;;IAEMC,Y;;;AACF,0BAAYC,MAAZ,EAAoB;AAAA;;AAAA,gIACV,IADU,EACJA,MADI;;AAEhB,cAAKC,IAAL,GAAY,cAAZ;AACA,cAAKC,KAAL;AACA,cAAKC,MAAL;AAJgB;AAKnB;;;;4BACGC,O,EAASC,Q,EAAUC,M,EAAQ;AAC3B,gBAAI,CAACF,QAAQG,KAAb,EAAoB;AAChB,uBAAOF,QAAP;AACH;AACD,iBAAKG,KAAL;;AAEA,gBAAIC,YAAY,KAAKP,KAAL,CAAWQ,QAAX,CAAoBN,QAAQG,KAA5B,CAAhB;AACAF,qBAASM,MAAT,GAAkBF,UAAUE,MAA5B;AACAN,qBAASO,WAAT,GAAuBH,UAAUI,MAAjC;;AAEA,iBAAKV,MAAL,CAAYI,KAAZ,GAAoBE,UAAUE,MAA9B;AACAN,qBAASS,GAAT,GAAe,KAAKX,MAAL,CAAYY,OAAZ,EAAf;AACAV,qBAASW,YAAT,GAAwB,KAAKb,MAAL,CAAYU,MAApC;;AAEA,gBAAIR,SAASO,WAAT,IAAwBP,SAASO,WAAT,CAAqBK,MAArB,GAA8B,CAA1D,EAA6D;AACzDX,uBAAOY,GAAP,CAAW,SAAX,EAAsBb,SAASO,WAA/B;AACH;AACD,gBAAIP,SAASW,YAAT,IAAyBX,SAASW,YAAT,CAAsBC,MAAtB,GAA+B,CAA5D,EAA+D;AAC3D;AACA,oBAAIE,YAAYvB,EAAEwB,IAAF,CAAOf,SAASM,MAAhB,CAAhB;AAF2D;AAAA;AAAA;;AAAA;AAG3D,yCAAkBN,SAASW,YAA3B,8HAAyC;AAAA,4BAAhCK,KAAgC;;AACrC,4BAAIA,MAAMC,KAAN,IAAexB,aAAauB,MAAMC,KAAnB,EAA0BzB,WAAW0B,GAArC,CAAnB,EAA8D;AAC1D,gCAAMC,YAAYL,UAAUM,OAA5B;AACA,gCAAMA,UAAUD,SAAhB;AACA,gCAAME,cAAcP,UAAUQ,SAA9B;AACA,gCAAMA,YAAYD,WAAlB;AACA,gCAAME,cAAcT,UAAUU,SAA9B;AACA,gCAAMA,YAAYD,WAAlB;AACA,gCAAME,WAAWjC,WAAWkC,mBAAX,CACblC,WAAW0B,GADE,EAEb,EAFa,EAGbG,WAHa,EAIbC,SAJa,EAKbH,SALa,EAMbC,OANa,EAObG,WAPa,EAQbC,SARa,CAAjB;AAUAR,kCAAMC,KAAN,GAAcQ,QAAd;AACH;AACJ;AAvB0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwB9D;AACD,mBAAOzB,QAAP;AACH;;;;;;AAEL2B,OAAOC,OAAP,GAAiB;AACblC,kBAAcA;AADD,CAAjB","file":"ParserPlugin.js","sourcesContent":["import * as _ from \"lodash\";\nimport { ArgdownLexer } from \"../ArgdownLexer.js\";\nimport { ArgdownParser } from \"../ArgdownParser.js\";\nimport * as chevrotain from \"chevrotain\";\nimport { PluginWithSettings } from \"./PluginWithSettings.js\";\n\nconst tokenMatcher = chevrotain.tokenMatcher;\n\nclass ParserPlugin extends PluginWithSettings {\n    constructor(config) {\n        super(null, config);\n        this.name = \"ParserPlugin\";\n        this.lexer = ArgdownLexer;\n        this.parser = ArgdownParser;\n    }\n    run(request, response, logger) {\n        if (!request.input) {\n            return response;\n        }\n        this.reset();\n\n        let lexResult = this.lexer.tokenize(request.input);\n        response.tokens = lexResult.tokens;\n        response.lexerErrors = lexResult.errors;\n\n        this.parser.input = lexResult.tokens;\n        response.ast = this.parser.argdown();\n        response.parserErrors = this.parser.errors;\n\n        if (response.lexerErrors && response.lexerErrors.length > 0) {\n            logger.log(\"verbose\", response.lexerErrors);\n        }\n        if (response.parserErrors && response.parserErrors.length > 0) {\n            // //add location if token is EOF\n            var lastToken = _.last(response.tokens);\n            for (let error of response.parserErrors) {\n                if (error.token && tokenMatcher(error.token, chevrotain.EOF)) {\n                    const startLine = lastToken.endLine;\n                    const endLine = startLine;\n                    const startOffset = lastToken.endOffset;\n                    const endOffset = startOffset;\n                    const startColumn = lastToken.endColumn;\n                    const endColumn = startColumn;\n                    const newToken = chevrotain.createTokenInstance(\n                        chevrotain.EOF,\n                        \"\",\n                        startOffset,\n                        endOffset,\n                        startLine,\n                        endLine,\n                        startColumn,\n                        endColumn\n                    );\n                    error.token = newToken;\n                }\n            }\n        }\n        return response;\n    }\n}\nmodule.exports = {\n    ParserPlugin: ParserPlugin\n};\n"]}