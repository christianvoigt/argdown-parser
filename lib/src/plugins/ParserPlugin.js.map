{"version":3,"sources":["../../../src/plugins/ParserPlugin.js"],"names":["_","ParserPlugin","config","previousSettings","settings","defaultsDeep","name","lexer","parser","data","input","verbose","lexResult","tokenize","tokens","lexerErrors","errors","ast","argdown","parserErrors","length","console","log","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;AACZ;;AACA;;;;;;IAEMC,Y;;;sBACOC,M,EAAO;AAChB,UAAIC,mBAAmB,KAAKC,QAA5B;AACA,UAAG,CAACD,gBAAJ,EAAqB;AACnBA,2BAAmB,EAAnB;AAED;AACD,WAAKC,QAAL,GAAgBJ,EAAEK,YAAF,CAAe,EAAf,EAAmBH,MAAnB,EAA2BC,gBAA3B,CAAhB;AACD;;;AACD,wBAAYD,MAAZ,EAAmB;AAAA;;AACjB,SAAKI,IAAL,GAAY,cAAZ;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKK,KAAL;AACA,SAAKC,MAAL;AACD;;;;wBACGC,I,EAAK;AACP,UAAG,CAACA,KAAKC,KAAT,EAAe;AACb,eAAOD,IAAP;AACD;AACD,UAAME,UAAUF,KAAKP,MAAL,IAAeO,KAAKP,MAAL,CAAYS,OAA3C;;AAEA,UAAIC,YAAY,KAAKL,KAAL,CAAWM,QAAX,CAAoBJ,KAAKC,KAAzB,CAAhB;AACAD,WAAKK,MAAL,GAAcF,UAAUE,MAAxB;AACAL,WAAKM,WAAL,GAAmBH,UAAUI,MAA7B;;AAEA,WAAKR,MAAL,CAAYE,KAAZ,GAAoBE,UAAUE,MAA9B;AACAL,WAAKQ,GAAL,GAAW,KAAKT,MAAL,CAAYU,OAAZ,EAAX;AACAT,WAAKU,YAAL,GAAoB,KAAKX,MAAL,CAAYQ,MAAhC;;AAEA,UAAGL,WAAWF,KAAKM,WAAhB,IAA+BN,KAAKM,WAAL,CAAiBK,MAAjB,GAA0B,CAA5D,EAA8D;AAC5DC,gBAAQC,GAAR,CAAYb,KAAKM,WAAjB;AACD;AACD,UAAGJ,WAAWF,KAAKU,YAAhB,IAAgCV,KAAKU,YAAL,CAAkBC,MAAlB,GAA2B,CAA9D,EAAgE;AAC9DC,gBAAQC,GAAR,CAAYb,KAAKU,YAAjB;AACD;AACD,aAAOV,IAAP;AACD;;;;;;AAEHc,OAAOC,OAAP,GAAiB;AACfvB,gBAAcA;AADC,CAAjB","file":"ParserPlugin.js","sourcesContent":["import * as _ from 'lodash';\nimport {ArgdownLexer} from '../ArgdownLexer.js';\nimport {ArgdownParser} from \"../ArgdownParser.js\";\n\nclass ParserPlugin{\n  set config(config){\n    let previousSettings = this.settings;\n    if(!previousSettings){\n      previousSettings = {\n      }\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);    \n  }\n  constructor(config){\n    this.name = \"ParserPlugin\";\n    this.config = config;\n    this.lexer = ArgdownLexer;\n    this.parser = ArgdownParser;    \n  }\n  run(data){\n    if(!data.input){\n      return data;\n    }\n    const verbose = data.config && data.config.verbose;\n    \n    let lexResult = this.lexer.tokenize(data.input);\n    data.tokens = lexResult.tokens; \n    data.lexerErrors = lexResult.errors;\n\n    this.parser.input = lexResult.tokens;\n    data.ast = this.parser.argdown();\n    data.parserErrors = this.parser.errors;\n\n    if(verbose && data.lexerErrors && data.lexerErrors.length > 0){\n      console.log(data.lexerErrors);\n    }\n    if(verbose && data.parserErrors && data.parserErrors.length > 0){\n      console.log(data.parserErrors);\n    }\n    return data;    \n  }\n}\nmodule.exports = {\n  ParserPlugin: ParserPlugin\n}\n"]}