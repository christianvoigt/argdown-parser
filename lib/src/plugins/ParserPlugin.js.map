{"version":3,"sources":["../../../src/plugins/ParserPlugin.js"],"names":["_","chevrotain","tokenMatcher","ParserPlugin","config","defaults","defaultsDeep","name","lexer","parser","request","response","logger","input","lexResult","tokenize","tokens","lexerErrors","errors","ast","argdown","parserErrors","length","log","lastToken","last","error","token","EOF","startLine","endLine","startOffset","endOffset","startColumn","endColumn","newToken","createTokenInstance","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;AACZ;;AACA;;AACA;;IAAYC,U;;;;;;AAEZ,IAAMC,eAAeD,WAAWC,YAAhC;;IAEMC,Y;AACF,0BAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKC,QAAL,GAAgBL,EAAEM,YAAF,CAAe,EAAf,EAAmBF,MAAnB,CAAhB;AACA,aAAKG,IAAL,GAAY,cAAZ;AACA,aAAKC,KAAL;AACA,aAAKC,MAAL;AACH;;;;4BACGC,O,EAASC,Q,EAAUC,M,EAAQ;AAC3B,gBAAI,CAACF,QAAQG,KAAb,EAAoB;AAChB,uBAAOF,QAAP;AACH;;AAED,gBAAIG,YAAY,KAAKN,KAAL,CAAWO,QAAX,CAAoBL,QAAQG,KAA5B,CAAhB;AACAF,qBAASK,MAAT,GAAkBF,UAAUE,MAA5B;AACAL,qBAASM,WAAT,GAAuBH,UAAUI,MAAjC;;AAEA,iBAAKT,MAAL,CAAYI,KAAZ,GAAoBC,UAAUE,MAA9B;AACAL,qBAASQ,GAAT,GAAe,KAAKV,MAAL,CAAYW,OAAZ,EAAf;AACAT,qBAASU,YAAT,GAAwB,KAAKZ,MAAL,CAAYS,MAApC;;AAEA,gBAAIP,SAASM,WAAT,IAAwBN,SAASM,WAAT,CAAqBK,MAArB,GAA8B,CAA1D,EAA6D;AACzDV,uBAAOW,GAAP,CAAW,SAAX,EAAsBZ,SAASM,WAA/B;AACH;AACD,gBAAIN,SAASU,YAAT,IAAyBV,SAASU,YAAT,CAAsBC,MAAtB,GAA+B,CAA5D,EAA+D;AAC3D;AACA,oBAAIE,YAAYxB,EAAEyB,IAAF,CAAOd,SAASK,MAAhB,CAAhB;AAF2D;AAAA;AAAA;;AAAA;AAG3D,yCAAkBL,SAASU,YAA3B,8HAAyC;AAAA,4BAAhCK,KAAgC;;AACrC,4BAAIA,MAAMC,KAAN,IAAezB,aAAawB,MAAMC,KAAnB,EAA0B1B,WAAW2B,GAArC,CAAnB,EAA8D;AAC1D,gCAAMC,YAAYL,UAAUM,OAA5B;AACA,gCAAMA,UAAUD,SAAhB;AACA,gCAAME,cAAcP,UAAUQ,SAA9B;AACA,gCAAMA,YAAYD,WAAlB;AACA,gCAAME,cAAcT,UAAUU,SAA9B;AACA,gCAAMA,YAAYD,WAAlB;AACA,gCAAME,WAAWlC,WAAWmC,mBAAX,CACbnC,WAAW2B,GADE,EAEb,EAFa,EAGbG,WAHa,EAIbC,SAJa,EAKbH,SALa,EAMbC,OANa,EAObG,WAPa,EAQbC,SARa,CAAjB;AAUAR,kCAAMC,KAAN,GAAcQ,QAAd;AACH;AACJ;AAvB0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwB9D;AACD,mBAAOxB,QAAP;AACH;;;;;;AAEL0B,OAAOC,OAAP,GAAiB;AACbnC,kBAAcA;AADD,CAAjB","file":"ParserPlugin.js","sourcesContent":["import * as _ from \"lodash\";\nimport { ArgdownLexer } from \"../ArgdownLexer.js\";\nimport { ArgdownParser } from \"../ArgdownParser.js\";\nimport * as chevrotain from \"chevrotain\";\n\nconst tokenMatcher = chevrotain.tokenMatcher;\n\nclass ParserPlugin {\n    constructor(config) {\n        this.defaults = _.defaultsDeep({}, config);\n        this.name = \"ParserPlugin\";\n        this.lexer = ArgdownLexer;\n        this.parser = ArgdownParser;\n    }\n    run(request, response, logger) {\n        if (!request.input) {\n            return response;\n        }\n\n        let lexResult = this.lexer.tokenize(request.input);\n        response.tokens = lexResult.tokens;\n        response.lexerErrors = lexResult.errors;\n\n        this.parser.input = lexResult.tokens;\n        response.ast = this.parser.argdown();\n        response.parserErrors = this.parser.errors;\n\n        if (response.lexerErrors && response.lexerErrors.length > 0) {\n            logger.log(\"verbose\", response.lexerErrors);\n        }\n        if (response.parserErrors && response.parserErrors.length > 0) {\n            // //add location if token is EOF\n            var lastToken = _.last(response.tokens);\n            for (let error of response.parserErrors) {\n                if (error.token && tokenMatcher(error.token, chevrotain.EOF)) {\n                    const startLine = lastToken.endLine;\n                    const endLine = startLine;\n                    const startOffset = lastToken.endOffset;\n                    const endOffset = startOffset;\n                    const startColumn = lastToken.endColumn;\n                    const endColumn = startColumn;\n                    const newToken = chevrotain.createTokenInstance(\n                        chevrotain.EOF,\n                        \"\",\n                        startOffset,\n                        endOffset,\n                        startLine,\n                        endLine,\n                        startColumn,\n                        endColumn\n                    );\n                    error.token = newToken;\n                }\n            }\n        }\n        return response;\n    }\n}\nmodule.exports = {\n    ParserPlugin: ParserPlugin\n};\n"]}