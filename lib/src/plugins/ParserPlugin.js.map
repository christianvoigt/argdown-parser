{"version":3,"sources":["../../../src/plugins/ParserPlugin.js"],"names":["_","chevrotain","tokenMatcher","ParserPlugin","config","previousSettings","settings","defaultsDeep","name","lexer","parser","request","response","logger","input","lexResult","tokenize","tokens","lexerErrors","errors","ast","argdown","parserErrors","length","log","lastToken","last","error","token","EOF","startLine","endLine","startOffset","endOffset","startColumn","endColumn","newToken","createTokenInstance","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;AACZ;;AACA;;AACA;;IAAYC,U;;;;;;AAEZ,IAAMC,eAAeD,WAAWC,YAAhC;;IAEMC,Y;;;sBACOC,M,EAAO;AAChB,UAAIC,mBAAmB,KAAKC,QAA5B;AACA,UAAG,CAACD,gBAAJ,EAAqB;AACnBA,2BAAmB,EAAnB;AAED;AACD,WAAKC,QAAL,GAAgBN,EAAEO,YAAF,CAAe,EAAf,EAAmBH,MAAnB,EAA2BC,gBAA3B,CAAhB;AACD;;;AACD,wBAAYD,MAAZ,EAAmB;AAAA;;AACjB,SAAKI,IAAL,GAAY,cAAZ;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKK,KAAL;AACA,SAAKC,MAAL;AACD;;;;wBACGC,O,EAASC,Q,EAAUC,M,EAAO;AAC5B,UAAG,CAACF,QAAQG,KAAZ,EAAkB;AAChB,eAAOF,QAAP;AACD;;AAED,UAAIG,YAAY,KAAKN,KAAL,CAAWO,QAAX,CAAoBL,QAAQG,KAA5B,CAAhB;AACAF,eAASK,MAAT,GAAkBF,UAAUE,MAA5B;AACAL,eAASM,WAAT,GAAuBH,UAAUI,MAAjC;;AAEA,WAAKT,MAAL,CAAYI,KAAZ,GAAoBC,UAAUE,MAA9B;AACAL,eAASQ,GAAT,GAAe,KAAKV,MAAL,CAAYW,OAAZ,EAAf;AACAT,eAASU,YAAT,GAAwB,KAAKZ,MAAL,CAAYS,MAApC;;AAEA,UAAGP,SAASM,WAAT,IAAwBN,SAASM,WAAT,CAAqBK,MAArB,GAA8B,CAAzD,EAA2D;AACzDV,eAAOW,GAAP,CAAW,SAAX,EAAsBZ,SAASM,WAA/B;AACD;AACD,UAAGN,SAASU,YAAT,IAAyBV,SAASU,YAAT,CAAsBC,MAAtB,GAA+B,CAA3D,EAA6D;AAC3D;AACA,YAAIE,YAAYzB,EAAE0B,IAAF,CAAOd,SAASK,MAAhB,CAAhB;AAF2D;AAAA;AAAA;;AAAA;AAG3D,+BAAiBL,SAASU,YAA1B,8HAAuC;AAAA,gBAA/BK,KAA+B;;AACrC,gBAAGA,MAAMC,KAAN,IAAe1B,aAAayB,MAAMC,KAAnB,EAA0B3B,WAAW4B,GAArC,CAAlB,EAA4D;AAC1D,kBAAMC,YAAYL,UAAUM,OAA5B;AACA,kBAAMA,UAAUD,SAAhB;AACA,kBAAME,cAAcP,UAAUQ,SAA9B;AACA,kBAAMA,YAAYD,WAAlB;AACA,kBAAME,cAAcT,UAAUU,SAA9B;AACA,kBAAMA,YAAYD,WAAlB;AACA,kBAAME,WAAWnC,WAAWoC,mBAAX,CAA+BpC,WAAW4B,GAA1C,EAA+C,EAA/C,EAAmDG,WAAnD,EAAgEC,SAAhE,EAA2EH,SAA3E,EAAsFC,OAAtF,EAA+FG,WAA/F,EAA4GC,SAA5G,CAAjB;AACAR,oBAAMC,KAAN,GAAcQ,QAAd;AACD;AACF;AAd0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAe5D;AACD,aAAOxB,QAAP;AACD;;;;;;AAEH0B,OAAOC,OAAP,GAAiB;AACfpC,gBAAcA;AADC,CAAjB","file":"ParserPlugin.js","sourcesContent":["import * as _ from 'lodash';\nimport {ArgdownLexer} from '../ArgdownLexer.js';\nimport {ArgdownParser} from \"../ArgdownParser.js\";\nimport * as chevrotain from 'chevrotain';\n\nconst tokenMatcher = chevrotain.tokenMatcher;\n\nclass ParserPlugin{\n  set config(config){\n    let previousSettings = this.settings;\n    if(!previousSettings){\n      previousSettings = {\n      }\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);    \n  }\n  constructor(config){\n    this.name = \"ParserPlugin\";\n    this.config = config;\n    this.lexer = ArgdownLexer;\n    this.parser = ArgdownParser;    \n  }\n  run(request, response, logger){\n    if(!request.input){\n      return response;\n    }\n    \n    let lexResult = this.lexer.tokenize(request.input);\n    response.tokens = lexResult.tokens; \n    response.lexerErrors = lexResult.errors;\n\n    this.parser.input = lexResult.tokens;\n    response.ast = this.parser.argdown();\n    response.parserErrors = this.parser.errors;\n\n    if(response.lexerErrors && response.lexerErrors.length > 0){\n      logger.log(\"verbose\", response.lexerErrors);\n    }\n    if(response.parserErrors && response.parserErrors.length > 0){\n      // //add location if token is EOF\n      var lastToken = _.last(response.tokens);\n      for(let error of response.parserErrors){\n        if(error.token && tokenMatcher(error.token, chevrotain.EOF)){\n          const startLine = lastToken.endLine;\n          const endLine = startLine;\n          const startOffset = lastToken.endOffset;\n          const endOffset = startOffset;\n          const startColumn = lastToken.endColumn;\n          const endColumn = startColumn;\n          const newToken = chevrotain.createTokenInstance(chevrotain.EOF, \"\", startOffset, endOffset, startLine, endLine, startColumn, endColumn);\n          error.token = newToken;\n        }\n      }\n    }\n    return response;    \n  }\n}\nmodule.exports = {\n  ParserPlugin: ParserPlugin\n}\n"]}