{"version":3,"sources":["../../../src/plugins/ParserPlugin.js"],"names":["_","chevrotain","tokenMatcher","ParserPlugin","config","previousSettings","settings","defaultsDeep","name","lexer","parser","data","logger","input","lexResult","tokenize","tokens","lexerErrors","errors","ast","argdown","parserErrors","length","log","lastToken","last","error","token","EOF","startLine","endLine","startOffset","endOffset","startColumn","endColumn","newToken","createTokenInstance","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;AACZ;;AACA;;AACA;;IAAYC,U;;;;;;AAEZ,IAAMC,eAAeD,WAAWC,YAAhC;;IAEMC,Y;;;sBACOC,M,EAAO;AAChB,UAAIC,mBAAmB,KAAKC,QAA5B;AACA,UAAG,CAACD,gBAAJ,EAAqB;AACnBA,2BAAmB,EAAnB;AAED;AACD,WAAKC,QAAL,GAAgBN,EAAEO,YAAF,CAAe,EAAf,EAAmBH,MAAnB,EAA2BC,gBAA3B,CAAhB;AACD;;;AACD,wBAAYD,MAAZ,EAAmB;AAAA;;AACjB,SAAKI,IAAL,GAAY,cAAZ;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKK,KAAL;AACA,SAAKC,MAAL;AACD;;;;wBACGC,I,EAAMC,M,EAAO;AACf,UAAG,CAACD,KAAKE,KAAT,EAAe;AACb,eAAOF,IAAP;AACD;;AAED,UAAIG,YAAY,KAAKL,KAAL,CAAWM,QAAX,CAAoBJ,KAAKE,KAAzB,CAAhB;AACAF,WAAKK,MAAL,GAAcF,UAAUE,MAAxB;AACAL,WAAKM,WAAL,GAAmBH,UAAUI,MAA7B;;AAEA,WAAKR,MAAL,CAAYG,KAAZ,GAAoBC,UAAUE,MAA9B;AACAL,WAAKQ,GAAL,GAAW,KAAKT,MAAL,CAAYU,OAAZ,EAAX;AACAT,WAAKU,YAAL,GAAoB,KAAKX,MAAL,CAAYQ,MAAhC;;AAEA,UAAGP,KAAKM,WAAL,IAAoBN,KAAKM,WAAL,CAAiBK,MAAjB,GAA0B,CAAjD,EAAmD;AACjDV,eAAOW,GAAP,CAAW,SAAX,EAAsBZ,KAAKM,WAA3B;AACD;AACD,UAAGN,KAAKU,YAAL,IAAqBV,KAAKU,YAAL,CAAkBC,MAAlB,GAA2B,CAAnD,EAAqD;AACnD;AACA,YAAIE,YAAYxB,EAAEyB,IAAF,CAAOd,KAAKK,MAAZ,CAAhB;AAFmD;AAAA;AAAA;;AAAA;AAGnD,+BAAiBL,KAAKU,YAAtB,8HAAmC;AAAA,gBAA3BK,KAA2B;;AACjC,gBAAGA,MAAMC,KAAN,IAAezB,aAAawB,MAAMC,KAAnB,EAA0B1B,WAAW2B,GAArC,CAAlB,EAA4D;AAC1D,kBAAMC,YAAYL,UAAUM,OAA5B;AACA,kBAAMA,UAAUD,SAAhB;AACA,kBAAME,cAAcP,UAAUQ,SAA9B;AACA,kBAAMA,YAAYD,WAAlB;AACA,kBAAME,cAAcT,UAAUU,SAA9B;AACA,kBAAMA,YAAYD,WAAlB;AACA,kBAAME,WAAWlC,WAAWmC,mBAAX,CAA+BnC,WAAW2B,GAA1C,EAA+C,EAA/C,EAAmDG,WAAnD,EAAgEC,SAAhE,EAA2EH,SAA3E,EAAsFC,OAAtF,EAA+FG,WAA/F,EAA4GC,SAA5G,CAAjB;AACAR,oBAAMC,KAAN,GAAcQ,QAAd;AACD;AACF;AACD;AAfmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBpD;AACD,aAAOxB,IAAP;AACD;;;;;;AAEH0B,OAAOC,OAAP,GAAiB;AACfnC,gBAAcA;AADC,CAAjB","file":"ParserPlugin.js","sourcesContent":["import * as _ from 'lodash';\nimport {ArgdownLexer} from '../ArgdownLexer.js';\nimport {ArgdownParser} from \"../ArgdownParser.js\";\nimport * as chevrotain from 'chevrotain';\n\nconst tokenMatcher = chevrotain.tokenMatcher;\n\nclass ParserPlugin{\n  set config(config){\n    let previousSettings = this.settings;\n    if(!previousSettings){\n      previousSettings = {\n      }\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);    \n  }\n  constructor(config){\n    this.name = \"ParserPlugin\";\n    this.config = config;\n    this.lexer = ArgdownLexer;\n    this.parser = ArgdownParser;    \n  }\n  run(data, logger){\n    if(!data.input){\n      return data;\n    }\n    \n    let lexResult = this.lexer.tokenize(data.input);\n    data.tokens = lexResult.tokens; \n    data.lexerErrors = lexResult.errors;\n\n    this.parser.input = lexResult.tokens;\n    data.ast = this.parser.argdown();\n    data.parserErrors = this.parser.errors;\n\n    if(data.lexerErrors && data.lexerErrors.length > 0){\n      logger.log(\"verbose\", data.lexerErrors);\n    }\n    if(data.parserErrors && data.parserErrors.length > 0){\n      // //add location if token is EOF\n      var lastToken = _.last(data.tokens);\n      for(let error of data.parserErrors){\n        if(error.token && tokenMatcher(error.token, chevrotain.EOF)){\n          const startLine = lastToken.endLine;\n          const endLine = startLine;\n          const startOffset = lastToken.endOffset;\n          const endOffset = startOffset;\n          const startColumn = lastToken.endColumn;\n          const endColumn = startColumn;\n          const newToken = chevrotain.createTokenInstance(chevrotain.EOF, \"\", startOffset, endOffset, startLine, endLine, startColumn, endColumn);\n          error.token = newToken;\n        }\n      }\n      // logger.log(\"verbose\", data.parserErrors);\n    }\n    return data;    \n  }\n}\nmodule.exports = {\n  ParserPlugin: ParserPlugin\n}\n"]}