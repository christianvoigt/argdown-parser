{"version":3,"sources":["../../../src/plugins/MapMaker.js"],"names":["MapMaker","name","data","map","makeMap","argumentNodes","statementNodes","relations","nodeCount","statementKeys","Object","keys","statements","statementKey","equivalenceClass","length","isUsedAsThesis","isUsedInArgument","id","type","title","relation","from","push","argumentKeys","arguments","statementRoles","argumentKey","argument","pcs","statement","roles","premiseIn","conclusionIn","role","froms","tos","fromNode","toNode","to","module","exports"],"mappings":"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","file":"MapMaker.js","sourcesContent":["import {Argument} from '../model/Argument.js';\n\nclass MapMaker{\n  constructor(){\n    this.name = \"MapMaker\";\n  }\n  run(data){\n    data.map = this.makeMap(data);\n    return data;\n  }\n  makeMap(data){\n    let map = {argumentNodes: {}, statementNodes: {}, relations: []};\n    let nodeCount = 0;\n    let relations = [];\n\n    //find all statement classes that should be inserted as nodes\n    let statementKeys = Object.keys(data.statements);\n    for(let statementKey of statementKeys){\n      let equivalenceClass = data.statements[statementKey];\n      if(equivalenceClass.relations.length > 0 && (equivalenceClass.isUsedAsThesis || !equivalenceClass.isUsedInArgument)){\n        let id = \"n\"+nodeCount;\n        nodeCount++;\n        map.statementNodes[statementKey] = {type:\"statement\", title:statementKey, id:id};\n\n        if(!equivalenceClass.isUsedInArgument){ //if the statement is used in an argument, the relations get added in the next round\n          //add all relations outgoing from this statement class, if it is not added by an argument\n          for(let relation of equivalenceClass.relations){\n            if(relation.from == equivalenceClass){\n              relations.push(relation);\n            }\n          }\n        }\n      }\n    }\n\n    let argumentKeys = Object.keys(data.arguments);\n    let statementRoles = {}; //a dictionary mapping statement titles to {premiseIn:[nodeId], conclusionIn:[nodeId]} objects\n\n    for(let argumentKey of argumentKeys){\n      let argument = data.arguments[argumentKey];\n      let id = \"n\"+nodeCount;\n      nodeCount++;\n      map.argumentNodes[argumentKey] = {type:\"argument\", title:argument.title, id:id};\n      for(let relation of argument.relations){\n        if(relation.from == argument){\n          relations.push(relation);\n        }\n      }\n      for(let statement of argument.pcs){\n        let roles = statementRoles[statement.title];\n        if(!roles){\n          roles = {premiseIn:[], conclusionIn:[]};\n          statementRoles[statement.title] = roles;\n        }\n        if(statement.role == \"premise\"){\n          roles.premiseIn.push(map.argumentNodes[argumentKey]);\n        }else if(statement.role == \"conclusion\"){\n          roles.conclusionIn.push(map.argumentNodes[argumentKey]);\n        }\n        let equivalenceClass = data.statements[statement.title];\n        for(let relation of equivalenceClass.relations){\n          if(statement.role == \"conclusion\" && relation.from == equivalenceClass){\n            relations.push(relation);\n          }\n        }\n      }\n    }\n\n    for(let relation of relations){\n      let froms = [];\n      let tos = [];\n\n      let fromNode;\n      if(relation.from instanceof Argument){\n        fromNode = map.argumentNodes[relation.from.title];\n      }else{\n        fromNode = map.statementNodes[relation.from.title];\n      }\n      if(!fromNode){ //fromNode has to be a statement\n        let roles = statementRoles[relation.from.title];\n        froms = roles.conclusionIn;\n      }else{\n        froms.push(fromNode);\n      }\n\n      let toNode;\n      if(relation.to instanceof Argument){\n        toNode = map.argumentNodes[relation.to.title];\n      }else{\n        toNode = map.statementNodes[relation.to.title];\n      }\n      if(!toNode){ //fromNode has to be a statement\n        let roles = statementRoles[relation.to.title];\n        tos = roles.premiseIn;\n      }else{\n        tos.push(toNode);\n      }\n\n      for(let from of froms){\n        for(let to of tos){\n          map.relations.push({from:from, to:to, type:relation.type});\n        }\n      }\n    }\n    return map;\n  }\n}\nmodule.exports = {\n  MapMaker: MapMaker\n}\n"]}