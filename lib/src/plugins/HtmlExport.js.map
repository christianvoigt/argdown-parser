{"version":3,"sources":["../../../src/plugins/HtmlExport.js"],"names":["_","HtmlExport","config","headless","cssFile","title","lang","charset","name","$","argdownListeners","argdownEntry","request","response","html","reset","htmlIds","settings","head","argdownExit","statementEntry","node","classes","equivalenceClass","tags","getCssClassesFromTags","sortedTags","statementExit","StatementDefinitionEntry","parentNode","htmlId","getHtmlId","statement","escapeHtml","StatementReferenceEntry","StatementMentionEntry","statements","trailingWhitespace","argumentReferenceEntry","argument","argumentDefinitionEntry","ArgumentMentionEntry","arguments","argumentDefinitionExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","incomingUndercutEntry","incomingUndercutExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","outgoingUndercutEntry","outgoingUndercutExit","contradictionEntry","contradictionExit","relationsEntry","relationsExit","orderedListEntry","orderedListExit","unorderedListEntry","unorderedListExit","orderedListItemEntry","orderedListItemExit","unorderedListItemEntry","unorderedListItemExit","headingEntry","level","replace","text","headingExit","freestyleTextEntry","boldEntry","boldExit","italicEntry","italicExit","LinkEntry","url","TagEntry","tag","argumentEntry","argumentExit","argumentStatementEntry","role","inference","metadataKeys","Object","keys","metaData","length","inferenceRules","i","inferenceRule","key","isString","j","value","statementNr","argumentStatementExit","type","ignoreDuplicates","id","originalId","tagsDictionary","index","tagData","cssClass","str","find","RegExp","unsafe","module","exports"],"mappings":"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","file":"HtmlExport.js","sourcesContent":["import * as _ from \"lodash\";\nimport util from \"./util.js\";\nimport { PluginWithSettings } from \"./PluginWithSettings.js\";\n\nclass HtmlExport extends PluginWithSettings {\n    constructor(config) {\n        super({\n            headless: false,\n            cssFile: \"./argdown.css\",\n            title: \"Argdown Document\",\n            lang: \"en\",\n            charset: \"utf8\"\n        }, config);\n        this.name = \"HtmlExport\";\n        let $ = this;\n        this.argdownListeners = {\n            argdownEntry: (request, response) => {\n                if (request.html) {\n                    $.reset(request.html);\n                }\n\n                response.html = \"\";\n                response.htmlIds = {};\n                if (!$.settings.headless) {\n                    let head = $.settings.head;\n                    if (!head) {\n                        head =\n                            \"<!doctype html>\\n\\n\" +\n                            \"<html lang='\" +\n                            $.settings.lang +\n                            \"'>\\n\" +\n                            \"<head>\\n\" +\n                            \"<meta charset='\" +\n                            $.settings.charset +\n                            \"'>\\n\" +\n                            \"<title>\" +\n                            $.settings.title +\n                            \"</title>\\n\";\n                        if ($.settings.cssFile) {\n                            head += \"<link rel='stylesheet' href='\" + $.settings.cssFile + \"'>\\n\";\n                        }\n                        head += \"</head>\";\n                    }\n                    response.html += head;\n                    response.html += \"<body>\";\n                }\n                response.html += \"<div class='argdown'>\";\n            },\n            argdownExit: (request, response) => {\n                response.html += \"</div>\";\n                if (!$.settings.headless) {\n                    response.html += \"</body></html>\";\n                }\n            },\n            statementEntry: (request, response, node) => {\n                let classes = \"statement\";\n                if (node.equivalenceClass.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.equivalenceClass.sortedTags);\n                }\n                response.html += \"<div class='\" + classes + \"'>\";\n            },\n            statementExit: (request, response) => (response.html += \"</div>\"),\n            StatementDefinitionEntry: (request, response, node, parentNode) => {\n                let htmlId = $.getHtmlId(response, \"statement\", node.statement.title);\n                response.htmlIds[htmlId] = node.statement;\n                let classes = \"definition statement-definition definiendum\";\n                if (parentNode.equivalenceClass && parentNode.equivalenceClass.sortedTags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, parentNode.equivalenceClass.sortedTags);\n                }\n                response.html +=\n                    \"<span id='\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'>[<span class='title statement-title'>\" +\n                    $.escapeHtml(node.statement.title) +\n                    \"</span>]: </span>\";\n            },\n            StatementReferenceEntry: (request, response, node, parentNode) => {\n                let htmlId = $.getHtmlId(response, \"statement\", node.statement.title, true);\n                let classes = \"reference statement-reference\";\n                if (parentNode.equivalenceClass && parentNode.equivalenceClass.sortedTags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, parentNode.equivalenceClass.sortedTags);\n                }\n                response.html +=\n                    \"<a href='#\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'>[<span class='title statement-title'>\" +\n                    $.escapeHtml(node.statement.title) +\n                    \"</span>] </a>\";\n            },\n            StatementMentionEntry: (request, response, node) => {\n                const equivalenceClass = response.statements[node.title];\n                let classes = \"mention statement-mention\";\n                if (equivalenceClass.sortedTags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, equivalenceClass.sortedTags);\n                }\n                let htmlId = $.getHtmlId(response, \"statement\", node.title, true);\n                response.html +=\n                    \"<a href='#\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'>@[<span class='title statement-title'>\" +\n                    $.escapeHtml(node.title) +\n                    \"</span>]</a>\" +\n                    node.trailingWhitespace;\n            },\n            argumentReferenceEntry: (request, response, node) => {\n                let htmlId = $.getHtmlId(response, \"argument\", node.argument.title, true);\n                let classes = \"reference argument-reference\";\n                if (node.argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n                }\n                response.html +=\n                    \"<a href='#\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'>&lt;<span class='title argument-title'>\" +\n                    $.escapeHtml(node.argument.title) +\n                    \"</span>&gt; </a>\";\n            },\n            argumentDefinitionEntry: (request, response, node) => {\n                let htmlId = $.getHtmlId(response, \"argument\", node.argument.title);\n                response.htmlIds[htmlId] = node.argument;\n                let classes = \"definition argument-definition\";\n                if (node.argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n                }\n                response.html +=\n                    \"<div id='\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'><span class='definiendum argument-definiendum'>&lt;<span class='title argument-title'>\" +\n                    $.escapeHtml(node.argument.title) +\n                    \"</span>&gt;: </span><span class='argument-definiens definiens description'>\";\n            },\n            ArgumentMentionEntry: (request, response, node) => {\n                let htmlId = $.getHtmlId(response, \"argument\", node.title, true);\n                let classes = \"mention argument-mention\";\n                const argument = response.arguments[node.title];\n                if (argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, argument.sortedTags);\n                }\n                response.html +=\n                    \"<a href='#\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'>@&lt;<span class='title argument-title'>\" +\n                    $.escapeHtml(node.title) +\n                    \"</span>&gt;</a>\" +\n                    node.trailingWhitespace;\n            },\n            argumentDefinitionExit: (request, response) => (response.html += \"</span></div>\"),\n            incomingSupportEntry: (request, response) => {\n                response.html +=\n                    \"<div class='incoming support relation'><div class='incoming support relation-symbol'><span>+&gt;</span></div>\";\n            },\n            incomingSupportExit: (request, response) => (response.html += \"</div>\"),\n            incomingAttackEntry: (request, response) => {\n                response.html +=\n                    \"<div class='incoming attack relation'><div class='incoming attack relation-symbol'><span>-&gt;</span></div>\";\n            },\n            incomingAttackExit: (request, response) => (response.html += \"</div>\"),\n            incomingUndercutEntry: (request, response) => {\n                response.html +=\n                    \"<div class='incoming undercut relation'><div class='incoming undercut relation-symbol'><span>_&gt;</span></div>\";\n            },\n            incomingUndercutExit: (request, response) => (response.html += \"</div>\"),\n            outgoingSupportEntry: (request, response) => {\n                response.html +=\n                    \"<div class='outgoing support relation'><div class='outgoing support relation-symbol'><span>+</span></div>\";\n            },\n            outgoingSupportExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            outgoingAttackEntry: (request, response) => {\n                response.html +=\n                    \"<div class='outgoing attack relation'><div class='outgoing attack relation-symbol'><span>-</span></div>\";\n            },\n            outgoingAttackExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            outgoingUndercutEntry: (request, response) => {\n                response.html +=\n                    \"<div class='outgoing undercut relation'><div class='outgoing undercut relation-symbol'><span>&lt;_</span></div>\";\n            },\n            outgoingUndercutExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            contradictionEntry: (request, response) => {\n                response.html +=\n                    \"<div class='contradiction relation'><div class='contradiction relation-symbol'><span>&gt;&lt;</span></div>\";\n            },\n            contradictionExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            relationsEntry: (request, response) => {\n                response.html += \"<div class='relations'>\";\n            },\n            relationsExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            orderedListEntry: (request, response) => (response.html += \"<ol>\"),\n            orderedListExit: (request, response) => (response.html += \"</ol>\"),\n            unorderedListEntry: (request, response) => (response.html += \"<ul>\"),\n            unorderedListExit: (request, response) => (response.html += \"</ul>\"),\n            orderedListItemEntry: (request, response) => (response.html += \"<li>\"),\n            orderedListItemExit: (request, response) => (response.html += \"</li>\"),\n            unorderedListItemEntry: (request, response) => (response.html += \"<li>\"),\n            unorderedListItemExit: (request, response) => (response.html += \"</li>\"),\n            headingEntry: (request, response, node) => {\n                if (node.level == 1) {\n                    if ($.settings.title == \"Argdown Document\") {\n                        response.html = response.html.replace(\n                            \"<title>Argdown Document</title>\",\n                            \"<title>\" + $.escapeHtml(node.text) + \"</title>\"\n                        );\n                    }\n                }\n                let htmlId = $.getHtmlId(response, \"heading\", node.text);\n                response.htmlIds[htmlId] = node;\n                response.html += \"<h\" + node.level + \" id='\" + htmlId + \"'>\";\n            },\n            headingExit: (request, response, node) => (response.html += \"</h\" + node.level + \">\"),\n            freestyleTextEntry: (request, response, node, parentNode) => {\n                if (parentNode.name != \"inferenceRules\" && parentNode.name != \"metadataStatement\") {\n                    response.html += $.escapeHtml(node.text);\n                }\n            },\n            boldEntry: (request, response) => (response.html += \"<b>\"),\n            boldExit: (request, response, node) => (response.html += \"</b>\" + node.trailingWhitespace),\n            italicEntry: (request, response) => (response.html += \"<i>\"),\n            italicExit: (request, response, node) => (response.html += \"</i>\" + node.trailingWhitespace),\n            LinkEntry: (request, response, node) =>\n                (response.html += \"<a href='\" + node.url + \"'>\" + node.text + \"</a>\" + node.trailingWhitespace),\n            TagEntry: (request, response, node) => {\n                if (node.text) {\n                    response.html +=\n                        \"<span class='tag \" +\n                        $.getCssClassesFromTags(response, [node.tag]) +\n                        \"'>\" +\n                        $.escapeHtml(node.text) +\n                        \"</span>\";\n                }\n            },\n            argumentEntry: (request, response, node) => {\n                let classes = \"argument\";\n                if (node.argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n                }\n                response.html += \"<div class='\" + classes + \"'>\";\n            },\n            argumentExit: (request, response) => (response.html += \"</div>\"),\n            argumentStatementEntry: (request, response, node) => {\n                if (node.statement.role == \"conclusion\") {\n                    let inference = node.statement.inference;\n                    let metadataKeys = Object.keys(inference.metaData);\n                    if (metadataKeys.length == 0 && inference.inferenceRules.length == 0) {\n                        response.html += \"<div class='inference'>\";\n                    } else {\n                        response.html += \"<div class='inference with-data'>\";\n                    }\n\n                    response.html += \"<span class='inference-rules'>\";\n                    if (inference.inferenceRules.length > 0) {\n                        let i = 0;\n                        for (let inferenceRule of inference.inferenceRules) {\n                            if (i > 0) response.html += \", \";\n                            response.html += \"<span class='inference-rule'>\" + inferenceRule + \"</span>\";\n                            i++;\n                        }\n                        response.html += \"</span> \";\n                    }\n                    if (metadataKeys.length > 0) {\n                        response.html += \"<span class='metadata'>(\";\n                        for (let i = 0; i < metadataKeys.length; i++) {\n                            let key = metadataKeys[i];\n                            response.html += \"<span class='meta-data-statement'>\";\n                            response.html += \"<span class='meta-data-key'>\" + key + \": </span>\";\n                            if (_.isString(inference.metaData[key])) {\n                                response.html +=\n                                    \"<span class='meta-data-value'>\" +\n                                    $.escapeHtml(inference.metaData[key]) +\n                                    \"</span>\";\n                            } else {\n                                let j = 0;\n                                for (let value of inference.metaData[key]) {\n                                    if (j > 0) response.html += \", \";\n                                    response.html += \"<span class='meta-data-value'>\" + $.escapeHtml(value) + \"</span>\";\n                                    j++;\n                                }\n                            }\n                            if (i < metadataKeys.length - 1) response.html += \"; \";\n                            response.html += \"</span>\";\n                        }\n                        response.html += \" )</span>\";\n                    }\n\n                    response.html += \"</div>\";\n                }\n                response.html +=\n                    \"<div class='\" +\n                    node.statement.role +\n                    \" argument-statement'><div class='statement-nr'>(<span>\" +\n                    node.statementNr +\n                    \"</span>)</div>\";\n            },\n            argumentStatementExit: (request, response) => (response.html += \"</div>\")\n        };\n    }\n    getHtmlId(response, type, title, ignoreDuplicates) {\n        let id = type + \"-\" + title;\n        id = util.getHtmlId(id);\n        if (!ignoreDuplicates) {\n            let originalId = id;\n            let i = 1;\n            while (response.htmlIds && response.htmlIds[id]) {\n                i++;\n                id = originalId + \"-occurrence-\" + i;\n            }\n        }\n        return id;\n    }\n    getCssClassesFromTags(response, tags) {\n        let classes = \"\";\n        if (!tags || !response.tagsDictionary) {\n            return classes;\n        }\n        let index = 0;\n        for (let tag of tags) {\n            if (index > 0) {\n                classes += \" \";\n            }\n            index++;\n            const tagData = response.tagsDictionary[tag];\n            classes += tagData.cssClass;\n        }\n        return classes;\n    }\n    replaceAll(str, find, replace) {\n        return str.replace(new RegExp(find, \"g\"), replace);\n    }\n    escapeHtml(unsafe) {\n        return unsafe\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n    escapeRegExp(str) {\n        return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n    }\n}\nmodule.exports = {\n    HtmlExport: HtmlExport\n};\n"]}