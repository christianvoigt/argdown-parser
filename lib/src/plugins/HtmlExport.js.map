{"version":3,"sources":["../../../src/plugins/HtmlExport.js"],"names":["_","HtmlExport","request","settings","name","defaultsDeep","getSettings","defaults","config","headless","cssFile","title","lang","charset","allowFileProtocol","validateLink","normalizeLink","$","argdownListeners","argdownEntry","response","html","htmlIds","head","argdownExit","statementEntry","node","classes","equivalenceClass","tags","getCssClassesFromTags","sortedTags","startLine","statementExit","StatementDefinitionEntry","parentNode","htmlId","getHtmlId","statement","escape","StatementReferenceEntry","StatementMentionEntry","statements","trailingWhitespace","argumentReferenceEntry","argument","argumentDefinitionEntry","ArgumentMentionEntry","arguments","argumentDefinitionExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","incomingUndercutEntry","incomingUndercutExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","outgoingUndercutEntry","outgoingUndercutExit","contradictionEntry","contradictionExit","relationsEntry","relationsExit","orderedListEntry","orderedListExit","unorderedListEntry","unorderedListExit","orderedListItemEntry","orderedListItemExit","unorderedListItemEntry","unorderedListItemExit","headingEntry","level","replace","text","headingExit","freestyleTextEntry","boldEntry","boldExit","italicEntry","italicExit","LinkEntry","linkUrl","url","linkText","TagEntry","tag","argumentEntry","argumentExit","argumentStatementEntry","role","inference","metadataKeys","Object","keys","metaData","length","inferenceRules","i","inferenceRule","key","isString","j","value","statementNr","argumentStatementExit","tagsDictionary","index","tagData","cssClass","module","exports"],"mappings":"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","file":"HtmlExport.js","sourcesContent":["import * as _ from \"lodash\";\nimport utils from \"../utils.js\";\n\nclass HtmlExport {\n    getSettings(request) {\n        let settings = request[\"html\"] || request[this.name];\n        if (!settings) {\n            settings = {};\n            request[\"html\"] = settings;\n        }\n        return settings;\n    }\n    prepare(request) {\n        _.defaultsDeep(this.getSettings(request), this.defaults);\n    }\n    constructor(config) {\n        this.name = \"HtmlExport\";\n        this.defaults = _.defaultsDeep({}, config, {\n            headless: false,\n            cssFile: \"./argdown.css\",\n            title: \"Argdown Document\",\n            lang: \"en\",\n            charset: \"utf8\",\n            allowFileProtocol: false,\n            validateLink: utils.validateLink,\n            normalizeLink: utils.normalizeLink\n        });\n        let $ = this;\n        this.argdownListeners = {\n            argdownEntry: (request, response) => {\n                response.html = \"\";\n                response.htmlIds = {};\n                let settings = $.getSettings(request);\n                if (!settings.headless) {\n                    let head = settings.head;\n                    if (!head) {\n                        head =\n                            `<!doctype html><html lang=\"${settings.lang}\"><head><meta charset=\"${settings.charset}\"><title>${settings.title}</title>`;\n                        if (settings.cssFile) {\n                            head += `<link rel=\"stylesheet\" href=${settings.cssFile}\">`;\n                        }\n                        head += \"</head>\";\n                    }\n                    response.html += head;\n                    response.html += \"<body>\";\n                }\n                response.html += `<div class=\"argdown\">`;\n            },\n            argdownExit: (request, response) => {\n                let settings = $.getSettings(request);\n                // Remove htmlIds, because other plugins might create their own ones. \n                // Ids only need to be unique within one document, not across documents.\n                response.htmlIds = null;\n                response.html += \"</div>\";\n                if (!settings.headless) {\n                    response.html += \"</body></html>\";\n                }\n            },\n            statementEntry: (request, response, node) => {\n                let classes = \"statement\";\n                if (node.equivalenceClass.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.equivalenceClass.sortedTags);\n                }\n                response.html += `<div data-line=\"has-line ${node.startLine}\" class=\"${classes}\">`;\n            },\n            statementExit: (request, response) => (response.html += \"</div>\"),\n            StatementDefinitionEntry: (request, response, node, parentNode) => {\n                let htmlId = utils.getHtmlId(\"statement\", node.statement.title, response.htmlIds);\n                response.htmlIds[htmlId] = node.statement;\n                let classes = \"definition statement-definition definiendum\";\n                if (parentNode.equivalenceClass && parentNode.equivalenceClass.sortedTags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, parentNode.equivalenceClass.sortedTags);\n                }\n                response.html += `<span id=${htmlId}\" class=\"${classes}\">[<span class=\"title statement-title\">${_.escape(node.statement.title)}</span>]: </span>`;\n            },\n            StatementReferenceEntry: (request, response, node, parentNode) => {\n                let htmlId = utils.getHtmlId(\"statement\", node.statement.title);\n                let classes = \"reference statement-reference\";\n                if (parentNode.equivalenceClass && parentNode.equivalenceClass.sortedTags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, parentNode.equivalenceClass.sortedTags);\n                }\n                response.html += `<a href=\"#${htmlId}\" class=\"${classes}\">[<span class=\"title statement-title\">${_.escape(node.statement.title)}</span>] </a>`;\n            },\n            StatementMentionEntry: (request, response, node) => {\n                const equivalenceClass = response.statements[node.title];\n                let classes = \"mention statement-mention\";\n                if (equivalenceClass.sortedTags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, equivalenceClass.sortedTags);\n                }\n                let htmlId = utils.getHtmlId(\"statement\", node.title);\n                response.html += `<a href=\"#${htmlId}\" class=\"${classes}\">@[<span class=\"title statement-title\">${_.escape(node.title)}</span>]</a>${node.trailingWhitespace}`;\n            },\n            argumentReferenceEntry: (request, response, node) => {\n                let htmlId = utils.getHtmlId(\"argument\", node.argument.title);\n                let classes = \"reference argument-reference\";\n                if (node.argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n                }\n                response.html +=\n                    `<a href=\"#${htmlId}\" data-line=\"${node.startLine}\" class=\"has-line ${classes}\">&lt;<span class=\"title argument-title\">${_.escape(node.argument.title)}</span>&gt; </a>`;\n            },\n            argumentDefinitionEntry: (request, response, node) => {\n                let htmlId = utils.getHtmlId(\"argument\", node.argument.title, response.htmlIds);\n                response.htmlIds[htmlId] = node.argument;\n                let classes = \"definition argument-definition\";\n                if (node.argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n                }\n                response.html +=\n                    `<div id=\"${htmlId}\" data-line=\"${node.startLine}\" class=\"has-line ${classes}\"><span class=\"definiendum argument-definiendum\">&lt;<span class=\"title argument-title\">${_.escape(node.argument.title)}</span>&gt;: </span><span class=\"argument-definiens definiens description\">`;\n            },\n            ArgumentMentionEntry: (request, response, node) => {\n                let htmlId = utils.getHtmlId(\"argument\", node.title);\n                let classes = \"mention argument-mention\";\n                const argument = response.arguments[node.title];\n                if (argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, argument.sortedTags);\n                }\n                response.html += `<a href=\"#${htmlId}\" class=\"${classes}\">@&lt;<span class=\"title argument-title\">${_.escape(node.title)}</span>&gt;</a>${node.trailingWhitespace}`;\n            },\n            argumentDefinitionExit: (request, response) => (response.html += \"</span></div>\"),\n            incomingSupportEntry: (request, response, node) => {\n                response.html +=\n                    `<div data-line=\"${node.startLine}\" class=\"has-line incoming support relation\"><div class=\"incoming support relation-symbol\"><span>+&gt;</span></div>`;\n            },\n            incomingSupportExit: (request, response) => (response.html += \"</div>\"),\n            incomingAttackEntry: (request, response, node) => {\n                response.html +=\n                    `<div data-line=\"${node.startLine}\" class=\"has-line incoming attack relation\"><div class=\"incoming attack relation-symbol\"><span>-&gt;</span></div>`;\n            },\n            incomingAttackExit: (request, response) => (response.html += \"</div>\"),\n            incomingUndercutEntry: (request, response, node) => {\n                response.html +=\n                    `<div data-line=\"${node.startLine}\" class=\"has-line incoming undercut relation\"><div class=\"incoming undercut relation-symbol\"><span>_&gt;</span></div>`;\n            },\n            incomingUndercutExit: (request, response) => (response.html += \"</div>\"),\n            outgoingSupportEntry: (request, response, node) => {\n                response.html +=\n                    `<div data-line=\"${node.startLine}\" class=\"has-line outgoing support relation\"><div class=\"outgoing support relation-symbol\"><span>+</span></div>`;\n            },\n            outgoingSupportExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            outgoingAttackEntry: (request, response, node) => {\n                response.html +=\n                    `<div data-line=\"${node.startLine}\" class=\"has-line outgoing attack relation\"><div class=\"outgoing attack relation-symbol\"><span>-</span></div>`;\n            },\n            outgoingAttackExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            outgoingUndercutEntry: (request, response, node) => {\n                response.html +=\n                    `<div data-line=\"${node.startLine}\" class=\"has-line outgoing undercut relation\"><div class=\"outgoing undercut relation-symbol\"><span>&lt;_</span></div>`;\n            },\n            outgoingUndercutExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            contradictionEntry: (request, response, node) => {\n                response.html +=\n                    `<div data-line=\"${node.startLine}\" class=\"has-line contradiction relation\"><div class=\"contradiction relation-symbol\"><span>&gt;&lt;</span></div>`;\n            },\n            contradictionExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            relationsEntry: (request, response) => {\n                response.html += `<div class=\"relations\">`;\n            },\n            relationsExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            orderedListEntry: (request, response) => (response.html += \"<ol>\"),\n            orderedListExit: (request, response) => (response.html += \"</ol>\"),\n            unorderedListEntry: (request, response) => (response.html += \"<ul>\"),\n            unorderedListExit: (request, response) => (response.html += \"</ul>\"),\n            orderedListItemEntry: (request, response, node) => (response.html += `<li data-line=\"${node.startLine}\" class=\"has-line\">`),\n            orderedListItemExit: (request, response) => (response.html += \"</li>\"),\n            unorderedListItemEntry: (request, response, node) => (response.html += `<li data-line=\"${node.startLine}\" class=\"has-line\">`),\n            unorderedListItemExit: (request, response) => (response.html += \"</li>\"),\n            headingEntry: (request, response, node) => {\n                let settings = $.getSettings(request);\n                if (node.level == 1) {\n                    if (settings.title == \"Argdown Document\") {\n                        response.html = response.html.replace(\n                            \"<title>Argdown Document</title>\",\n                            \"<title>\" + _.escape(node.text) + \"</title>\"\n                        );\n                    }\n                }\n                let htmlId = utils.getHtmlId(\"heading\", node.text, response.htmlIds);\n                response.htmlIds[htmlId] = node;\n                response.html += `<h${node.level} data-line=\"${node.startLine}\" id=\"${htmlId}\" class=\"has-line heading\">`;\n            },\n            headingExit: (request, response, node) => (response.html += \"</h\" + node.level + \">\"),\n            freestyleTextEntry: (request, response, node, parentNode) => {\n                if (parentNode.name != \"inferenceRules\" && parentNode.name != \"metadataStatement\") {\n                    response.html += _.escape(node.text);\n                }\n            },\n            boldEntry: (request, response) => (response.html += \"<b>\"),\n            boldExit: (request, response, node) => (response.html += \"</b>\" + node.trailingWhitespace),\n            italicEntry: (request, response) => (response.html += \"<i>\"),\n            italicExit: (request, response, node) => (response.html += \"</i>\" + node.trailingWhitespace),\n            LinkEntry: (request, response, node) => {\n                let settings = $.getSettings(request);\n                let linkUrl = settings.normalizeLink(node.url);\n                let linkText = node.text;\n                if(!settings.validateLink(linkUrl, settings.allowFileProtocol)){\n                    linkUrl = \"\";\n                    linkText = \"removed insecure url.\";\n                }\n                response.html += `<a href=\"${linkUrl}\">${linkText}</a>${node.trailingWhitespace}`;\n            },\n            TagEntry: (request, response, node) => {\n                if (node.text) {\n                    response.html += `<span class=\"tag ${$.getCssClassesFromTags(response, [node.tag])}\">${_.escape(node.text)}</span>`;\n                }\n            },\n            argumentEntry: (request, response, node) => {\n                let classes = \"argument\";\n                if (node.argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n                }\n                response.html += `<div class=\"${classes}\">`;\n            },\n            argumentExit: (request, response) => (response.html += \"</div>\"),\n            argumentStatementEntry: (request, response, node) => {\n                if (node.statement.role == \"conclusion\") {\n                    let inference = node.statement.inference;\n                    let metadataKeys = Object.keys(inference.metaData);\n                    if (metadataKeys.length == 0 && inference.inferenceRules.length == 0) {\n                        response.html += `<div data-line=\"${inference.startLine}\" class=\"has-line inference\">`;\n                    } else {\n                        response.html += `<div data-line=\"${inference.startLine}\" class=\"has-line inference with-data\">`;\n                    }\n\n                    response.html += `<span class=\"inference-rules\">`;\n                    if (inference.inferenceRules.length > 0) {\n                        let i = 0;\n                        for (let inferenceRule of inference.inferenceRules) {\n                            if (i > 0) response.html += \", \";\n                            response.html += `<span class=\"inference-rule\">${inferenceRule}</span>`;\n                            i++;\n                        }\n                        response.html += \"</span> \";\n                    }\n                    if (metadataKeys.length > 0) {\n                        response.html += `<span class=\"metadata\">(`;\n                        for (let i = 0; i < metadataKeys.length; i++) {\n                            let key = metadataKeys[i];\n                            response.html += `<span class=\"meta-data-statement\">`;\n                            response.html += `<span class=\"meta-data-key\">${key}: </span>`;\n                            if (_.isString(inference.metaData[key])) {\n                                response.html +=\n                                    `<span class=\"meta-data-value\">${_.escape(inference.metaData[key])}</span>`;\n                            } else {\n                                let j = 0;\n                                for (let value of inference.metaData[key]) {\n                                    if (j > 0) response.html += \", \";\n                                    response.html += `<span class=\"meta-data-value\">${_.escape(value)}</span>`;\n                                    j++;\n                                }\n                            }\n                            if (i < metadataKeys.length - 1) response.html += \"; \";\n                            response.html += \"</span>\";\n                        }\n                        response.html += \" )</span>\";\n                    }\n\n                    response.html += \"</div>\";\n                }\n                response.html +=\n                    `<div data-line=\"${node.startLine}\" class=\"has-line ${node.statement.role} argument-statement\"><div class=\"statement-nr\">(<span>${node.statementNr}</span>)</div>`;\n            },\n            argumentStatementExit: (request, response) => (response.html += \"</div>\")\n        };\n    }\n    getCssClassesFromTags(response, tags) {\n        let classes = \"\";\n        if (!tags || !response.tagsDictionary) {\n            return classes;\n        }\n        let index = 0;\n        for (let tag of tags) {\n            if (index > 0) {\n                classes += \" \";\n            }\n            index++;\n            const tagData = response.tagsDictionary[tag];\n            classes += tagData.cssClass;\n        }\n        return classes;\n    }\n}\nmodule.exports = {\n    HtmlExport: HtmlExport\n};\n"]}