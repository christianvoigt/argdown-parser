{"version":3,"sources":["../../../src/plugins/HtmlExport.js"],"names":["_","HtmlExport","request","settings","name","defaultsDeep","getSettings","defaults","config","headless","cssFile","title","lang","charset","allowFileProtocol","validateLink","normalizeLink","$","argdownListeners","argdownEntry","response","html","htmlIds","head","argdownExit","statementEntry","node","classes","equivalenceClass","tags","getCssClassesFromTags","sortedTags","startLine","statementExit","StatementDefinitionEntry","parentNode","htmlId","getHtmlId","statement","escape","StatementReferenceEntry","StatementMentionEntry","statements","trailingWhitespace","argumentReferenceEntry","argument","argumentDefinitionEntry","ArgumentMentionEntry","arguments","argumentDefinitionExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","incomingUndercutEntry","incomingUndercutExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","outgoingUndercutEntry","outgoingUndercutExit","contradictionEntry","contradictionExit","relationsEntry","relationsExit","orderedListEntry","orderedListExit","unorderedListEntry","unorderedListExit","orderedListItemEntry","orderedListItemExit","unorderedListItemEntry","unorderedListItemExit","headingEntry","level","replace","text","headingExit","freestyleTextEntry","boldEntry","boldExit","italicEntry","italicExit","LinkEntry","linkUrl","url","linkText","TagEntry","tag","argumentEntry","argumentExit","argumentStatementEntry","role","inference","metadataKeys","Object","keys","metaData","length","inferenceRules","i","inferenceRule","key","isString","j","value","statementNr","argumentStatementExit","tagsDictionary","index","tagData","cssClass","module","exports"],"mappings":"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","file":"HtmlExport.js","sourcesContent":["import * as _ from \"lodash\";\nimport utils from \"../utils.js\";\n\nclass HtmlExport {\n  getSettings(request) {\n    let settings = request[\"html\"] || request[this.name];\n    if (!settings) {\n      settings = {};\n      request[\"html\"] = settings;\n    }\n    return settings;\n  }\n  prepare(request) {\n    _.defaultsDeep(this.getSettings(request), this.defaults);\n  }\n  constructor(config) {\n    this.name = \"HtmlExport\";\n    this.defaults = _.defaultsDeep({}, config, {\n      headless: false,\n      cssFile: \"./argdown.css\",\n      title: \"Argdown Document\",\n      lang: \"en\",\n      charset: \"utf8\",\n      allowFileProtocol: false,\n      validateLink: utils.validateLink,\n      normalizeLink: utils.normalizeLink\n    });\n    let $ = this;\n    this.argdownListeners = {\n      argdownEntry: (request, response) => {\n        response.html = \"\";\n        response.htmlIds = {};\n        let settings = $.getSettings(request);\n        if (!settings.headless) {\n          let head = settings.head;\n          if (!head) {\n            head = `<!doctype html><html lang=\"${\n              settings.lang\n            }\"><head><meta charset=\"${settings.charset}\"><title>${\n              settings.title\n            }</title>`;\n            if (settings.cssFile) {\n              head += `<link rel=\"stylesheet\" href=${settings.cssFile}\">`;\n            }\n            head += \"</head>\";\n          }\n          response.html += head;\n          response.html += \"<body>\";\n        }\n        response.html += `<div class=\"argdown\">`;\n      },\n      argdownExit: (request, response) => {\n        let settings = $.getSettings(request);\n        // Remove htmlIds, because other plugins might create their own ones.\n        // Ids only need to be unique within one document, not across documents.\n        response.htmlIds = null;\n        response.html += \"</div>\";\n        if (!settings.headless) {\n          response.html += \"</body></html>\";\n        }\n      },\n      statementEntry: (request, response, node) => {\n        let classes = \"statement\";\n        if (node.equivalenceClass.tags) {\n          classes +=\n            \" \" +\n            $.getCssClassesFromTags(response, node.equivalenceClass.sortedTags);\n        }\n        response.html += `<div data-line=\"has-line ${\n          node.startLine\n        }\" class=\"${classes}\">`;\n      },\n      statementExit: (request, response) => (response.html += \"</div>\"),\n      StatementDefinitionEntry: (request, response, node, parentNode) => {\n        let htmlId = utils.getHtmlId(\"statement\", node.title, response.htmlIds);\n        response.htmlIds[htmlId] = parentNode.statement;\n        let classes = \"definition statement-definition definiendum\";\n        if (\n          parentNode.equivalenceClass &&\n          parentNode.equivalenceClass.sortedTags\n        ) {\n          classes +=\n            \" \" +\n            $.getCssClassesFromTags(\n              response,\n              parentNode.equivalenceClass.sortedTags\n            );\n        }\n        response.html += `<span id=${htmlId}\" class=\"${classes}\">[<span class=\"title statement-title\">${_.escape(\n          node.title\n        )}</span>]: </span>`;\n      },\n      StatementReferenceEntry: (request, response, node, parentNode) => {\n        let htmlId = utils.getHtmlId(\"statement\", node.title);\n        let classes = \"reference statement-reference\";\n        if (\n          parentNode.equivalenceClass &&\n          parentNode.equivalenceClass.sortedTags\n        ) {\n          classes +=\n            \" \" +\n            $.getCssClassesFromTags(\n              response,\n              parentNode.equivalenceClass.sortedTags\n            );\n        }\n        response.html += `<a href=\"#${htmlId}\" class=\"${classes}\">[<span class=\"title statement-title\">${_.escape(\n          node.title\n        )}</span>] </a>`;\n      },\n      StatementMentionEntry: (request, response, node) => {\n        const equivalenceClass = response.statements[node.title];\n        let classes = \"mention statement-mention\";\n        if (equivalenceClass.sortedTags) {\n          classes +=\n            \" \" +\n            $.getCssClassesFromTags(response, equivalenceClass.sortedTags);\n        }\n        let htmlId = utils.getHtmlId(\"statement\", node.title);\n        response.html += `<a href=\"#${htmlId}\" class=\"${classes}\">@[<span class=\"title statement-title\">${_.escape(\n          node.title\n        )}</span>]</a>${node.trailingWhitespace}`;\n      },\n      argumentReferenceEntry: (request, response, node) => {\n        let htmlId = utils.getHtmlId(\"argument\", node.argument.title);\n        let classes = \"reference argument-reference\";\n        if (node.argument.tags) {\n          classes +=\n            \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n        }\n        response.html += `<a href=\"#${htmlId}\" data-line=\"${\n          node.startLine\n        }\" class=\"has-line ${classes}\">&lt;<span class=\"title argument-title\">${_.escape(\n          node.argument.title\n        )}</span>&gt; </a>`;\n      },\n      argumentDefinitionEntry: (request, response, node) => {\n        let htmlId = utils.getHtmlId(\n          \"argument\",\n          node.argument.title,\n          response.htmlIds\n        );\n        response.htmlIds[htmlId] = node.argument;\n        let classes = \"definition argument-definition\";\n        if (node.argument.tags) {\n          classes +=\n            \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n        }\n        response.html += `<div id=\"${htmlId}\" data-line=\"${\n          node.startLine\n        }\" class=\"has-line ${classes}\"><span class=\"definiendum argument-definiendum\">&lt;<span class=\"title argument-title\">${_.escape(\n          node.argument.title\n        )}</span>&gt;: </span><span class=\"argument-definiens definiens description\">`;\n      },\n      ArgumentMentionEntry: (request, response, node) => {\n        let htmlId = utils.getHtmlId(\"argument\", node.title);\n        let classes = \"mention argument-mention\";\n        const argument = response.arguments[node.title];\n        if (argument.tags) {\n          classes +=\n            \" \" + $.getCssClassesFromTags(response, argument.sortedTags);\n        }\n        response.html += `<a href=\"#${htmlId}\" class=\"${classes}\">@&lt;<span class=\"title argument-title\">${_.escape(\n          node.title\n        )}</span>&gt;</a>${node.trailingWhitespace}`;\n      },\n      argumentDefinitionExit: (request, response) =>\n        (response.html += \"</span></div>\"),\n      incomingSupportEntry: (request, response, node) => {\n        response.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line incoming support relation\"><div class=\"incoming support relation-symbol\"><span>+&gt;</span></div>`;\n      },\n      incomingSupportExit: (request, response) => (response.html += \"</div>\"),\n      incomingAttackEntry: (request, response, node) => {\n        response.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line incoming attack relation\"><div class=\"incoming attack relation-symbol\"><span>-&gt;</span></div>`;\n      },\n      incomingAttackExit: (request, response) => (response.html += \"</div>\"),\n      incomingUndercutEntry: (request, response, node) => {\n        response.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line incoming undercut relation\"><div class=\"incoming undercut relation-symbol\"><span>_&gt;</span></div>`;\n      },\n      incomingUndercutExit: (request, response) => (response.html += \"</div>\"),\n      outgoingSupportEntry: (request, response, node) => {\n        response.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line outgoing support relation\"><div class=\"outgoing support relation-symbol\"><span>+</span></div>`;\n      },\n      outgoingSupportExit: (request, response) => {\n        response.html += \"</div>\";\n      },\n      outgoingAttackEntry: (request, response, node) => {\n        response.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line outgoing attack relation\"><div class=\"outgoing attack relation-symbol\"><span>-</span></div>`;\n      },\n      outgoingAttackExit: (request, response) => {\n        response.html += \"</div>\";\n      },\n      outgoingUndercutEntry: (request, response, node) => {\n        response.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line outgoing undercut relation\"><div class=\"outgoing undercut relation-symbol\"><span>&lt;_</span></div>`;\n      },\n      outgoingUndercutExit: (request, response) => {\n        response.html += \"</div>\";\n      },\n      contradictionEntry: (request, response, node) => {\n        response.html += `<div data-line=\"${\n          node.startLine\n        }\" class=\"has-line contradiction relation\"><div class=\"contradiction relation-symbol\"><span>&gt;&lt;</span></div>`;\n      },\n      contradictionExit: (request, response) => {\n        response.html += \"</div>\";\n      },\n      relationsEntry: (request, response) => {\n        response.html += `<div class=\"relations\">`;\n      },\n      relationsExit: (request, response) => {\n        response.html += \"</div>\";\n      },\n      orderedListEntry: (request, response) => (response.html += \"<ol>\"),\n      orderedListExit: (request, response) => (response.html += \"</ol>\"),\n      unorderedListEntry: (request, response) => (response.html += \"<ul>\"),\n      unorderedListExit: (request, response) => (response.html += \"</ul>\"),\n      orderedListItemEntry: (request, response, node) =>\n        (response.html += `<li data-line=\"${\n          node.startLine\n        }\" class=\"has-line\">`),\n      orderedListItemExit: (request, response) => (response.html += \"</li>\"),\n      unorderedListItemEntry: (request, response, node) =>\n        (response.html += `<li data-line=\"${\n          node.startLine\n        }\" class=\"has-line\">`),\n      unorderedListItemExit: (request, response) => (response.html += \"</li>\"),\n      headingEntry: (request, response, node) => {\n        let settings = $.getSettings(request);\n        if (node.level == 1) {\n          if (settings.title == \"Argdown Document\") {\n            response.html = response.html.replace(\n              \"<title>Argdown Document</title>\",\n              \"<title>\" + _.escape(node.text) + \"</title>\"\n            );\n          }\n        }\n        let htmlId = utils.getHtmlId(\"heading\", node.text, response.htmlIds);\n        response.htmlIds[htmlId] = node;\n        response.html += `<h${node.level} data-line=\"${\n          node.startLine\n        }\" id=\"${htmlId}\" class=\"has-line heading\">`;\n      },\n      headingExit: (request, response, node) =>\n        (response.html += \"</h\" + node.level + \">\"),\n      freestyleTextEntry: (request, response, node, parentNode) => {\n        if (\n          parentNode.name != \"inferenceRules\" &&\n          parentNode.name != \"metadataStatement\"\n        ) {\n          response.html += _.escape(node.text);\n        }\n      },\n      boldEntry: (request, response) => (response.html += \"<b>\"),\n      boldExit: (request, response, node) =>\n        (response.html += \"</b>\" + node.trailingWhitespace),\n      italicEntry: (request, response) => (response.html += \"<i>\"),\n      italicExit: (request, response, node) =>\n        (response.html += \"</i>\" + node.trailingWhitespace),\n      LinkEntry: (request, response, node) => {\n        let settings = $.getSettings(request);\n        let linkUrl = settings.normalizeLink(node.url);\n        let linkText = node.text;\n        if (!settings.validateLink(linkUrl, settings.allowFileProtocol)) {\n          linkUrl = \"\";\n          linkText = \"removed insecure url.\";\n        }\n        response.html += `<a href=\"${linkUrl}\">${linkText}</a>${\n          node.trailingWhitespace\n        }`;\n      },\n      TagEntry: (request, response, node) => {\n        if (node.text) {\n          response.html += `<span class=\"tag ${$.getCssClassesFromTags(\n            response,\n            [node.tag]\n          )}\">${_.escape(node.text)}</span>`;\n        }\n      },\n      argumentEntry: (request, response, node) => {\n        let classes = \"argument\";\n        if (node.argument.tags) {\n          classes +=\n            \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n        }\n        response.html += `<div class=\"${classes}\">`;\n      },\n      argumentExit: (request, response) => (response.html += \"</div>\"),\n      argumentStatementEntry: (request, response, node) => {\n        if (node.statement.role == \"conclusion\") {\n          let inference = node.statement.inference;\n          let metadataKeys = Object.keys(inference.metaData);\n          if (\n            metadataKeys.length == 0 &&\n            inference.inferenceRules.length == 0\n          ) {\n            response.html += `<div data-line=\"${\n              inference.startLine\n            }\" class=\"has-line inference\">`;\n          } else {\n            response.html += `<div data-line=\"${\n              inference.startLine\n            }\" class=\"has-line inference with-data\">`;\n          }\n\n          response.html += `<span class=\"inference-rules\">`;\n          if (inference.inferenceRules.length > 0) {\n            let i = 0;\n            for (let inferenceRule of inference.inferenceRules) {\n              if (i > 0) response.html += \", \";\n              response.html += `<span class=\"inference-rule\">${inferenceRule}</span>`;\n              i++;\n            }\n            response.html += \"</span> \";\n          }\n          if (metadataKeys.length > 0) {\n            response.html += `<span class=\"metadata\">(`;\n            for (let i = 0; i < metadataKeys.length; i++) {\n              let key = metadataKeys[i];\n              response.html += `<span class=\"meta-data-statement\">`;\n              response.html += `<span class=\"meta-data-key\">${key}: </span>`;\n              if (_.isString(inference.metaData[key])) {\n                response.html += `<span class=\"meta-data-value\">${_.escape(\n                  inference.metaData[key]\n                )}</span>`;\n              } else {\n                let j = 0;\n                for (let value of inference.metaData[key]) {\n                  if (j > 0) response.html += \", \";\n                  response.html += `<span class=\"meta-data-value\">${_.escape(\n                    value\n                  )}</span>`;\n                  j++;\n                }\n              }\n              if (i < metadataKeys.length - 1) response.html += \"; \";\n              response.html += \"</span>\";\n            }\n            response.html += \" )</span>\";\n          }\n\n          response.html += \"</div>\";\n        }\n        response.html += `<div data-line=\"${node.startLine}\" class=\"has-line ${\n          node.statement.role\n        } argument-statement\"><div class=\"statement-nr\">(<span>${\n          node.statementNr\n        }</span>)</div>`;\n      },\n      argumentStatementExit: (request, response) => (response.html += \"</div>\")\n    };\n  }\n  getCssClassesFromTags(response, tags) {\n    let classes = \"\";\n    if (!tags || !response.tagsDictionary) {\n      return classes;\n    }\n    let index = 0;\n    for (let tag of tags) {\n      if (index > 0) {\n        classes += \" \";\n      }\n      index++;\n      const tagData = response.tagsDictionary[tag];\n      classes += tagData.cssClass;\n    }\n    return classes;\n  }\n}\nmodule.exports = {\n  HtmlExport: HtmlExport\n};\n"]}