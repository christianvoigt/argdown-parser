{"version":3,"sources":["../../../src/plugins/HtmlExport.js"],"names":["_","HtmlExport","request","settings","name","defaultsDeep","getSettings","defaults","config","headless","cssFile","title","lang","charset","$","argdownListeners","argdownEntry","response","html","htmlIds","head","argdownExit","statementEntry","node","classes","equivalenceClass","tags","getCssClassesFromTags","sortedTags","statementExit","StatementDefinitionEntry","parentNode","htmlId","getHtmlId","statement","escape","StatementReferenceEntry","StatementMentionEntry","statements","trailingWhitespace","argumentReferenceEntry","argument","argumentDefinitionEntry","ArgumentMentionEntry","arguments","argumentDefinitionExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","incomingUndercutEntry","incomingUndercutExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","outgoingUndercutEntry","outgoingUndercutExit","contradictionEntry","contradictionExit","relationsEntry","relationsExit","orderedListEntry","orderedListExit","unorderedListEntry","unorderedListExit","orderedListItemEntry","orderedListItemExit","unorderedListItemEntry","unorderedListItemExit","headingEntry","level","replace","text","headingExit","freestyleTextEntry","boldEntry","boldExit","italicEntry","italicExit","LinkEntry","linkUrl","normalizeLink","url","linkText","validateLink","TagEntry","tag","argumentEntry","argumentExit","argumentStatementEntry","role","inference","metadataKeys","Object","keys","metaData","length","inferenceRules","i","inferenceRule","key","isString","j","value","statementNr","argumentStatementExit","tagsDictionary","index","tagData","cssClass","module","exports"],"mappings":"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","file":"HtmlExport.js","sourcesContent":["import * as _ from \"lodash\";\nimport utils from \"../utils.js\";\n\nclass HtmlExport {\n    getSettings(request) {\n        let settings = request[\"html\"] || request[this.name];\n        if (!settings) {\n            settings = {};\n            request[\"html\"] = settings;\n        }\n        return settings;\n    }\n    prepare(request) {\n        _.defaultsDeep(this.getSettings(request), this.defaults);\n    }\n    constructor(config) {\n        this.name = \"HtmlExport\";\n        this.defaults = _.defaultsDeep({}, config, {\n            headless: false,\n            cssFile: \"./argdown.css\",\n            title: \"Argdown Document\",\n            lang: \"en\",\n            charset: \"utf8\"\n        });\n        let $ = this;\n        this.argdownListeners = {\n            argdownEntry: (request, response) => {\n                response.html = \"\";\n                response.htmlIds = {};\n                let settings = $.getSettings(request);\n                if (!settings.headless) {\n                    let head = settings.head;\n                    if (!head) {\n                        head =\n                            \"<!doctype html>\\n\\n\" +\n                            \"<html lang='\" +\n                            settings.lang +\n                            \"'>\\n\" +\n                            \"<head>\\n\" +\n                            \"<meta charset='\" +\n                            settings.charset +\n                            \"'>\\n\" +\n                            \"<title>\" +\n                            settings.title +\n                            \"</title>\\n\";\n                        if (settings.cssFile) {\n                            head += \"<link rel='stylesheet' href='\" + settings.cssFile + \"'>\\n\";\n                        }\n                        head += \"</head>\";\n                    }\n                    response.html += head;\n                    response.html += \"<body>\";\n                }\n                response.html += \"<div class='argdown'>\";\n            },\n            argdownExit: (request, response) => {\n                let settings = $.getSettings(request);\n                // Remove htmlIds, because other plugins might create their own ones. \n                // Ids only need to be unique within one document, not across documents.\n                response.htmlIds = null;\n                response.html += \"</div>\";\n                if (!settings.headless) {\n                    response.html += \"</body></html>\";\n                }\n            },\n            statementEntry: (request, response, node) => {\n                let classes = \"statement\";\n                if (node.equivalenceClass.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.equivalenceClass.sortedTags);\n                }\n                response.html += \"<div class='\" + classes + \"'>\";\n            },\n            statementExit: (request, response) => (response.html += \"</div>\"),\n            StatementDefinitionEntry: (request, response, node, parentNode) => {\n                let htmlId = utils.getHtmlId(\"statement\", node.statement.title, response.htmlIds);\n                response.htmlIds[htmlId] = node.statement;\n                let classes = \"definition statement-definition definiendum\";\n                if (parentNode.equivalenceClass && parentNode.equivalenceClass.sortedTags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, parentNode.equivalenceClass.sortedTags);\n                }\n                response.html +=\n                    \"<span id='\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'>[<span class='title statement-title'>\" +\n                    _.escape(node.statement.title) +\n                    \"</span>]: </span>\";\n            },\n            StatementReferenceEntry: (request, response, node, parentNode) => {\n                let htmlId = utils.getHtmlId(\"statement\", node.statement.title);\n                let classes = \"reference statement-reference\";\n                if (parentNode.equivalenceClass && parentNode.equivalenceClass.sortedTags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, parentNode.equivalenceClass.sortedTags);\n                }\n                response.html +=\n                    \"<a href='#\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'>[<span class='title statement-title'>\" +\n                    _.escape(node.statement.title) +\n                    \"</span>] </a>\";\n            },\n            StatementMentionEntry: (request, response, node) => {\n                const equivalenceClass = response.statements[node.title];\n                let classes = \"mention statement-mention\";\n                if (equivalenceClass.sortedTags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, equivalenceClass.sortedTags);\n                }\n                let htmlId = utils.getHtmlId(\"statement\", node.title);\n                response.html +=\n                    \"<a href='#\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'>@[<span class='title statement-title'>\" +\n                    _.escape(node.title) +\n                    \"</span>]</a>\" +\n                    node.trailingWhitespace;\n            },\n            argumentReferenceEntry: (request, response, node) => {\n                let htmlId = utils.getHtmlId(\"argument\", node.argument.title);\n                let classes = \"reference argument-reference\";\n                if (node.argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n                }\n                response.html +=\n                    \"<a href='#\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'>&lt;<span class='title argument-title'>\" +\n                    _.escape(node.argument.title) +\n                    \"</span>&gt; </a>\";\n            },\n            argumentDefinitionEntry: (request, response, node) => {\n                let htmlId = utils.getHtmlId(\"argument\", node.argument.title, response.htmlIds);\n                response.htmlIds[htmlId] = node.argument;\n                let classes = \"definition argument-definition\";\n                if (node.argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n                }\n                response.html +=\n                    \"<div id='\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'><span class='definiendum argument-definiendum'>&lt;<span class='title argument-title'>\" +\n                    _.escape(node.argument.title) +\n                    \"</span>&gt;: </span><span class='argument-definiens definiens description'>\";\n            },\n            ArgumentMentionEntry: (request, response, node) => {\n                let htmlId = utils.getHtmlId(\"argument\", node.title);\n                let classes = \"mention argument-mention\";\n                const argument = response.arguments[node.title];\n                if (argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, argument.sortedTags);\n                }\n                response.html +=\n                    \"<a href='#\" +\n                    htmlId +\n                    \"' class='\" +\n                    classes +\n                    \"'>@&lt;<span class='title argument-title'>\" +\n                    _.escape(node.title) +\n                    \"</span>&gt;</a>\" +\n                    node.trailingWhitespace;\n            },\n            argumentDefinitionExit: (request, response) => (response.html += \"</span></div>\"),\n            incomingSupportEntry: (request, response) => {\n                response.html +=\n                    \"<div class='incoming support relation'><div class='incoming support relation-symbol'><span>+&gt;</span></div>\";\n            },\n            incomingSupportExit: (request, response) => (response.html += \"</div>\"),\n            incomingAttackEntry: (request, response) => {\n                response.html +=\n                    \"<div class='incoming attack relation'><div class='incoming attack relation-symbol'><span>-&gt;</span></div>\";\n            },\n            incomingAttackExit: (request, response) => (response.html += \"</div>\"),\n            incomingUndercutEntry: (request, response) => {\n                response.html +=\n                    \"<div class='incoming undercut relation'><div class='incoming undercut relation-symbol'><span>_&gt;</span></div>\";\n            },\n            incomingUndercutExit: (request, response) => (response.html += \"</div>\"),\n            outgoingSupportEntry: (request, response) => {\n                response.html +=\n                    \"<div class='outgoing support relation'><div class='outgoing support relation-symbol'><span>+</span></div>\";\n            },\n            outgoingSupportExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            outgoingAttackEntry: (request, response) => {\n                response.html +=\n                    \"<div class='outgoing attack relation'><div class='outgoing attack relation-symbol'><span>-</span></div>\";\n            },\n            outgoingAttackExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            outgoingUndercutEntry: (request, response) => {\n                response.html +=\n                    \"<div class='outgoing undercut relation'><div class='outgoing undercut relation-symbol'><span>&lt;_</span></div>\";\n            },\n            outgoingUndercutExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            contradictionEntry: (request, response) => {\n                response.html +=\n                    \"<div class='contradiction relation'><div class='contradiction relation-symbol'><span>&gt;&lt;</span></div>\";\n            },\n            contradictionExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            relationsEntry: (request, response) => {\n                response.html += \"<div class='relations'>\";\n            },\n            relationsExit: (request, response) => {\n                response.html += \"</div>\";\n            },\n            orderedListEntry: (request, response) => (response.html += \"<ol>\"),\n            orderedListExit: (request, response) => (response.html += \"</ol>\"),\n            unorderedListEntry: (request, response) => (response.html += \"<ul>\"),\n            unorderedListExit: (request, response) => (response.html += \"</ul>\"),\n            orderedListItemEntry: (request, response) => (response.html += \"<li>\"),\n            orderedListItemExit: (request, response) => (response.html += \"</li>\"),\n            unorderedListItemEntry: (request, response) => (response.html += \"<li>\"),\n            unorderedListItemExit: (request, response) => (response.html += \"</li>\"),\n            headingEntry: (request, response, node) => {\n                let settings = $.getSettings(request);\n                if (node.level == 1) {\n                    if (settings.title == \"Argdown Document\") {\n                        response.html = response.html.replace(\n                            \"<title>Argdown Document</title>\",\n                            \"<title>\" + _.escape(node.text) + \"</title>\"\n                        );\n                    }\n                }\n                let htmlId = utils.getHtmlId(\"heading\", node.text, response.htmlIds);\n                response.htmlIds[htmlId] = node;\n                response.html += \"<h\" + node.level + \" id='\" + htmlId + \"'>\";\n            },\n            headingExit: (request, response, node) => (response.html += \"</h\" + node.level + \">\"),\n            freestyleTextEntry: (request, response, node, parentNode) => {\n                if (parentNode.name != \"inferenceRules\" && parentNode.name != \"metadataStatement\") {\n                    response.html += _.escape(node.text);\n                }\n            },\n            boldEntry: (request, response) => (response.html += \"<b>\"),\n            boldExit: (request, response, node) => (response.html += \"</b>\" + node.trailingWhitespace),\n            italicEntry: (request, response) => (response.html += \"<i>\"),\n            italicExit: (request, response, node) => (response.html += \"</i>\" + node.trailingWhitespace),\n            LinkEntry: (request, response, node) => {\n                let linkUrl = utils.normalizeLink(node.url);\n                let linkText = node.text;\n                if(!utils.validateLink(linkUrl)){\n                    linkUrl = \"\";\n                    linkText = \"removed insecure url.\";\n                }\n                response.html += \"<a href='\" + linkUrl + \"'>\" + linkText+ \"</a>\" + node.trailingWhitespace;\n            },\n            TagEntry: (request, response, node) => {\n                if (node.text) {\n                    response.html +=\n                        \"<span class='tag \" +\n                        $.getCssClassesFromTags(response, [node.tag]) +\n                        \"'>\" +\n                        _.escape(node.text) +\n                        \"</span>\";\n                }\n            },\n            argumentEntry: (request, response, node) => {\n                let classes = \"argument\";\n                if (node.argument.tags) {\n                    classes += \" \" + $.getCssClassesFromTags(response, node.argument.sortedTags);\n                }\n                response.html += \"<div class='\" + classes + \"'>\";\n            },\n            argumentExit: (request, response) => (response.html += \"</div>\"),\n            argumentStatementEntry: (request, response, node) => {\n                if (node.statement.role == \"conclusion\") {\n                    let inference = node.statement.inference;\n                    let metadataKeys = Object.keys(inference.metaData);\n                    if (metadataKeys.length == 0 && inference.inferenceRules.length == 0) {\n                        response.html += \"<div class='inference'>\";\n                    } else {\n                        response.html += \"<div class='inference with-data'>\";\n                    }\n\n                    response.html += \"<span class='inference-rules'>\";\n                    if (inference.inferenceRules.length > 0) {\n                        let i = 0;\n                        for (let inferenceRule of inference.inferenceRules) {\n                            if (i > 0) response.html += \", \";\n                            response.html += \"<span class='inference-rule'>\" + inferenceRule + \"</span>\";\n                            i++;\n                        }\n                        response.html += \"</span> \";\n                    }\n                    if (metadataKeys.length > 0) {\n                        response.html += \"<span class='metadata'>(\";\n                        for (let i = 0; i < metadataKeys.length; i++) {\n                            let key = metadataKeys[i];\n                            response.html += \"<span class='meta-data-statement'>\";\n                            response.html += \"<span class='meta-data-key'>\" + key + \": </span>\";\n                            if (_.isString(inference.metaData[key])) {\n                                response.html +=\n                                    \"<span class='meta-data-value'>\" +\n                                    _.escape(inference.metaData[key]) +\n                                    \"</span>\";\n                            } else {\n                                let j = 0;\n                                for (let value of inference.metaData[key]) {\n                                    if (j > 0) response.html += \", \";\n                                    response.html += \"<span class='meta-data-value'>\" + _.escape(value) + \"</span>\";\n                                    j++;\n                                }\n                            }\n                            if (i < metadataKeys.length - 1) response.html += \"; \";\n                            response.html += \"</span>\";\n                        }\n                        response.html += \" )</span>\";\n                    }\n\n                    response.html += \"</div>\";\n                }\n                response.html +=\n                    \"<div class='\" +\n                    node.statement.role +\n                    \" argument-statement'><div class='statement-nr'>(<span>\" +\n                    node.statementNr +\n                    \"</span>)</div>\";\n            },\n            argumentStatementExit: (request, response) => (response.html += \"</div>\")\n        };\n    }\n    getCssClassesFromTags(response, tags) {\n        let classes = \"\";\n        if (!tags || !response.tagsDictionary) {\n            return classes;\n        }\n        let index = 0;\n        for (let tag of tags) {\n            if (index > 0) {\n                classes += \" \";\n            }\n            index++;\n            const tagData = response.tagsDictionary[tag];\n            classes += tagData.cssClass;\n        }\n        return classes;\n    }\n}\nmodule.exports = {\n    HtmlExport: HtmlExport\n};\n"]}