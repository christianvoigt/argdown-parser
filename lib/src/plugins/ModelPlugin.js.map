{"version":3,"sources":["../../../src/plugins/ModelPlugin.js"],"names":["_","RelationObjectTypes","Object","freeze","STATEMENT","Symbol","RECONSTRUCTED_ARGUMENT","SKETCHED_ARGUMENT","ModelPlugin","data","config","model","relations","relation","fromType","getElementType","from","toType","to","status","argument","index","indexOf","splice","conclusionStatement","pcs","length","equivalenceClass","statements","title","relationExists","existingRelation","type","push","arguments","sections","tags","obj","previousSettings","settings","removeTagsFromText","defaultsDeep","name","$","statementReferencePattern","statementDefinitionPattern","statementMentionPattern","argumentReferencePattern","argumentDefinitionPattern","argumentMentionPattern","linkPattern","tagPattern","uniqueTitleCounter","getUniqueTitle","getEquivalenceClass","ec","currentStatement","currentStatementOrArgument","currentArgument","currentArgumentReconstruction","currentInference","rangesStack","parentsStack","currentRelation","inStatementTree","currentSection","sectionCounter","onArgdownEntry","node","parentNode","childIndex","onStatementEntry","isRootOfStatementTree","isChildOfStatementTree","statement","onStatementExit","addTags","isEmpty","text","section","members","isUsedAsRootOfStatementTree","isUsedAsChildOfStatementTree","onStatementDefinitionEntry","match","exec","image","onStatementReferenceEntry","onStatementMentionExit","trailingWhitespace","range","start","stop","ranges","updateArgument","object","union","onArgumentDefinitionEntry","role","descriptions","onArgumentDefinitionExit","description","last","onArgumentReferenceExit","onArgumentReferenceEntry","onArgumentMentionExit","onFreestyleTextEntry","children","child","onLinkEntry","linkRange","url","onTagEntry","tag","tagRange","onBoldEntry","boldRange","onBoldExit","boldEnd","pop","onItalicEntry","italicRange","onItalicExit","italicEnd","onRelationExit","contentNode","content","target","getRelationTarget","onIncomingSupportEntry","onIncomingAttackEntry","onOutgoingSupportEntry","onOutgoingAttackEntry","onContradictionEntry","onRelationsEntry","statementOrArgument","onRelationsExit","onArgumentEntry","precedingSibling","Emptyline","onArgumentExit","onArgumentStatementExit","statementNode","isUsedAsConclusion","inference","isUsedAsPremise","statementNr","onInferenceEntry","inferenceRules","metaData","onInferenceRulesExit","trim","onMetadataStatementExit","key","value","i","onHeadingExit","headingStart","heading","sectionId","newSection","level","parentSection","parent","argdownListeners","argdownEntry","headingExit","statementEntry","statementExit","argumentEntry","argumentExist","argumentStatementExit","inferenceEntry","inferenceRulesExit","metadataStatementExit","StatementDefinitionEntry","StatementReferenceEntry","StatementMentionExit","ArgumentDefinitionEntry","ArgumentReferenceEntry","ArgumentMentionExit","argumentDefinitionExit","argumentReferenceExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","contradictionEntry","contradictionExit","relationsEntry","relationsExit","freestyleTextEntry","italicEntry","italicExit","boldEntry","boldExit","LinkEntry","TagEntry","keys","statementKey","console","log","argumentKey","module","exports"],"mappings":"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","file":"ModelPlugin.js","sourcesContent":["import * as _ from 'lodash';\nimport {Statement} from '../model/Statement.js';\nimport {Argument} from '../model/Argument.js';\nimport {Relation} from '../model/Relation.js';\nimport {Section} from '../model/Section.js';\nimport {EquivalenceClass} from '../model/EquivalenceClass.js';\nimport {tokenMatcher} from 'chevrotain';\nimport {ArgdownLexer} from './../ArgdownLexer.js';\n\nconst RelationObjectTypes = Object.freeze({STATEMENT: Symbol(\"STATEMENT\"), RECONSTRUCTED_ARGUMENT: Symbol(\"RECONSTRUCTED ARGUMENT\"), SKETCHED_ARGUMENT: Symbol(\"SKETCHED ARGUMENT\")});\n\nclass ModelPlugin{\n  set config(config){\n    let previousSettings = this.settings;\n    if(!previousSettings){\n      previousSettings = {\n        removeTagsFromText: false\n      }\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);\n  }\n  run(data){\n    if(data.config && data.config.model){\n      this.config = data.config.model;\n    }\n    for(let relation of this.relations){\n      let fromType = this.getElementType(relation.from);\n      let toType = this.getElementType(relation.to);\n      if(fromType == RelationObjectTypes.SKETCHED_ARGUMENT \n        ||toType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT \n        ||toType == RelationObjectTypes.SKETCHED_ARGUMENT){\n        relation.status = \"sketched\";\n      }else if(fromType == RelationObjectTypes.STATEMENT \n        ||fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT){\n        relation.status = \"reconstructed\";\n        \n        if(fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT){\n          //change relation.from to point to the argument's conclusion\n          let argument = relation.from;\n          \n          //remove from argument\n          let index = _.indexOf(argument.relations, relation);\n          argument.relations.splice(index, 1);\n                    \n          let conclusionStatement = argument.pcs[relation.from.pcs.length - 1];\n          let equivalenceClass = this.statements[conclusionStatement.title];\n          \n          relation.from = equivalenceClass;\n\n          //check if this relation already exists\n          let relationExists = false;\n          for(let existingRelation of relation.from.relations){\n            if(relation.to == existingRelation.to && relation.type == existingRelation.type){\n              relationExists = true;\n              break;\n            }\n          }\n          if(!relationExists){\n            equivalenceClass.relations.push(relation);            \n          }else{\n            //remove relation from target\n            let index = _.indexOf(relation.to.relations, relation);\n            relation.to.relations.splice(index, 1);\n            //remove relation from relations\n            index = _.indexOf(this.relations, relation);\n            this.relations.splice(index, 1);\n          }\n        }\n        \n        //Change dialectical types of statement-to-statement relations to semantic types\n        if(relation.type == \"support\"){\n          relation.type = \"entails\";\n        }else if(relation.type == \"attack\"){\n          relation.type = \"contrary\"\n        }\n        \n      }\n    }\n\n\n    data.relations = this.relations;\n    data.statements = this.statements;\n    data.arguments = this.arguments;\n    data.sections = this.sections;\n    data.tags = this.tags;\n    return data;\n  }\n  getElementType(obj){\n    if(obj instanceof Argument){\n      if(obj.pcs && obj.pcs.length > 0){\n        return RelationObjectTypes.RECONSTRUCTED_ARGUMENT;\n      }else{\n        return RelationObjectTypes.SKETCHED_ARGUMENT;\n      }\n    }else if(obj instanceof EquivalenceClass){\n        return RelationObjectTypes.STATEMENT;\n    }\n    return null;\n  }\n  constructor(config){\n    this.name = \"ModelPlugin\";\n    this.config = config;\n    \n    let $ = this;\n\n    const statementReferencePattern = /\\[(.+)\\]/;\n    const statementDefinitionPattern = /\\[(.+)\\]\\:/;\n    const statementMentionPattern = /\\@\\[(.+)\\](\\s?)/;\n    const argumentReferencePattern = /\\<(.+)\\>/;\n    const argumentDefinitionPattern = /\\<(.+)\\>\\:/;\n    const argumentMentionPattern = /\\@\\<(.+)\\>(\\s?)/;\n    const linkPattern = /\\[(.+)\\]\\((.+)\\)/;\n    const tagPattern = /#(?:\\(([^\\)]+)\\)|([a-zA-z0-9-\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+))/;\n\n    let uniqueTitleCounter = 0;\n    function getUniqueTitle(){\n      uniqueTitleCounter++;\n      return \"Untitled \"+uniqueTitleCounter;\n    }\n    function getEquivalenceClass(title){\n      if(!title)\n        return null;\n\n      let ec = $.statements[title];\n      if(!ec){\n        ec = new EquivalenceClass();\n        ec.title = title;\n        $.statements[title] = ec;\n      }\n      return ec;\n    }\n\n\n    let currentStatement = null;\n    let currentStatementOrArgument = null;\n    let currentArgument = null;\n    let currentArgumentReconstruction = null;\n    let currentInference = null;\n    let rangesStack = [];\n    let parentsStack = [];\n    let currentRelation = null;\n    let inStatementTree = false;\n    let currentSection = null;\n    let sectionCounter = 0;\n\n    function onArgdownEntry(node, parentNode, childIndex, data){\n      $.statements = {};\n      $.arguments = {};\n      $.sections = [];\n      $.relations = [];\n      $.tags = [];\n      uniqueTitleCounter = 0;\n      currentSection = null;\n      currentStatementOrArgument = null;\n      currentArgumentReconstruction = null;\n      currentInference = null;\n      currentArgument = null;\n      rangesStack = [];\n      parentsStack = [];\n      currentRelation = null;\n      inStatementTree = false;\n      sectionCounter = 0;\n      if(data && data.config && data.config.model){\n        this.config = data.config.model;\n      }\n    }\n    function onStatementEntry(node, parentNode){\n      currentStatement = new Statement();\n      if(parentNode.name == 'argdown'){\n          currentStatement.isRootOfStatementTree = true;\n          inStatementTree = true;\n      }else if(inStatementTree){\n        currentStatement.isChildOfStatementTree = true;\n      }\n      currentStatementOrArgument = currentStatement;\n      node.statement = currentStatement;\n    }\n    function onStatementExit(node){\n      let statement = node.statement;\n      if(!statement.title || statement.title == ''){\n        statement.title = getUniqueTitle();\n      }\n      if(statement.isRootOfStatementTree){\n        inStatementTree = false;\n      }\n      let equivalenceClass = getEquivalenceClass(statement.title);\n      node.equivalenceClass = equivalenceClass;\n      if(statement.tags){\n        addTags(statement.tags, equivalenceClass);\n      }\n      if(!_.isEmpty(statement.text)){\n        if(currentSection){\n          statement.section = currentSection;\n        }\n        equivalenceClass.members.push(statement);        \n      }\n      if(statement.isRootOfStatementTree){\n        equivalenceClass.isUsedAsRootOfStatementTree = true; //members are used outside of argument reconstructions (not as premise or conclusion)\n      }else if(statement.isChildOfStatementTree){\n        equivalenceClass.isUsedAsChildOfStatementTree = true;\n      }\n      currentStatement = null;\n    }\n    function onStatementDefinitionEntry(node){\n      let match = statementDefinitionPattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    function onStatementReferenceEntry(node){\n      let match = statementReferencePattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    function onStatementMentionExit(node){\n      let match = statementMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(currentStatement){\n          let range = {type:'statement-mention',title:node.title, start:currentStatement.text.length};\n          currentStatement.text += node.image;\n          range.stop = currentStatement.text.length -1;\n          currentStatement.ranges.push(range);\n        }\n      }\n    }\n    function updateArgument(title){\n      if(title){\n        currentArgument = $.arguments[title];        \n      }\n      if(!title ||!currentArgument){\n        currentArgument = new Argument();\n        if(!title){\n          currentArgument.title = getUniqueTitle();\n        }else {\n          currentArgument.title = title;\n        }\n        $.arguments[currentArgument.title] = currentArgument;\n      }\n      currentStatementOrArgument = currentArgument;\n      return currentArgument;\n    }\n    function addTags(tags, object){\n      if(!object.tags){\n        object.tags = [];\n      }\n      object.tags = _.union(object.tags, tags);\n    }\n    function onArgumentDefinitionEntry(node, parentNode){\n      let match = argumentDefinitionPattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(title);\n        currentStatement = new Statement();\n        currentStatement.role = \"argument-description\";\n        if(currentSection){          \n          currentStatement.section = currentSection;\n        }\n        currentArgument.descriptions.push(currentStatement);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentDefinitionExit(node){\n      if(node.argument){\n        let description = _.last(node.argument.descriptions);\n        if(description.tags){\n          addTags(description.tags, node.argument);\n        }\n      }\n      currentStatement = null;\n      currentArgument = null;\n    }\n    function onArgumentReferenceExit(){\n      currentStatement = null;\n      currentArgument = null;\n    }\n    function onArgumentReferenceEntry(node, parentNode){\n      let match = argumentReferencePattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(title);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentMentionExit(node){\n      let match = argumentMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(currentStatement){\n          let range = {type:'argument-mention',title:node.title, start:currentStatement.text.length};\n          currentStatement.text += node.image;\n          range.stop = currentStatement.text.length -1;\n          currentStatement.ranges.push(range);\n        }\n      }\n    }\n    function onFreestyleTextEntry(node){\n      node.text = \"\";\n      for(let child of node.children){\n        node.text += child.image;\n      }\n      if(currentStatement)\n        currentStatement.text += node.text;\n    }\n    function onLinkEntry(node){\n      let match = linkPattern.exec(node.image);\n      let linkRange = {type:'link', start: currentStatement.text.length};\n      node.url = match[2];\n      node.text = match[1];\n      currentStatement.text += node.text;\n      linkRange.stop = currentStatement.text.length - 1;\n      linkRange.url = node.url;\n      currentStatement.ranges.push(linkRange);\n      if(node.image[node.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n    }\n    function onTagEntry(node){\n      let match = tagPattern.exec(node.image);\n      let tag = match[1] || match[2];\n      node.tag = tag;\n      if(!$.settings.removeTagsFromText){\n        let tagRange = {type:'tag', start: currentStatement.text.length};\n        node.text = node.image;        \n        currentStatement.text += node.text;\n        tagRange.stop = currentStatement.text.length - 1;\n        tagRange.tag = node.tag;\n        currentStatement.ranges.push(tagRange);\n      }\n      currentStatement.tags = currentStatement.tags ||[];\n      let tags = currentStatement.tags;\n      if(currentStatement.tags.indexOf(tag) == -1){\n        tags.push(tag);\n      }\n      if($.tags.indexOf(tag) == -1){\n        $.tags.push(tag);\n      }\n    }\n    function onBoldEntry(){\n      let boldRange = {type:'bold', start: currentStatement.text.length};\n      rangesStack.push(boldRange);\n      currentStatement.ranges.push(boldRange);\n    }\n    function onBoldExit(node){\n      let boldEnd = _.last(node.children);\n      if(boldEnd.image[boldEnd.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = currentStatement.text.length - 1;\n      rangesStack.pop();\n    }\n    function onItalicEntry(){\n      let italicRange = {type:'italic', start: currentStatement.text.length};\n      rangesStack.push(italicRange);\n      currentStatement.ranges.push(italicRange);\n    }\n    function onItalicExit(node){\n      let italicEnd = _.last(node.children);\n      if(italicEnd.image[italicEnd.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = currentStatement.text.length - 1;\n      rangesStack.pop();\n    }\n\n    function onRelationExit(node){\n      let relation = node.relation;\n      let contentNode = node.children[1];\n      let content = contentNode.argument ||contentNode.statement;\n      let target = getRelationTarget(content);\n      if(relation){\n        if(relation.from){\n          relation.to = target;\n        }else {\n          relation.from = target;\n        }\n        let relationExists = false;\n        for(let existingRelation of relation.from.relations){\n          if(relation.to == existingRelation.to && relation.type == existingRelation.type){\n            relationExists = true;\n            break;\n          }else if(relation.type == \"contradictory\" && relation.type == existingRelation.type && relation.from == existingRelation.to && relation.to == existingRelation.from){\n            relationExists = true;\n            break;\n          }\n        }\n        if(!relationExists){\n          $.relations.push(relation);\n          relation.from.relations.push(relation);\n          relation.to.relations.push(relation);\n        }\n      }\n    }\n    function onIncomingSupportEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"support\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onIncomingAttackEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"attack\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onOutgoingSupportEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"support\");\n      currentRelation.to = target;\n      node.relation = currentRelation;\n    }\n    function onOutgoingAttackEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"attack\");\n      currentRelation.to = target;\n      node.relation = currentRelation;\n    }\n    function onContradictionEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"contradictory\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n\n    function onRelationsEntry(){\n      parentsStack.push(getRelationTarget(currentStatementOrArgument));\n    }\n    function getRelationTarget(statementOrArgument){\n      let target = statementOrArgument;\n      if(statementOrArgument instanceof Statement){\n        if(!statementOrArgument.title)\n          statementOrArgument.title = getUniqueTitle();\n        target = getEquivalenceClass(statementOrArgument.title);\n      }\n      return target;\n    }\n    function onRelationsExit(){\n      currentRelation = null;\n      parentsStack.pop();\n    }\n\n    function onArgumentEntry(node, parentNode, childIndex){\n      let argument = null;\n      if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n            argument = precedingSibling.argument;\n          }else if(tokenMatcher(precedingSibling, ArgdownLexer.Emptyline)){\n            precedingSibling = parentNode.children[childIndex - 2];\n            if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n              argument = precedingSibling.argument;\n            }\n          }\n        }\n        if(!argument){\n          argument = updateArgument();\n        }\n        if(currentSection){\n          argument.section = currentSection;\n        }\n        //if there is a previous reconstruction, overwrite it\n        if(argument.pcs.length > 0){\n          //TODO: throw error\n          argument.pcs = [];\n        }\n        node.argument = argument;\n        currentArgumentReconstruction = argument;\n    }\n    function onArgumentExit(){\n      currentStatement = null;\n      currentArgument = null;\n      currentArgumentReconstruction = null;\n    }\n    function onArgumentStatementExit(node, parentNode, childIndex){\n      if(node.children.length > 1){\n        //first node is ArgdownLexer.ArgumentStatementStart\n        let statementNode = node.children[1];\n        let statement = statementNode.statement;\n        let ec = getEquivalenceClass(statement.title);\n        statement.role = \"premise\";\n        if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'inference'){\n            statement.role = \"conclusion\";\n            ec.isUsedAsConclusion = true;\n            statement.inference = precedingSibling.inference;\n          }\n        }\n        if(statement.role == \"premise\"){\n          ec.isUsedAsPremise = true;\n        }\n        currentArgumentReconstruction.pcs.push(statement);\n        node.statement = statement;\n        node.statementNr = currentArgumentReconstruction.pcs.length;\n      }\n    }\n    function onInferenceEntry(node){\n      currentInference = {inferenceRules:[], metaData:{}};\n      node.inference = currentInference;\n    }\n    function onInferenceRulesExit(node){\n      for(let child of node.children){\n        if(child.name == 'freestyleText'){\n          currentInference.inferenceRules.push(child.text.trim());\n        }\n      }\n    }\n    function onMetadataStatementExit(node){\n      let key = node.children[0].text;\n      let value = null;\n      if(node.children.length == 2){\n        value = node.children[1].text;\n      }else{\n        value = [];\n        for(let i = 1; i < node.children.length; i++){\n          value.push(node.children[i].text);\n        }\n      }\n      currentInference.metaData[key] = value;\n    }\n    function onHeadingExit(node){\n      let headingStart = node.children[0];\n      node.heading = headingStart.image.length;\n      node.text = node.children[1].text;\n      sectionCounter++;\n      let sectionId = 's'+sectionCounter;\n      let newSection = new Section(sectionId, node.text, node.heading);\n      \n      if(newSection.level > 1 && currentSection){\n        let parentSection = currentSection;\n        while(parentSection.parent && parentSection.level >= newSection.level){\n          parentSection = parentSection.parent;\n        }\n        parentSection.children.push(newSection);\n        newSection.parent = parentSection;        \n      }else{\n        $.sections.push(newSection);\n      }\n      currentSection = newSection;\n    }\n\n    this.argdownListeners = {\n      argdownEntry : onArgdownEntry,\n      headingExit : onHeadingExit,\n      statementEntry : onStatementEntry,\n      statementExit : onStatementExit,\n      argumentEntry : onArgumentEntry,\n      argumentExist : onArgumentExit,\n      argumentStatementExit : onArgumentStatementExit,\n      inferenceEntry : onInferenceEntry,\n      inferenceRulesExit : onInferenceRulesExit,\n      metadataStatementExit : onMetadataStatementExit,\n      StatementDefinitionEntry : onStatementDefinitionEntry,\n      StatementReferenceEntry : onStatementReferenceEntry,\n      StatementMentionExit : onStatementMentionExit,\n      ArgumentDefinitionEntry : onArgumentDefinitionEntry,\n      ArgumentReferenceEntry : onArgumentReferenceEntry,\n      ArgumentMentionExit : onArgumentMentionExit,\n      argumentDefinitionExit : onArgumentDefinitionExit,\n      argumentReferenceExit : onArgumentReferenceExit,\n      incomingSupportEntry : onIncomingSupportEntry,\n      incomingSupportExit : onRelationExit,\n      incomingAttackEntry : onIncomingAttackEntry,\n      incomingAttackExit : onRelationExit,\n      outgoingSupportEntry : onOutgoingSupportEntry,\n      outgoingSupportExit : onRelationExit,\n      outgoingAttackEntry : onOutgoingAttackEntry,\n      outgoingAttackExit : onRelationExit,\n      contradictionEntry : onContradictionEntry,\n      contradictionExit : onRelationExit,\n      relationsEntry : onRelationsEntry,\n      relationsExit : onRelationsExit,\n      freestyleTextEntry : onFreestyleTextEntry,\n      italicEntry : onItalicEntry,\n      italicExit : onItalicExit,\n      boldEntry : onBoldEntry,\n      boldExit : onBoldExit,\n      LinkEntry : onLinkEntry,\n      TagEntry : onTagEntry\n    }\n  }\n  logRelations(data){\n    for(let statementKey of Object.keys(data.statements)){\n      let statement = data.statements[statementKey];\n      for(let relation of statement.relations){\n        if(relation.from == statement){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n    for(let argumentKey of Object.keys(data.arguments)){\n      let argument = data.arguments[argumentKey];\n      for(let relation of argument.relations){\n        if(relation.from == argument){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n  }\n}\nmodule.exports = {\n  ModelPlugin: ModelPlugin,\n  RelationObjectTypes : RelationObjectTypes\n}\n"]}