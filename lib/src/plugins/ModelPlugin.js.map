{"version":3,"sources":["../../../src/plugins/ModelPlugin.js"],"names":["_","RelationObjectTypes","Object","freeze","STATEMENT","Symbol","RECONSTRUCTED_ARGUMENT","SKETCHED_ARGUMENT","ModelPlugin","request","model","defaultsDeep","getSettings","defaults","response","relations","relation","fromType","getElementType","from","toType","to","argument","index","indexOf","splice","conclusionStatement","pcs","length","equivalenceClass","statements","title","relationExists","existingRelation","type","push","status","obj","config","defaultSettings","removeTagsFromText","name","$","statementReferencePattern","statementDefinitionPattern","statementMentionPattern","argumentReferencePattern","argumentDefinitionPattern","argumentMentionPattern","linkPattern","tagPattern","uniqueTitleCounter","getUniqueTitle","getEquivalenceClass","ec","currentStatement","currentStatementOrArgument","currentArgument","currentArgumentReconstruction","currentInference","rangesStack","parentsStack","currentRelation","inStatementTree","currentHeading","currentSection","sectionCounter","onArgdownEntry","arguments","sections","tags","onStatementEntry","node","parentNode","isRootOfStatementTree","isChildOfStatementTree","statement","onStatementExit","addTags","isEmpty","text","section","members","isUsedAsRootOfStatementTree","isUsedAsChildOfStatementTree","onStatementDefinitionEntry","match","exec","image","onStatementReferenceEntry","onStatementMentionExit","target","trailingWhitespace","range","start","stop","ranges","updateArgument","object","union","onArgumentDefinitionEntry","role","descriptions","onArgumentDefinitionExit","description","last","onArgumentReferenceExit","onArgumentReferenceEntry","onArgumentMentionExit","onFreestyleTextEntry","children","child","EscapedChar","substring","onLinkEntry","linkRange","url","onTagEntry","tag","settings","tagRange","onBoldEntry","boldRange","onBoldExit","boldEnd","pop","onItalicEntry","italicRange","onItalicExit","italicEnd","onRelationExit","contentNode","content","getRelationTarget","onIncomingSupportEntry","onIncomingAttackEntry","onOutgoingSupportEntry","onOutgoingAttackEntry","onContradictionEntry","onIncomingUndercutEntry","onOutgoingUndercutEntry","onRelationsEntry","statementOrArgument","onRelationsExit","onArgumentEntry","childIndex","precedingSibling","Emptyline","onArgumentExit","onArgumentStatementExit","statementNode","isUsedAsConclusion","inference","isUsedAsPremise","statementNr","onInferenceEntry","inferenceRules","metaData","startLine","onInferenceRulesExit","trim","onMetadataStatementExit","key","value","i","onHeadingEntry","onHeadingExit","headingStart","level","sectionId","newSection","parentSection","parent","argdownListeners","argdownEntry","headingEntry","headingExit","statementEntry","statementExit","argumentEntry","argumentExist","argumentStatementExit","inferenceEntry","inferenceRulesExit","metadataStatementExit","StatementDefinitionEntry","StatementReferenceEntry","StatementMentionExit","ArgumentDefinitionEntry","ArgumentReferenceEntry","ArgumentMentionExit","argumentDefinitionExit","argumentReferenceExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","contradictionEntry","contradictionExit","outgoingUndercutEntry","outgoingUndercutExit","incomingUndercutEntry","incomingUndercutExit","relationsEntry","relationsExit","freestyleTextEntry","italicEntry","italicExit","boldEntry","boldExit","LinkEntry","TagEntry","keys","statementKey","console","log","argumentKey","module","exports"],"mappings":"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","file":"ModelPlugin.js","sourcesContent":["import * as _ from \"lodash\";\nimport { Statement } from \"../model/Statement.js\";\nimport { Argument } from \"../model/Argument.js\";\nimport { Relation } from \"../model/Relation.js\";\nimport { Section } from \"../model/Section.js\";\nimport { EquivalenceClass } from \"../model/EquivalenceClass.js\";\nimport { tokenMatcher } from \"chevrotain\";\nimport { ArgdownLexer } from \"./../ArgdownLexer.js\";\n\nconst RelationObjectTypes = Object.freeze({\n    STATEMENT: Symbol(\"STATEMENT\"),\n    RECONSTRUCTED_ARGUMENT: Symbol(\"RECONSTRUCTED ARGUMENT\"),\n    SKETCHED_ARGUMENT: Symbol(\"SKETCHED ARGUMENT\")\n});\n\nclass ModelPlugin {\n    getSettings(request) {\n        if (!request.model) {\n            request.model = {};\n        }\n        return request.model;\n    }\n    prepare(request) {\n        _.defaultsDeep(this.getSettings(request), this.defaults);\n    }\n    run(request, response) {\n        if (response.relations) {\n            for (let relation of response.relations) {\n                let fromType = this.getElementType(relation.from);\n                let toType = this.getElementType(relation.to);\n\n                // For reconstructed arguments: change outgoing argument relations\n                // to outgoing relations of the main conclusion, removing duplicates\n                if (fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT) {\n                    //change relation.from to point to the argument's conclusion\n                    let argument = relation.from;\n\n                    //remove from argument\n                    let index = _.indexOf(argument.relations, relation);\n                    argument.relations.splice(index, 1);\n\n                    let conclusionStatement = argument.pcs[relation.from.pcs.length - 1];\n                    let equivalenceClass = response.statements[conclusionStatement.title];\n                    //change to relation of main conclusion\n                    relation.from = equivalenceClass;\n\n                    //check if this relation already exists\n                    let relationExists = false;\n                    for (let existingRelation of equivalenceClass.relations) {\n                        if (relation.to == existingRelation.to && relation.type == existingRelation.type) {\n                            relationExists = true;\n                            break;\n                        }\n                    }\n                    if (!relationExists) {\n                        equivalenceClass.relations.push(relation);\n                    } else {\n                        //remove relation from target\n                        let index = _.indexOf(relation.to.relations, relation);\n                        relation.to.relations.splice(index, 1);\n                        //remove relation from relations\n                        index = _.indexOf(response.relations, relation);\n                        response.relations.splice(index, 1);\n                    }\n                }\n                //Add relation status: \"Reconstructed\" for statement-to-statement relations, \"sketched\" for all others\n                if (\n                    fromType == RelationObjectTypes.SKETCHED_ARGUMENT ||\n                    toType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT ||\n                    toType == RelationObjectTypes.SKETCHED_ARGUMENT\n                ) {\n                    relation.status = \"sketched\";\n                } else if (\n                    fromType == RelationObjectTypes.STATEMENT ||\n                    fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT\n                ) {\n                    relation.status = \"reconstructed\";\n                }\n            }\n            //Change dialectical types of statement-to-statement relations to semantic types\n            //Doing this in a separate loop makes it easier to identify duplicates in the previous loop,\n            //even though it is less efficient.\n            for (let relation of response.relations) {\n                if (relation.status == \"sketched\") {\n                    continue;\n                }\n                if (relation.type == \"support\") {\n                    relation.type = \"entails\";\n                } else if (relation.type == \"attack\") {\n                    relation.type = \"contrary\";\n                }\n            }\n        }\n\n        return response;\n    }\n    getElementType(obj) {\n        if (obj instanceof Argument) {\n            if (obj.pcs && obj.pcs.length > 0) {\n                return RelationObjectTypes.RECONSTRUCTED_ARGUMENT;\n            } else {\n                return RelationObjectTypes.SKETCHED_ARGUMENT;\n            }\n        } else if (obj instanceof EquivalenceClass) {\n            return RelationObjectTypes.STATEMENT;\n        }\n        return null;\n    }\n    constructor(config) {\n        let defaultSettings = {\n            removeTagsFromText: false\n        };\n        this.defaults = _.defaultsDeep({}, config, defaultSettings);\n        this.name = \"ModelPlugin\";\n        let $ = this;\n\n        const statementReferencePattern = /\\[(.+)\\]/;\n        const statementDefinitionPattern = /\\[(.+)\\]\\:/;\n        const statementMentionPattern = /\\@\\[(.+)\\](\\s?)/;\n        const argumentReferencePattern = /\\<(.+)\\>/;\n        const argumentDefinitionPattern = /\\<(.+)\\>\\:/;\n        const argumentMentionPattern = /\\@\\<(.+)\\>(\\s?)/;\n        // const statementReferenceByNumberPattern = /\\<(.+)\\>\\((.+)\\)/;\n        // const statementDefinitionByNumberPattern = /\\<(.+)\\>\\((.+)\\)\\:/;\n        // const statementMentionByNumberPattern = /\\@\\<(.+)\\>\\((.+)\\)/;\n        const linkPattern = /\\[(.+)\\]\\((.+)\\)/;\n        const tagPattern = /#(?:\\(([^\\)]+)\\)|([a-zA-z0-9-\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+))/;\n\n        let uniqueTitleCounter = 0;\n        function getUniqueTitle() {\n            uniqueTitleCounter++;\n            return \"Untitled \" + uniqueTitleCounter;\n        }\n        function getEquivalenceClass(response, title) {\n            if (!title) {\n                return null;\n            }\n            let ec = null;\n            ec = response.statements[title];\n            if (!ec) {\n                ec = new EquivalenceClass();\n                ec.title = title;\n                response.statements[title] = ec;\n            }\n            return ec;\n        }\n\n        let currentStatement = null;\n        let currentStatementOrArgument = null;\n        let currentArgument = null;\n        let currentArgumentReconstruction = null;\n        let currentInference = null;\n        let rangesStack = [];\n        let parentsStack = [];\n        let currentRelation = null;\n        let inStatementTree = false;\n        let currentHeading = null;\n        let currentSection = null;\n        let sectionCounter = 0;\n\n        function onArgdownEntry(request, response) {\n            if (request.model) {\n                $.config = request.model;\n            }\n            response.statements = {};\n            response.arguments = {};\n            response.sections = [];\n            response.relations = [];\n            response.tags = [];\n            uniqueTitleCounter = 0;\n            currentHeading = null;\n            currentSection = null;\n            currentStatementOrArgument = null;\n            currentArgumentReconstruction = null;\n            currentInference = null;\n            currentArgument = null;\n            rangesStack = [];\n            parentsStack = [];\n            currentRelation = null;\n            inStatementTree = false;\n            sectionCounter = 0;\n        }\n        function onStatementEntry(request, response, node, parentNode) {\n            currentStatement = new Statement();\n            if (parentNode.name == \"argdown\") {\n                currentStatement.isRootOfStatementTree = true;\n                inStatementTree = true;\n            } else if (inStatementTree) {\n                currentStatement.isChildOfStatementTree = true;\n            }\n            currentStatementOrArgument = currentStatement;\n            node.statement = currentStatement;\n        }\n        function onStatementExit(request, response, node) {\n            let statement = node.statement;\n            if (!statement.title || statement.title == \"\") {\n                statement.title = getUniqueTitle();\n            }\n            if (statement.isRootOfStatementTree) {\n                inStatementTree = false;\n            }\n            // //If we are in an argument reconstruction, we have to get argument title and statement number\n            // //getEquivalenceClass will look for equivalenceClasses that were already defined by using a reference to this argumentStatement\n\n            // if (currentArgumentReconstruction && !currentRelation) {\n            //   node.argumentTitle = currentArgumentReconstruction.title;\n            //   node.statementNumber = currentArgumentReconstruction.pcs.length + 1;\n            // }\n            let equivalenceClass = getEquivalenceClass(response, statement.title);\n            node.equivalenceClass = equivalenceClass;\n            if (statement.tags) {\n                addTags(statement.tags, equivalenceClass);\n            }\n            if (!_.isEmpty(statement.text)) {\n                if (currentSection) {\n                    statement.section = currentSection;\n                }\n                equivalenceClass.members.push(statement);\n            }\n            if (statement.isRootOfStatementTree) {\n                equivalenceClass.isUsedAsRootOfStatementTree = true; //members are used outside of argument reconstructions (not as premise or conclusion)\n            } else if (statement.isChildOfStatementTree) {\n                equivalenceClass.isUsedAsChildOfStatementTree = true;\n            }\n            currentStatement = null;\n        }\n        function onStatementDefinitionEntry(request, response, node) {\n            let match = statementDefinitionPattern.exec(node.image);\n            if (match != null) {\n                currentStatement.title = match[1];\n                node.statement = currentStatement;\n            }\n        }\n        // function onStatementDefinitionByNumberEntry(node){\n        //   let match = statementDefinitionByNumberPattern.exec(node.image);\n        //   if (match != null) {\n        //     node.statementUsedInArgument = match[1];\n        //     node.statementNumber = match[2];\n        //     node.statement = currentStatement;\n        //   }\n        // }\n        function onStatementReferenceEntry(request, response, node) {\n            let match = statementReferencePattern.exec(node.image);\n            if (match != null) {\n                currentStatement.title = match[1];\n                node.statement = currentStatement;\n            }\n        }\n        // function onStatementReferenceByNumberEntry(node) {\n        //   let match = statementReferenceByNumberPattern.exec(node.image);\n        //   if (match != null) {\n        //     node.statementUsedInArgument = match[1];\n        //     node.statementNumber = match[2];\n        //     node.statement = currentStatement;\n        //   }\n        // }\n        function onStatementMentionExit(request, response, node) {\n            const target = currentHeading ? currentHeading : currentStatement;\n            let match = statementMentionPattern.exec(node.image);\n            if (match) {\n                node.title = match[1];\n                if (node.image[node.image.length - 1] == \" \") {\n                    node.trailingWhitespace = \" \";\n                } else {\n                    node.trailingWhitespace = \"\";\n                }\n                if (target) {\n                    let range = { type: \"statement-mention\", title: node.title, start: target.text.length };\n                    target.text += node.image;\n                    range.stop = target.text.length - 1;\n                    target.ranges.push(range);\n                }\n            }\n        }\n        // function onStatementMentionByNumberExit(node) {\n        //   const target = (currentHeading) ? currentHeading : currentStatement;\n        //   let match = statementMentionByNumberPattern.exec(node.image);\n        //   if (match) {\n        //     node.argumentTitle = match[1];\n        //     node.statementNumber = match[2];\n        //     if (node.image[node.image.length - 1] == \" \") {\n        //       node.trailingWhitespace = ' ';\n        //     } else {\n        //       node.trailingWhitespace = '';\n        //     }\n        //     if (target) {\n        //       let range = { type: 'statement-mention-by-number', argumentTitle: node.title, statementNumber: node.statementNumber, start: target.text.length };\n        //       target.text += node.image;\n        //       range.stop = target.text.length - 1;\n        //       target.ranges.push(range);\n        //     }\n        //   }\n        // }\n        function updateArgument(response, title) {\n            if (title) {\n                currentArgument = response.arguments[title];\n            }\n            if (!title || !currentArgument) {\n                currentArgument = new Argument();\n                if (!title) {\n                    currentArgument.title = getUniqueTitle();\n                } else {\n                    currentArgument.title = title;\n                }\n                response.arguments[currentArgument.title] = currentArgument;\n            }\n            currentStatementOrArgument = currentArgument;\n            return currentArgument;\n        }\n        function addTags(tags, object) {\n            if (!object.tags) {\n                object.tags = [];\n            }\n            object.tags = _.union(object.tags, tags);\n        }\n        function onArgumentDefinitionEntry(request, response, node, parentNode) {\n            let match = argumentDefinitionPattern.exec(node.image);\n            if (match != null) {\n                let title = match[1];\n                updateArgument(response, title);\n                currentStatement = new Statement();\n                currentStatement.role = \"argument-description\";\n                if (currentSection) {\n                    currentStatement.section = currentSection;\n                }\n                currentArgument.descriptions.push(currentStatement);\n                parentNode.argument = currentArgument;\n            }\n        }\n        function onArgumentDefinitionExit(request, response, node) {\n            if (node.argument) {\n                let description = _.last(node.argument.descriptions);\n                if (description.tags) {\n                    addTags(description.tags, node.argument);\n                }\n            }\n            currentStatement = null;\n            currentArgument = null;\n        }\n        function onArgumentReferenceExit() {\n            currentStatement = null;\n            currentArgument = null;\n        }\n        function onArgumentReferenceEntry(request, response, node, parentNode) {\n            let match = argumentReferencePattern.exec(node.image);\n            if (match != null) {\n                let title = match[1];\n                updateArgument(response, title);\n                parentNode.argument = currentArgument;\n            }\n        }\n        function onArgumentMentionExit(request, response, node) {\n            const target = currentHeading ? currentHeading : currentStatement;\n            let match = argumentMentionPattern.exec(node.image);\n            if (match) {\n                node.title = match[1];\n                if (node.image[node.image.length - 1] == \" \") {\n                    node.trailingWhitespace = \" \";\n                } else {\n                    node.trailingWhitespace = \"\";\n                }\n                if (target) {\n                    let range = { type: \"argument-mention\", title: node.title, start: target.text.length };\n                    target.text += node.image;\n                    range.stop = target.text.length - 1;\n                    target.ranges.push(range);\n                }\n            }\n        }\n        function onFreestyleTextEntry(request, response, node) {\n            const target = currentHeading ? currentHeading : currentStatement;\n            node.text = \"\";\n            for (let child of node.children) {\n                if (tokenMatcher(child, ArgdownLexer.EscapedChar)) {\n                    node.text += child.image.substring(1, child.image.length);\n                } else {\n                    node.text += child.image;\n                }\n            }\n            if (target) {\n                target.text += node.text;\n            }\n        }\n        function onLinkEntry(request, response, node) {\n            const target = currentHeading ? currentHeading : currentStatement;\n            if (!target) {\n                return;\n            }\n            let match = linkPattern.exec(node.image);\n            let linkRange = { type: \"link\", start: target.text.length };\n            node.url = match[2];\n            node.text = match[1];\n            target.text += node.text;\n            linkRange.stop = target.text.length - 1;\n            linkRange.url = node.url;\n            target.ranges.push(linkRange);\n            if (node.image[node.image.length - 1] == \" \") {\n                target.text += \" \";\n                node.trailingWhitespace = \" \";\n            } else {\n                node.trailingWhitespace = \"\";\n            }\n        }\n        function onTagEntry(request, response, node) {\n            const target = currentHeading ? currentHeading : currentStatement;\n            if (!target) {\n                return;\n            }\n            let match = tagPattern.exec(node.image);\n            let tag = match[1] || match[2];\n            const settings = $.getSettings(request);\n            node.tag = tag;\n            if (!settings.removeTagsFromText) {\n                let tagRange = { type: \"tag\", start: target.text.length };\n                node.text = node.image;\n                target.text += node.text;\n                tagRange.stop = target.text.length - 1;\n                tagRange.tag = node.tag;\n                target.ranges.push(tagRange);\n            }\n            target.tags = target.tags || [];\n            let tags = target.tags;\n            if (target.tags.indexOf(tag) == -1) {\n                tags.push(tag);\n            }\n            if (response.tags.indexOf(tag) == -1) {\n                response.tags.push(tag);\n            }\n        }\n        function onBoldEntry() {\n            const target = currentHeading ? currentHeading : currentStatement;\n            if (!target) {\n                return;\n            }\n            let boldRange = { type: \"bold\", start: target.text.length };\n            rangesStack.push(boldRange);\n            target.ranges.push(boldRange);\n        }\n        function onBoldExit(request, response, node) {\n            const target = currentHeading ? currentHeading : currentStatement;\n            if (!target) {\n                return;\n            }\n            let boldEnd = _.last(node.children);\n            if (boldEnd.image[boldEnd.image.length - 1] == \" \") {\n                target.text += \" \";\n                node.trailingWhitespace = \" \";\n            } else {\n                node.trailingWhitespace = \"\";\n            }\n            let range = _.last(rangesStack);\n            range.stop = target.text.length - 1;\n            rangesStack.pop();\n        }\n        function onItalicEntry() {\n            const target = currentHeading ? currentHeading : currentStatement;\n            if (!target) {\n                return;\n            }\n            let italicRange = { type: \"italic\", start: target.text.length };\n            rangesStack.push(italicRange);\n            target.ranges.push(italicRange);\n        }\n        function onItalicExit(request, response, node) {\n            const target = currentHeading ? currentHeading : currentStatement;\n            if (!target) {\n                return;\n            }\n            let italicEnd = _.last(node.children);\n            if (italicEnd.image[italicEnd.image.length - 1] == \" \") {\n                target.text += \" \";\n                node.trailingWhitespace = \" \";\n            } else {\n                node.trailingWhitespace = \"\";\n            }\n            let range = _.last(rangesStack);\n            range.stop = target.text.length - 1;\n            rangesStack.pop();\n        }\n\n        function onRelationExit(request, response, node) {\n            let relation = node.relation;\n            let contentNode = node.children[1];\n            let content = contentNode.argument || contentNode.statement;\n            let target = getRelationTarget(response, content);\n            if (relation) {\n                if (relation.from) {\n                    relation.to = target;\n                } else {\n                    relation.from = target;\n                }\n                let relationExists = false;\n                for (let existingRelation of relation.from.relations) {\n                    if (relation.to == existingRelation.to && relation.type == existingRelation.type) {\n                        relationExists = true;\n                        break;\n                    } else if (\n                        relation.type == \"contradictory\" &&\n                        relation.type == existingRelation.type &&\n                        relation.from == existingRelation.to &&\n                        relation.to == existingRelation.from\n                    ) {\n                        relationExists = true;\n                        break;\n                    }\n                }\n                if (!relationExists) {\n                    response.relations.push(relation);\n                    relation.from.relations.push(relation);\n                    relation.to.relations.push(relation);\n                }\n            }\n        }\n        function onIncomingSupportEntry(request, response, node) {\n            let target = _.last(parentsStack);\n            currentRelation = new Relation(\"support\");\n            currentRelation.from = target;\n            node.relation = currentRelation;\n        }\n        function onIncomingAttackEntry(request, response, node) {\n            let target = _.last(parentsStack);\n            currentRelation = new Relation(\"attack\");\n            currentRelation.from = target;\n            node.relation = currentRelation;\n        }\n        function onOutgoingSupportEntry(request, response, node) {\n            let target = _.last(parentsStack);\n            currentRelation = new Relation(\"support\");\n            currentRelation.to = target;\n            node.relation = currentRelation;\n        }\n        function onOutgoingAttackEntry(request, response, node) {\n            let target = _.last(parentsStack);\n            currentRelation = new Relation(\"attack\");\n            currentRelation.to = target;\n            node.relation = currentRelation;\n        }\n        function onContradictionEntry(request, response, node) {\n            let target = _.last(parentsStack);\n            currentRelation = new Relation(\"contradictory\");\n            currentRelation.from = target;\n            node.relation = currentRelation;\n        }\n        function onIncomingUndercutEntry(request, response, node) {\n            let target = _.last(parentsStack);\n            currentRelation = new Relation(\"undercut\");\n            currentRelation.from = target;\n            node.relation = currentRelation;\n        }\n        function onOutgoingUndercutEntry(request, response, node) {\n            let target = _.last(parentsStack);\n            currentRelation = new Relation(\"undercut\");\n            currentRelation.to = target;\n            node.relation = currentRelation;\n        }\n\n        function onRelationsEntry(request, response) {\n            parentsStack.push(getRelationTarget(response, currentStatementOrArgument));\n        }\n        function getRelationTarget(response, statementOrArgument) {\n            let target = statementOrArgument;\n            if (statementOrArgument instanceof Statement) {\n                if (!statementOrArgument.title) statementOrArgument.title = getUniqueTitle();\n                target = getEquivalenceClass(response, statementOrArgument.title);\n            }\n            return target;\n        }\n        function onRelationsExit() {\n            currentRelation = null;\n            parentsStack.pop();\n        }\n\n        function onArgumentEntry(request, response, node, parentNode, childIndex) {\n            let argument = null;\n            if (childIndex > 0) {\n                let precedingSibling = parentNode.children[childIndex - 1];\n                if (precedingSibling.name == \"argumentReference\" || precedingSibling.name == \"argumentDefinition\") {\n                    argument = precedingSibling.argument;\n                } else if (tokenMatcher(precedingSibling, ArgdownLexer.Emptyline)) {\n                    precedingSibling = parentNode.children[childIndex - 2];\n                    if (precedingSibling.name == \"argumentReference\" || precedingSibling.name == \"argumentDefinition\") {\n                        argument = precedingSibling.argument;\n                    }\n                }\n            }\n            if (!argument) {\n                argument = updateArgument(response);\n            }\n            if (currentSection) {\n                argument.section = currentSection;\n            }\n            //if there is a previous reconstruction, overwrite it\n            if (argument.pcs.length > 0) {\n                //TODO: throw error\n                argument.pcs = [];\n            }\n            node.argument = argument;\n            currentArgumentReconstruction = argument;\n        }\n        function onArgumentExit() {\n            currentStatement = null;\n            currentArgument = null;\n            currentArgumentReconstruction = null;\n        }\n        function onArgumentStatementExit(request, response, node, parentNode, childIndex) {\n            if (node.children.length > 1) {\n                //first node is ArgdownLexer.ArgumentStatementStart\n                let statementNode = node.children[1];\n                let statement = statementNode.statement;\n                let ec = getEquivalenceClass(response, statement.title);\n                statement.role = \"premise\";\n                if (childIndex > 0) {\n                    let precedingSibling = parentNode.children[childIndex - 1];\n                    if (precedingSibling.name == \"inference\") {\n                        statement.role = \"conclusion\";\n                        ec.isUsedAsConclusion = true;\n                        statement.inference = precedingSibling.inference;\n                    }\n                }\n                if (statement.role == \"premise\") {\n                    ec.isUsedAsPremise = true;\n                }\n                currentArgumentReconstruction.pcs.push(statement);\n                node.statement = statement;\n                node.statementNr = currentArgumentReconstruction.pcs.length;\n            }\n        }\n        function onInferenceEntry(request, response, node) {\n            currentInference = { inferenceRules: [], metaData: {}, startLine: node.startLine };\n            node.inference = currentInference;\n        }\n        function onInferenceRulesExit(request, response, node) {\n            for (let child of node.children) {\n                if (child.name == \"freestyleText\") {\n                    currentInference.inferenceRules.push(child.text.trim());\n                }\n            }\n        }\n        function onMetadataStatementExit(request, response, node) {\n            let key = node.children[0].text;\n            let value = null;\n            if (node.children.length == 2) {\n                value = node.children[1].text;\n            } else {\n                value = [];\n                for (let i = 1; i < node.children.length; i++) {\n                    value.push(node.children[i].text);\n                }\n            }\n            currentInference.metaData[key] = value;\n        }\n        function onHeadingEntry(request, response, node) {\n            currentHeading = node;\n            currentHeading.text = \"\";\n            currentHeading.ranges = [];\n        }\n        function onHeadingExit(request, response, node) {\n            let headingStart = node.children[0];\n            currentHeading.level = headingStart.image.length - 1; //number of # - whitespace\n            sectionCounter++;\n            let sectionId = \"s\" + sectionCounter;\n            let newSection = new Section(\n                sectionId,\n                currentHeading.level,\n                currentHeading.text,\n                currentHeading.ranges,\n                currentHeading.tags\n            );\n\n            if (newSection.level > 1 && currentSection) {\n                let parentSection = currentSection;\n                while (parentSection.parent && parentSection.level >= newSection.level) {\n                    parentSection = parentSection.parent;\n                }\n                parentSection.children.push(newSection);\n                newSection.parent = parentSection;\n            } else {\n                response.sections.push(newSection);\n            }\n            currentSection = newSection;\n            currentHeading = null;\n        }\n\n        this.argdownListeners = {\n            argdownEntry: onArgdownEntry,\n            headingEntry: onHeadingEntry,\n            headingExit: onHeadingExit,\n            statementEntry: onStatementEntry,\n            statementExit: onStatementExit,\n            argumentEntry: onArgumentEntry,\n            argumentExist: onArgumentExit,\n            argumentStatementExit: onArgumentStatementExit,\n            inferenceEntry: onInferenceEntry,\n            inferenceRulesExit: onInferenceRulesExit,\n            metadataStatementExit: onMetadataStatementExit,\n            StatementDefinitionEntry: onStatementDefinitionEntry,\n            // StatementDefinitionByNumberEntry : onStatementDefinitionByNumberEntry,\n            StatementReferenceEntry: onStatementReferenceEntry,\n            // StatementReferenceByNumberEntry : onStatementReferenceByNumberEntry,\n            StatementMentionExit: onStatementMentionExit,\n            // StatementMentionByNumberExit : onStatementMentionByNumberExit,\n            ArgumentDefinitionEntry: onArgumentDefinitionEntry,\n            ArgumentReferenceEntry: onArgumentReferenceEntry,\n            ArgumentMentionExit: onArgumentMentionExit,\n            argumentDefinitionExit: onArgumentDefinitionExit,\n            argumentReferenceExit: onArgumentReferenceExit,\n            incomingSupportEntry: onIncomingSupportEntry,\n            incomingSupportExit: onRelationExit,\n            incomingAttackEntry: onIncomingAttackEntry,\n            incomingAttackExit: onRelationExit,\n            outgoingSupportEntry: onOutgoingSupportEntry,\n            outgoingSupportExit: onRelationExit,\n            outgoingAttackEntry: onOutgoingAttackEntry,\n            outgoingAttackExit: onRelationExit,\n            contradictionEntry: onContradictionEntry,\n            contradictionExit: onRelationExit,\n            outgoingUndercutEntry: onOutgoingUndercutEntry,\n            outgoingUndercutExit: onRelationExit,\n            incomingUndercutEntry: onIncomingUndercutEntry,\n            incomingUndercutExit: onRelationExit,\n            relationsEntry: onRelationsEntry,\n            relationsExit: onRelationsExit,\n            freestyleTextEntry: onFreestyleTextEntry,\n            italicEntry: onItalicEntry,\n            italicExit: onItalicExit,\n            boldEntry: onBoldEntry,\n            boldExit: onBoldExit,\n            LinkEntry: onLinkEntry,\n            TagEntry: onTagEntry\n        };\n    }\n    logRelations(response) {\n        for (let statementKey of Object.keys(response.statements)) {\n            let statement = response.statements[statementKey];\n            for (let relation of statement.relations) {\n                if (relation.from == statement) {\n                    console.log(\n                        \"Relation from: \" +\n                            relation.from.title +\n                            \" to: \" +\n                            relation.to.title +\n                            \" type: \" +\n                            relation.type\n                    );\n                }\n            }\n        }\n        for (let argumentKey of Object.keys(response.arguments)) {\n            let argument = response.arguments[argumentKey];\n            for (let relation of argument.relations) {\n                if (relation.from == argument) {\n                    console.log(\n                        \"Relation from: \" +\n                            relation.from.title +\n                            \" to: \" +\n                            relation.to.title +\n                            \" type: \" +\n                            relation.type\n                    );\n                }\n            }\n        }\n    }\n}\nmodule.exports = {\n    ModelPlugin: ModelPlugin,\n    RelationObjectTypes: RelationObjectTypes\n};\n"]}