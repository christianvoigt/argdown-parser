{"version":3,"sources":["../../../src/plugins/ModelPlugin.js"],"names":["_","RelationObjectTypes","Object","freeze","STATEMENT","Symbol","RECONSTRUCTED_ARGUMENT","SKETCHED_ARGUMENT","ModelPlugin","request","response","model","reset","relations","relation","fromType","getElementType","from","toType","to","argument","index","indexOf","splice","conclusionStatement","pcs","length","equivalenceClass","statements","title","relationExists","existingRelation","type","push","status","obj","config","defaultSettings","removeTagsFromText","name","$","statementReferencePattern","statementDefinitionPattern","statementMentionPattern","argumentReferencePattern","argumentDefinitionPattern","argumentMentionPattern","linkPattern","tagPattern","uniqueTitleCounter","getUniqueTitle","getEquivalenceClass","ec","currentStatement","currentStatementOrArgument","currentArgument","currentArgumentReconstruction","currentInference","rangesStack","parentsStack","currentRelation","inStatementTree","currentHeading","currentSection","sectionCounter","onArgdownEntry","arguments","sections","tags","onStatementEntry","node","parentNode","isRootOfStatementTree","isChildOfStatementTree","statement","onStatementExit","addTags","isEmpty","text","section","members","isUsedAsRootOfStatementTree","isUsedAsChildOfStatementTree","onStatementDefinitionEntry","match","exec","image","onStatementReferenceEntry","onStatementMentionExit","target","trailingWhitespace","range","start","stop","ranges","updateArgument","object","union","onArgumentDefinitionEntry","role","descriptions","onArgumentDefinitionExit","description","last","onArgumentReferenceExit","onArgumentReferenceEntry","onArgumentMentionExit","onFreestyleTextEntry","children","child","EscapedChar","substring","onLinkEntry","linkRange","url","onTagEntry","tag","settings","tagRange","onBoldEntry","boldRange","onBoldExit","boldEnd","pop","onItalicEntry","italicRange","onItalicExit","italicEnd","onRelationExit","contentNode","content","getRelationTarget","onIncomingSupportEntry","onIncomingAttackEntry","onOutgoingSupportEntry","onOutgoingAttackEntry","onContradictionEntry","onIncomingUndercutEntry","onOutgoingUndercutEntry","onRelationsEntry","statementOrArgument","onRelationsExit","onArgumentEntry","childIndex","precedingSibling","Emptyline","onArgumentExit","onArgumentStatementExit","statementNode","isUsedAsConclusion","inference","isUsedAsPremise","statementNr","onInferenceEntry","inferenceRules","metaData","onInferenceRulesExit","trim","onMetadataStatementExit","key","value","i","onHeadingEntry","onHeadingExit","headingStart","level","sectionId","newSection","parentSection","parent","argdownListeners","argdownEntry","headingEntry","headingExit","statementEntry","statementExit","argumentEntry","argumentExist","argumentStatementExit","inferenceEntry","inferenceRulesExit","metadataStatementExit","StatementDefinitionEntry","StatementReferenceEntry","StatementMentionExit","ArgumentDefinitionEntry","ArgumentReferenceEntry","ArgumentMentionExit","argumentDefinitionExit","argumentReferenceExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","contradictionEntry","contradictionExit","outgoingUndercutEntry","outgoingUndercutExit","incomingUndercutEntry","incomingUndercutExit","relationsEntry","relationsExit","freestyleTextEntry","italicEntry","italicExit","boldEntry","boldExit","LinkEntry","TagEntry","keys","statementKey","console","log","argumentKey","module","exports"],"mappings":"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","file":"ModelPlugin.js","sourcesContent":["import * as _ from 'lodash';\nimport {Statement} from '../model/Statement.js';\nimport {Argument} from '../model/Argument.js';\nimport {Relation} from '../model/Relation.js';\nimport {Section} from '../model/Section.js';\nimport {EquivalenceClass} from '../model/EquivalenceClass.js';\nimport {tokenMatcher} from 'chevrotain';\nimport {ArgdownLexer} from './../ArgdownLexer.js';\nimport { PluginWithSettings } from \"./PluginWithSettings.js\";\n\nconst RelationObjectTypes = Object.freeze({STATEMENT: Symbol(\"STATEMENT\"), RECONSTRUCTED_ARGUMENT: Symbol(\"RECONSTRUCTED ARGUMENT\"), SKETCHED_ARGUMENT: Symbol(\"SKETCHED ARGUMENT\")});\n\nclass ModelPlugin extends PluginWithSettings{\n  run(request, response){\n    if(request.model){\n      this.reset(request.model);\n    }else{\n      this.reset();\n    }\n\n    if(response.relations){\n      for(let relation of response.relations){\n        let fromType = this.getElementType(relation.from);\n        let toType = this.getElementType(relation.to);\n        \n        // For reconstructed arguments: change outgoing argument relations \n        // to outgoing relations of the main conclusion, removing duplicates\n        if(fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT){\n          //change relation.from to point to the argument's conclusion\n          let argument = relation.from;\n          \n          //remove from argument\n          let index = _.indexOf(argument.relations, relation);\n          argument.relations.splice(index, 1);\n                    \n          let conclusionStatement = argument.pcs[relation.from.pcs.length - 1];\n          let equivalenceClass = response.statements[conclusionStatement.title];\n          //change to relation of main conclusion\n          relation.from = equivalenceClass;\n\n          //check if this relation already exists\n          let relationExists = false;\n          for(let existingRelation of equivalenceClass.relations){\n            if(relation.to == existingRelation.to && relation.type == existingRelation.type){\n              relationExists = true;\n              break;\n            }\n          }\n          if(!relationExists){\n            equivalenceClass.relations.push(relation);            \n          }else{\n            //remove relation from target\n            let index = _.indexOf(relation.to.relations, relation);\n            relation.to.relations.splice(index, 1);\n            //remove relation from relations\n            index = _.indexOf(response.relations, relation);\n            response.relations.splice(index, 1);\n          }\n        }\n        //Add relation status: \"Reconstructed\" for statement-to-statement relations, \"sketched\" for all others\n        if(fromType == RelationObjectTypes.SKETCHED_ARGUMENT \n          ||toType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT \n          ||toType == RelationObjectTypes.SKETCHED_ARGUMENT){\n          relation.status = \"sketched\";\n        }else if(fromType == RelationObjectTypes.STATEMENT \n          ||fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT){\n          relation.status = \"reconstructed\";\n        }\n      }\n      //Change dialectical types of statement-to-statement relations to semantic types\n      //Doing this in a separate loop makes it easier to identify duplicates in the previous loop, \n      //even though it is less efficient.\n      for(let relation of response.relations){\n        if(relation.status == \"sketched\"){\n          continue;\n        }\n        if(relation.type == \"support\"){\n          relation.type = \"entails\";\n        }else if(relation.type == \"attack\"){\n          relation.type = \"contrary\"\n        }        \n      }\n    }\n\n    return response;\n  }\n  getElementType(obj){\n    if(obj instanceof Argument){\n      if(obj.pcs && obj.pcs.length > 0){\n        return RelationObjectTypes.RECONSTRUCTED_ARGUMENT;\n      }else{\n        return RelationObjectTypes.SKETCHED_ARGUMENT;\n      }\n    }else if(obj instanceof EquivalenceClass){\n        return RelationObjectTypes.STATEMENT;\n    }\n    return null;\n  }\n  constructor(config){\n    let defaultSettings = {\n        removeTagsFromText: false\n    }\n    super(defaultSettings, config);\n    this.name = \"ModelPlugin\";    \n    let $ = this;\n\n    const statementReferencePattern = /\\[(.+)\\]/;\n    const statementDefinitionPattern = /\\[(.+)\\]\\:/;\n    const statementMentionPattern = /\\@\\[(.+)\\](\\s?)/;\n    const argumentReferencePattern = /\\<(.+)\\>/;\n    const argumentDefinitionPattern = /\\<(.+)\\>\\:/;\n    const argumentMentionPattern = /\\@\\<(.+)\\>(\\s?)/;\n    // const statementReferenceByNumberPattern = /\\<(.+)\\>\\((.+)\\)/;\n    // const statementDefinitionByNumberPattern = /\\<(.+)\\>\\((.+)\\)\\:/;\n    // const statementMentionByNumberPattern = /\\@\\<(.+)\\>\\((.+)\\)/;\n    const linkPattern = /\\[(.+)\\]\\((.+)\\)/;\n    const tagPattern = /#(?:\\(([^\\)]+)\\)|([a-zA-z0-9-\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+))/;\n\n    let uniqueTitleCounter = 0;\n    function getUniqueTitle(){\n      uniqueTitleCounter++;\n      return \"Untitled \"+uniqueTitleCounter;\n    }\n    function getEquivalenceClass(response, title){\n      if(!title){\n        return null;\n      }\n      let ec = null;\n      ec = response.statements[title];\n      if (!ec) {\n        ec = new EquivalenceClass();\n        ec.title = title;\n        response.statements[title] = ec;\n      }\n      return ec;\n    }\n\n    let currentStatement = null;\n    let currentStatementOrArgument = null;\n    let currentArgument = null;\n    let currentArgumentReconstruction = null;\n    let currentInference = null;\n    let rangesStack = [];\n    let parentsStack = [];\n    let currentRelation = null;\n    let inStatementTree = false;\n    let currentHeading = null;\n    let currentSection = null;\n    let sectionCounter = 0;\n\n    function onArgdownEntry(request, response){\n      if(request.model){\n        $.config = request.model;\n      }\n      response.statements = {};\n      response.arguments = {};\n      response.sections = [];\n      response.relations = [];\n      response.tags = [];\n      uniqueTitleCounter = 0;\n      currentHeading = null;\n      currentSection = null;\n      currentStatementOrArgument = null;\n      currentArgumentReconstruction = null;\n      currentInference = null;\n      currentArgument = null;\n      rangesStack = [];\n      parentsStack = [];\n      currentRelation = null;\n      inStatementTree = false;\n      sectionCounter = 0;\n    }\n    function onStatementEntry(request, response, node, parentNode){\n      currentStatement = new Statement();\n      if(parentNode.name == 'argdown'){\n          currentStatement.isRootOfStatementTree = true;\n          inStatementTree = true;\n      }else if(inStatementTree){\n        currentStatement.isChildOfStatementTree = true;\n      }\n      currentStatementOrArgument = currentStatement;\n      node.statement = currentStatement;\n    }\n    function onStatementExit(request, response, node){\n      let statement = node.statement;\n      if(!statement.title || statement.title == ''){\n        statement.title = getUniqueTitle();\n      }\n      if(statement.isRootOfStatementTree){\n        inStatementTree = false;\n      }\n      // //If we are in an argument reconstruction, we have to get argument title and statement number\n      // //getEquivalenceClass will look for equivalenceClasses that were already defined by using a reference to this argumentStatement\n      \n      // if (currentArgumentReconstruction && !currentRelation) {\n      //   node.argumentTitle = currentArgumentReconstruction.title;\n      //   node.statementNumber = currentArgumentReconstruction.pcs.length + 1;\n      // }\n      let equivalenceClass = getEquivalenceClass(response, statement.title);\n      node.equivalenceClass = equivalenceClass;\n      if(statement.tags){\n        addTags(statement.tags, equivalenceClass);\n      }\n      if(!_.isEmpty(statement.text)){\n        if(currentSection){\n          statement.section = currentSection;\n        }\n        equivalenceClass.members.push(statement);        \n      }\n      if(statement.isRootOfStatementTree){\n        equivalenceClass.isUsedAsRootOfStatementTree = true; //members are used outside of argument reconstructions (not as premise or conclusion)\n      }else if(statement.isChildOfStatementTree){\n        equivalenceClass.isUsedAsChildOfStatementTree = true;\n      }\n      currentStatement = null;\n    }\n    function onStatementDefinitionEntry(request, response, node){\n      let match = statementDefinitionPattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    // function onStatementDefinitionByNumberEntry(node){\n    //   let match = statementDefinitionByNumberPattern.exec(node.image);\n    //   if (match != null) {\n    //     node.statementUsedInArgument = match[1];\n    //     node.statementNumber = match[2];\n    //     node.statement = currentStatement;\n    //   }      \n    // }\n    function onStatementReferenceEntry(request, response, node){\n      let match = statementReferencePattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    // function onStatementReferenceByNumberEntry(node) {\n    //   let match = statementReferenceByNumberPattern.exec(node.image);\n    //   if (match != null) {\n    //     node.statementUsedInArgument = match[1];\n    //     node.statementNumber = match[2];\n    //     node.statement = currentStatement;\n    //   }\n    // }\n    function onStatementMentionExit(request, response, node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      let match = statementMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(target){\n          let range = {type:'statement-mention',title:node.title, start:target.text.length};\n          target.text += node.image;\n          range.stop = target.text.length -1;\n          target.ranges.push(range);\n        }\n      }\n    }\n    // function onStatementMentionByNumberExit(node) {\n    //   const target = (currentHeading) ? currentHeading : currentStatement;\n    //   let match = statementMentionByNumberPattern.exec(node.image);\n    //   if (match) {\n    //     node.argumentTitle = match[1];\n    //     node.statementNumber = match[2];\n    //     if (node.image[node.image.length - 1] == \" \") {\n    //       node.trailingWhitespace = ' ';\n    //     } else {\n    //       node.trailingWhitespace = '';\n    //     }\n    //     if (target) {\n    //       let range = { type: 'statement-mention-by-number', argumentTitle: node.title, statementNumber: node.statementNumber, start: target.text.length };\n    //       target.text += node.image;\n    //       range.stop = target.text.length - 1;\n    //       target.ranges.push(range);\n    //     }\n    //   }\n    // }\n    function updateArgument(response, title){\n      if(title){\n        currentArgument = response.arguments[title];        \n      }\n      if(!title ||!currentArgument){\n        currentArgument = new Argument();\n        if(!title){\n          currentArgument.title = getUniqueTitle();\n        }else {\n          currentArgument.title = title;\n        }\n        response.arguments[currentArgument.title] = currentArgument;\n      }\n      currentStatementOrArgument = currentArgument;\n      return currentArgument;\n    }\n    function addTags(tags, object){\n      if(!object.tags){\n        object.tags = [];\n      }\n      object.tags = _.union(object.tags, tags);\n    }\n    function onArgumentDefinitionEntry(request, response, node, parentNode){\n      let match = argumentDefinitionPattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(response, title);\n        currentStatement = new Statement();\n        currentStatement.role = \"argument-description\";\n        if(currentSection){          \n          currentStatement.section = currentSection;\n        }\n        currentArgument.descriptions.push(currentStatement);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentDefinitionExit(request, response, node){\n      if(node.argument){\n        let description = _.last(node.argument.descriptions);\n        if(description.tags){\n          addTags(description.tags, node.argument);\n        }\n      }\n      currentStatement = null;\n      currentArgument = null;\n    }\n    function onArgumentReferenceExit(){\n      currentStatement = null;\n      currentArgument = null;\n    }\n    function onArgumentReferenceEntry(request, response, node, parentNode){\n      let match = argumentReferencePattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(response, title);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentMentionExit(request, response, node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      let match = argumentMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(target){\n          let range = {type:'argument-mention',title:node.title, start:target.text.length};\n          target.text += node.image;\n          range.stop = target.text.length -1;\n          target.ranges.push(range);\n        }\n      }\n    }\n    function onFreestyleTextEntry(request, response, node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      node.text = \"\";\n      for(let child of node.children){\n        if (tokenMatcher(child, ArgdownLexer.EscapedChar)) {\n          node.text += child.image.substring(1, child.image.length);\n        }else{\n          node.text += child.image;\n        }\n      }\n      if(target){\n        target.text += node.text;        \n      }\n    }\n    function onLinkEntry(request, response, node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let match = linkPattern.exec(node.image);\n      let linkRange = {type:'link', start: target.text.length};\n      node.url = match[2];\n      node.text = match[1];\n      target.text += node.text;\n      linkRange.stop = target.text.length - 1;\n      linkRange.url = node.url;\n      target.ranges.push(linkRange);\n      if(node.image[node.image.length - 1] == ' '){\n        target.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n    }\n    function onTagEntry(request, response, node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let match = tagPattern.exec(node.image);\n      let tag = match[1] || match[2];\n      node.tag = tag;\n      if(!$.settings.removeTagsFromText){\n        let tagRange = {type:'tag', start: target.text.length};\n        node.text = node.image;        \n        target.text += node.text;\n        tagRange.stop = target.text.length - 1;\n        tagRange.tag = node.tag;\n        target.ranges.push(tagRange);\n      }\n      target.tags = target.tags ||[];\n      let tags = target.tags;\n      if(target.tags.indexOf(tag) == -1){\n        tags.push(tag);\n      }\n      if(response.tags.indexOf(tag) == -1){\n        response.tags.push(tag);\n      }\n    }\n    function onBoldEntry(){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let boldRange = {type:'bold', start: target.text.length};\n      rangesStack.push(boldRange);\n      target.ranges.push(boldRange);\n    }\n    function onBoldExit(request, response, node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let boldEnd = _.last(node.children);\n      if(boldEnd.image[boldEnd.image.length - 1] == ' '){\n        target.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = target.text.length - 1;\n      rangesStack.pop();\n    }\n    function onItalicEntry(){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let italicRange = {type:'italic', start: target.text.length};\n      rangesStack.push(italicRange);\n      target.ranges.push(italicRange);\n    }\n    function onItalicExit(request, response, node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let italicEnd = _.last(node.children);\n      if(italicEnd.image[italicEnd.image.length - 1] == ' '){\n        target.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = target.text.length - 1;\n      rangesStack.pop();\n    }\n\n    function onRelationExit(request, response, node){\n      let relation = node.relation;\n      let contentNode = node.children[1];\n      let content = contentNode.argument ||contentNode.statement;\n      let target = getRelationTarget(response, content);\n      if(relation){\n        if(relation.from){\n          relation.to = target;\n        }else {\n          relation.from = target;\n        }\n        let relationExists = false;\n        for(let existingRelation of relation.from.relations){\n          if(relation.to == existingRelation.to && relation.type == existingRelation.type){\n            relationExists = true;\n            break;\n          }else if(relation.type == \"contradictory\" && relation.type == existingRelation.type && relation.from == existingRelation.to && relation.to == existingRelation.from){\n            relationExists = true;\n            break;\n          }\n        }\n        if(!relationExists){\n          response.relations.push(relation);\n          relation.from.relations.push(relation);\n          relation.to.relations.push(relation);\n        }\n      }\n    }\n    function onIncomingSupportEntry(request, response, node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"support\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onIncomingAttackEntry(request, response, node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"attack\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onOutgoingSupportEntry(request, response, node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"support\");\n      currentRelation.to = target;\n      node.relation = currentRelation;\n    }\n    function onOutgoingAttackEntry(request, response, node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"attack\");\n      currentRelation.to = target;\n      node.relation = currentRelation;\n    }\n    function onContradictionEntry(request, response, node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"contradictory\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onIncomingUndercutEntry(request, response, node) {\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"undercut\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onOutgoingUndercutEntry(request, response, node) {\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"undercut\");\n      currentRelation.to = target;\n      node.relation = currentRelation;\n    }\n\n    function onRelationsEntry(request, response){\n      parentsStack.push(getRelationTarget(response, currentStatementOrArgument));\n    }\n    function getRelationTarget(response, statementOrArgument){\n      let target = statementOrArgument;\n      if(statementOrArgument instanceof Statement){\n        if(!statementOrArgument.title)\n          statementOrArgument.title = getUniqueTitle();\n        target = getEquivalenceClass(response, statementOrArgument.title);\n      }\n      return target;\n    }\n    function onRelationsExit(){\n      currentRelation = null;\n      parentsStack.pop();\n    }\n\n    function onArgumentEntry(request, response, node, parentNode, childIndex){\n      let argument = null;\n      if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n            argument = precedingSibling.argument;\n          }else if(tokenMatcher(precedingSibling, ArgdownLexer.Emptyline)){\n            precedingSibling = parentNode.children[childIndex - 2];\n            if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n              argument = precedingSibling.argument;\n            }\n          }\n        }\n        if(!argument){\n          argument = updateArgument(response);\n        }\n        if(currentSection){\n          argument.section = currentSection;\n        }\n        //if there is a previous reconstruction, overwrite it\n        if(argument.pcs.length > 0){\n          //TODO: throw error\n          argument.pcs = [];\n        }\n        node.argument = argument;\n        currentArgumentReconstruction = argument;\n    }\n    function onArgumentExit(){\n      currentStatement = null;\n      currentArgument = null;\n      currentArgumentReconstruction = null;\n    }\n    function onArgumentStatementExit(request, response, node, parentNode, childIndex){\n      if(node.children.length > 1){\n        //first node is ArgdownLexer.ArgumentStatementStart\n        let statementNode = node.children[1];\n        let statement = statementNode.statement;\n        let ec = getEquivalenceClass(response, statement.title);\n        statement.role = \"premise\";\n        if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'inference'){\n            statement.role = \"conclusion\";\n            ec.isUsedAsConclusion = true;\n            statement.inference = precedingSibling.inference;\n          }\n        }\n        if(statement.role == \"premise\"){\n          ec.isUsedAsPremise = true;\n        }\n        currentArgumentReconstruction.pcs.push(statement);\n        node.statement = statement;\n        node.statementNr = currentArgumentReconstruction.pcs.length;\n      }\n    }\n    function onInferenceEntry(request, response, node){\n      currentInference = {inferenceRules:[], metaData:{}};\n      node.inference = currentInference;\n    }\n    function onInferenceRulesExit(request, response, node){\n      for(let child of node.children){\n        if(child.name == 'freestyleText'){\n          currentInference.inferenceRules.push(child.text.trim());\n        }\n      }\n    }\n    function onMetadataStatementExit(request, response, node){\n      let key = node.children[0].text;\n      let value = null;\n      if(node.children.length == 2){\n        value = node.children[1].text;\n      }else{\n        value = [];\n        for(let i = 1; i < node.children.length; i++){\n          value.push(node.children[i].text);\n        }\n      }\n      currentInference.metaData[key] = value;\n    }\n    function onHeadingEntry(request, response, node){\n      currentHeading = node;\n      currentHeading.text = '';\n      currentHeading.ranges = [];\n    }\n    function onHeadingExit(request, response, node){\n      let headingStart = node.children[0];\n      currentHeading.level = headingStart.image.length - 1; //number of # - whitespace\n      sectionCounter++;\n      let sectionId = 's'+sectionCounter;\n      let newSection = new Section(sectionId, currentHeading.level, currentHeading.text, currentHeading.ranges, currentHeading.tags);\n      \n      if(newSection.level > 1 && currentSection){\n        let parentSection = currentSection;\n        while(parentSection.parent && parentSection.level >= newSection.level){\n          parentSection = parentSection.parent;\n        }\n        parentSection.children.push(newSection);\n        newSection.parent = parentSection;        \n      }else{\n        response.sections.push(newSection);\n      }\n      currentSection = newSection;\n      currentHeading = null;\n    }\n\n    this.argdownListeners = {\n      argdownEntry : onArgdownEntry,\n      headingEntry : onHeadingEntry,\n      headingExit : onHeadingExit,\n      statementEntry : onStatementEntry,\n      statementExit : onStatementExit,\n      argumentEntry : onArgumentEntry,\n      argumentExist : onArgumentExit,\n      argumentStatementExit : onArgumentStatementExit,\n      inferenceEntry : onInferenceEntry,\n      inferenceRulesExit : onInferenceRulesExit,\n      metadataStatementExit : onMetadataStatementExit,\n      StatementDefinitionEntry : onStatementDefinitionEntry,\n      // StatementDefinitionByNumberEntry : onStatementDefinitionByNumberEntry,\n      StatementReferenceEntry : onStatementReferenceEntry,\n      // StatementReferenceByNumberEntry : onStatementReferenceByNumberEntry,\n      StatementMentionExit : onStatementMentionExit,\n      // StatementMentionByNumberExit : onStatementMentionByNumberExit,\n      ArgumentDefinitionEntry : onArgumentDefinitionEntry,\n      ArgumentReferenceEntry : onArgumentReferenceEntry,\n      ArgumentMentionExit : onArgumentMentionExit,\n      argumentDefinitionExit : onArgumentDefinitionExit,\n      argumentReferenceExit : onArgumentReferenceExit,\n      incomingSupportEntry : onIncomingSupportEntry,\n      incomingSupportExit : onRelationExit,\n      incomingAttackEntry : onIncomingAttackEntry,\n      incomingAttackExit : onRelationExit,\n      outgoingSupportEntry : onOutgoingSupportEntry,\n      outgoingSupportExit : onRelationExit,\n      outgoingAttackEntry : onOutgoingAttackEntry,\n      outgoingAttackExit : onRelationExit,\n      contradictionEntry : onContradictionEntry,\n      contradictionExit : onRelationExit,\n      outgoingUndercutEntry : onOutgoingUndercutEntry,\n      outgoingUndercutExit : onRelationExit,\n      incomingUndercutEntry: onIncomingUndercutEntry,\n      incomingUndercutExit: onRelationExit,      \n      relationsEntry : onRelationsEntry,\n      relationsExit : onRelationsExit,\n      freestyleTextEntry : onFreestyleTextEntry,\n      italicEntry : onItalicEntry,\n      italicExit : onItalicExit,\n      boldEntry : onBoldEntry,\n      boldExit : onBoldExit,\n      LinkEntry : onLinkEntry,\n      TagEntry : onTagEntry\n    }\n  }\n  logRelations(response){\n    for(let statementKey of Object.keys(response.statements)){\n      let statement = response.statements[statementKey];\n      for(let relation of statement.relations){\n        if(relation.from == statement){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n    for(let argumentKey of Object.keys(response.arguments)){\n      let argument = response.arguments[argumentKey];\n      for(let relation of argument.relations){\n        if(relation.from == argument){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n  }\n}\nmodule.exports = {\n  ModelPlugin: ModelPlugin,\n  RelationObjectTypes : RelationObjectTypes\n}\n"]}