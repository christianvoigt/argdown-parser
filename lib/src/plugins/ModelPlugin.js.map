{"version":3,"sources":["../../../src/plugins/ModelPlugin.js"],"names":["_","RelationObjectTypes","Object","freeze","STATEMENT","Symbol","RECONSTRUCTED_ARGUMENT","SKETCHED_ARGUMENT","ModelPlugin","data","config","model","relations","relation","fromType","getElementType","from","toType","to","argument","index","indexOf","splice","conclusionStatement","pcs","length","equivalenceClass","statements","title","relationExists","existingRelation","type","push","status","arguments","sections","tags","obj","previousSettings","settings","removeTagsFromText","defaultsDeep","name","$","statementReferencePattern","statementDefinitionPattern","statementMentionPattern","argumentReferencePattern","argumentDefinitionPattern","argumentMentionPattern","linkPattern","tagPattern","uniqueTitleCounter","getUniqueTitle","getEquivalenceClass","ec","currentStatement","currentStatementOrArgument","currentArgument","currentArgumentReconstruction","currentInference","rangesStack","parentsStack","currentRelation","inStatementTree","currentHeading","currentSection","sectionCounter","onArgdownEntry","node","parentNode","childIndex","onStatementEntry","isRootOfStatementTree","isChildOfStatementTree","statement","onStatementExit","addTags","isEmpty","text","section","members","isUsedAsRootOfStatementTree","isUsedAsChildOfStatementTree","onStatementDefinitionEntry","match","exec","image","onStatementReferenceEntry","onStatementMentionExit","target","trailingWhitespace","range","start","stop","ranges","updateArgument","object","union","onArgumentDefinitionEntry","role","descriptions","onArgumentDefinitionExit","description","last","onArgumentReferenceExit","onArgumentReferenceEntry","onArgumentMentionExit","onFreestyleTextEntry","children","child","onLinkEntry","linkRange","url","onTagEntry","tag","tagRange","onBoldEntry","boldRange","onBoldExit","boldEnd","pop","onItalicEntry","italicRange","onItalicExit","italicEnd","onRelationExit","contentNode","content","getRelationTarget","onIncomingSupportEntry","onIncomingAttackEntry","onOutgoingSupportEntry","onOutgoingAttackEntry","onContradictionEntry","onIncomingUndercutEntry","onOutgoingUndercutEntry","onRelationsEntry","statementOrArgument","onRelationsExit","onArgumentEntry","precedingSibling","Emptyline","onArgumentExit","onArgumentStatementExit","statementNode","isUsedAsConclusion","inference","isUsedAsPremise","statementNr","onInferenceEntry","inferenceRules","metaData","onInferenceRulesExit","trim","onMetadataStatementExit","key","value","i","onHeadingEntry","onHeadingExit","headingStart","level","sectionId","newSection","parentSection","parent","argdownListeners","argdownEntry","headingEntry","headingExit","statementEntry","statementExit","argumentEntry","argumentExist","argumentStatementExit","inferenceEntry","inferenceRulesExit","metadataStatementExit","StatementDefinitionEntry","StatementReferenceEntry","StatementMentionExit","ArgumentDefinitionEntry","ArgumentReferenceEntry","ArgumentMentionExit","argumentDefinitionExit","argumentReferenceExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","contradictionEntry","contradictionExit","outgoingUndercutEntry","outgoingUndercutExit","incomingUndercutEntry","incomingUndercutExit","relationsEntry","relationsExit","freestyleTextEntry","italicEntry","italicExit","boldEntry","boldExit","LinkEntry","TagEntry","keys","statementKey","console","log","argumentKey","module","exports"],"mappings":"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","file":"ModelPlugin.js","sourcesContent":["import * as _ from 'lodash';\nimport {Statement} from '../model/Statement.js';\nimport {Argument} from '../model/Argument.js';\nimport {Relation} from '../model/Relation.js';\nimport {Section} from '../model/Section.js';\nimport {EquivalenceClass} from '../model/EquivalenceClass.js';\nimport {tokenMatcher} from 'chevrotain';\nimport {ArgdownLexer} from './../ArgdownLexer.js';\n\nconst RelationObjectTypes = Object.freeze({STATEMENT: Symbol(\"STATEMENT\"), RECONSTRUCTED_ARGUMENT: Symbol(\"RECONSTRUCTED ARGUMENT\"), SKETCHED_ARGUMENT: Symbol(\"SKETCHED ARGUMENT\")});\n\nclass ModelPlugin{\n  set config(config){\n    let previousSettings = this.settings;\n    if(!previousSettings){\n      previousSettings = {\n        removeTagsFromText: false\n      }\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);\n  }\n  run(data){\n    if(data.config && data.config.model){\n      this.config = data.config.model;\n    }\n\n    if(this.relations){\n      for(let relation of this.relations){\n        let fromType = this.getElementType(relation.from);\n        let toType = this.getElementType(relation.to);\n        \n        // For reconstructed arguments: change outgoing argument relations \n        // to outgoing relations of the main conclusion, removing duplicates\n        if(fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT){\n          //change relation.from to point to the argument's conclusion\n          let argument = relation.from;\n          \n          //remove from argument\n          let index = _.indexOf(argument.relations, relation);\n          argument.relations.splice(index, 1);\n                    \n          let conclusionStatement = argument.pcs[relation.from.pcs.length - 1];\n          let equivalenceClass = this.statements[conclusionStatement.title];\n          //change to relation of main conclusion\n          relation.from = equivalenceClass;\n\n          //check if this relation already exists\n          let relationExists = false;\n          for(let existingRelation of equivalenceClass.relations){\n            if(relation.to == existingRelation.to && relation.type == existingRelation.type){\n              relationExists = true;\n              break;\n            }\n          }\n          if(!relationExists){\n            equivalenceClass.relations.push(relation);            \n          }else{\n            //remove relation from target\n            let index = _.indexOf(relation.to.relations, relation);\n            relation.to.relations.splice(index, 1);\n            //remove relation from relations\n            index = _.indexOf(this.relations, relation);\n            this.relations.splice(index, 1);\n          }\n        }\n        //Add relation status: \"Reconstructed\" for statement-to-statement relations, \"sketched\" for all others\n        if(fromType == RelationObjectTypes.SKETCHED_ARGUMENT \n          ||toType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT \n          ||toType == RelationObjectTypes.SKETCHED_ARGUMENT){\n          relation.status = \"sketched\";\n        }else if(fromType == RelationObjectTypes.STATEMENT \n          ||fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT){\n          relation.status = \"reconstructed\";\n        }\n      }\n      //Change dialectical types of statement-to-statement relations to semantic types\n      //Doing this in a separate loop makes it easier to identify duplicates in the previous loop, \n      //even though it is less efficient.\n      for(let relation of this.relations){\n        if(relation.status == \"sketched\"){\n          continue;\n        }\n        if(relation.type == \"support\"){\n          relation.type = \"entails\";\n        }else if(relation.type == \"attack\"){\n          relation.type = \"contrary\"\n        }        \n      }\n    }\n\n    data.relations = this.relations;\n    data.statements = this.statements;\n    data.arguments = this.arguments;\n    data.sections = this.sections;\n    data.tags = this.tags;\n    return data;\n  }\n  getElementType(obj){\n    if(obj instanceof Argument){\n      if(obj.pcs && obj.pcs.length > 0){\n        return RelationObjectTypes.RECONSTRUCTED_ARGUMENT;\n      }else{\n        return RelationObjectTypes.SKETCHED_ARGUMENT;\n      }\n    }else if(obj instanceof EquivalenceClass){\n        return RelationObjectTypes.STATEMENT;\n    }\n    return null;\n  }\n  constructor(config){\n    this.name = \"ModelPlugin\";\n    this.config = config;\n    \n    let $ = this;\n\n    const statementReferencePattern = /\\[(.+)\\]/;\n    const statementDefinitionPattern = /\\[(.+)\\]\\:/;\n    const statementMentionPattern = /\\@\\[(.+)\\](\\s?)/;\n    const argumentReferencePattern = /\\<(.+)\\>/;\n    const argumentDefinitionPattern = /\\<(.+)\\>\\:/;\n    const argumentMentionPattern = /\\@\\<(.+)\\>(\\s?)/;\n    // const statementReferenceByNumberPattern = /\\<(.+)\\>\\((.+)\\)/;\n    // const statementDefinitionByNumberPattern = /\\<(.+)\\>\\((.+)\\)\\:/;\n    // const statementMentionByNumberPattern = /\\@\\<(.+)\\>\\((.+)\\)/;\n    const linkPattern = /\\[(.+)\\]\\((.+)\\)/;\n    const tagPattern = /#(?:\\(([^\\)]+)\\)|([a-zA-z0-9-\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+))/;\n\n    let uniqueTitleCounter = 0;\n    function getUniqueTitle(){\n      uniqueTitleCounter++;\n      return \"Untitled \"+uniqueTitleCounter;\n    }\n    function getEquivalenceClass(title){\n      if(!title){\n        return null;\n      }\n      let ec = null;\n      ec = $.statements[title];\n      if (!ec) {\n        ec = new EquivalenceClass();\n        ec.title = title;\n        $.statements[title] = ec;\n      }\n      return ec;\n    }\n\n    let currentStatement = null;\n    let currentStatementOrArgument = null;\n    let currentArgument = null;\n    let currentArgumentReconstruction = null;\n    let currentInference = null;\n    let rangesStack = [];\n    let parentsStack = [];\n    let currentRelation = null;\n    let inStatementTree = false;\n    let currentHeading = null;\n    let currentSection = null;\n    let sectionCounter = 0;\n\n    function onArgdownEntry(node, parentNode, childIndex, data){\n      if(data.config && data.config.model){\n        $.config = data.config.model;\n      }\n      $.statements = {};\n      $.arguments = {};\n      $.sections = [];\n      $.relations = [];\n      $.tags = [];\n      uniqueTitleCounter = 0;\n      currentHeading = null;\n      currentSection = null;\n      currentStatementOrArgument = null;\n      currentArgumentReconstruction = null;\n      currentInference = null;\n      currentArgument = null;\n      rangesStack = [];\n      parentsStack = [];\n      currentRelation = null;\n      inStatementTree = false;\n      sectionCounter = 0;\n    }\n    function onStatementEntry(node, parentNode){\n      currentStatement = new Statement();\n      if(parentNode.name == 'argdown'){\n          currentStatement.isRootOfStatementTree = true;\n          inStatementTree = true;\n      }else if(inStatementTree){\n        currentStatement.isChildOfStatementTree = true;\n      }\n      currentStatementOrArgument = currentStatement;\n      node.statement = currentStatement;\n    }\n    function onStatementExit(node){\n      let statement = node.statement;\n      if(!statement.title || statement.title == ''){\n        statement.title = getUniqueTitle();\n      }\n      if(statement.isRootOfStatementTree){\n        inStatementTree = false;\n      }\n      // //If we are in an argument reconstruction, we have to get argument title and statement number\n      // //getEquivalenceClass will look for equivalenceClasses that were already defined by using a reference to this argumentStatement\n      \n      // if (currentArgumentReconstruction && !currentRelation) {\n      //   node.argumentTitle = currentArgumentReconstruction.title;\n      //   node.statementNumber = currentArgumentReconstruction.pcs.length + 1;\n      // }\n      let equivalenceClass = getEquivalenceClass(statement.title);\n      node.equivalenceClass = equivalenceClass;\n      if(statement.tags){\n        addTags(statement.tags, equivalenceClass);\n      }\n      if(!_.isEmpty(statement.text)){\n        if(currentSection){\n          statement.section = currentSection;\n        }\n        equivalenceClass.members.push(statement);        \n      }\n      if(statement.isRootOfStatementTree){\n        equivalenceClass.isUsedAsRootOfStatementTree = true; //members are used outside of argument reconstructions (not as premise or conclusion)\n      }else if(statement.isChildOfStatementTree){\n        equivalenceClass.isUsedAsChildOfStatementTree = true;\n      }\n      currentStatement = null;\n    }\n    function onStatementDefinitionEntry(node){\n      let match = statementDefinitionPattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    // function onStatementDefinitionByNumberEntry(node){\n    //   let match = statementDefinitionByNumberPattern.exec(node.image);\n    //   if (match != null) {\n    //     node.statementUsedInArgument = match[1];\n    //     node.statementNumber = match[2];\n    //     node.statement = currentStatement;\n    //   }      \n    // }\n    function onStatementReferenceEntry(node){\n      let match = statementReferencePattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    // function onStatementReferenceByNumberEntry(node) {\n    //   let match = statementReferenceByNumberPattern.exec(node.image);\n    //   if (match != null) {\n    //     node.statementUsedInArgument = match[1];\n    //     node.statementNumber = match[2];\n    //     node.statement = currentStatement;\n    //   }\n    // }\n    function onStatementMentionExit(node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      let match = statementMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(target){\n          let range = {type:'statement-mention',title:node.title, start:target.text.length};\n          target.text += node.image;\n          range.stop = target.text.length -1;\n          target.ranges.push(range);\n        }\n      }\n    }\n    // function onStatementMentionByNumberExit(node) {\n    //   const target = (currentHeading) ? currentHeading : currentStatement;\n    //   let match = statementMentionByNumberPattern.exec(node.image);\n    //   if (match) {\n    //     node.argumentTitle = match[1];\n    //     node.statementNumber = match[2];\n    //     if (node.image[node.image.length - 1] == \" \") {\n    //       node.trailingWhitespace = ' ';\n    //     } else {\n    //       node.trailingWhitespace = '';\n    //     }\n    //     if (target) {\n    //       let range = { type: 'statement-mention-by-number', argumentTitle: node.title, statementNumber: node.statementNumber, start: target.text.length };\n    //       target.text += node.image;\n    //       range.stop = target.text.length - 1;\n    //       target.ranges.push(range);\n    //     }\n    //   }\n    // }\n    function updateArgument(title){\n      if(title){\n        currentArgument = $.arguments[title];        \n      }\n      if(!title ||!currentArgument){\n        currentArgument = new Argument();\n        if(!title){\n          currentArgument.title = getUniqueTitle();\n        }else {\n          currentArgument.title = title;\n        }\n        $.arguments[currentArgument.title] = currentArgument;\n      }\n      currentStatementOrArgument = currentArgument;\n      return currentArgument;\n    }\n    function addTags(tags, object){\n      if(!object.tags){\n        object.tags = [];\n      }\n      object.tags = _.union(object.tags, tags);\n    }\n    function onArgumentDefinitionEntry(node, parentNode){\n      let match = argumentDefinitionPattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(title);\n        currentStatement = new Statement();\n        currentStatement.role = \"argument-description\";\n        if(currentSection){          \n          currentStatement.section = currentSection;\n        }\n        currentArgument.descriptions.push(currentStatement);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentDefinitionExit(node){\n      if(node.argument){\n        let description = _.last(node.argument.descriptions);\n        if(description.tags){\n          addTags(description.tags, node.argument);\n        }\n      }\n      currentStatement = null;\n      currentArgument = null;\n    }\n    function onArgumentReferenceExit(){\n      currentStatement = null;\n      currentArgument = null;\n    }\n    function onArgumentReferenceEntry(node, parentNode){\n      let match = argumentReferencePattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(title);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentMentionExit(node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      let match = argumentMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(target){\n          let range = {type:'argument-mention',title:node.title, start:target.text.length};\n          target.text += node.image;\n          range.stop = target.text.length -1;\n          target.ranges.push(range);\n        }\n      }\n    }\n    function onFreestyleTextEntry(node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      node.text = \"\";\n      for(let child of node.children){\n        node.text += child.image;\n      }\n      if(target){\n        target.text += node.text;        \n      }\n    }\n    function onLinkEntry(node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let match = linkPattern.exec(node.image);\n      let linkRange = {type:'link', start: target.text.length};\n      node.url = match[2];\n      node.text = match[1];\n      target.text += node.text;\n      linkRange.stop = target.text.length - 1;\n      linkRange.url = node.url;\n      target.ranges.push(linkRange);\n      if(node.image[node.image.length - 1] == ' '){\n        target.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n    }\n    function onTagEntry(node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let match = tagPattern.exec(node.image);\n      let tag = match[1] || match[2];\n      node.tag = tag;\n      if(!$.settings.removeTagsFromText){\n        let tagRange = {type:'tag', start: target.text.length};\n        node.text = node.image;        \n        target.text += node.text;\n        tagRange.stop = target.text.length - 1;\n        tagRange.tag = node.tag;\n        target.ranges.push(tagRange);\n      }\n      target.tags = target.tags ||[];\n      let tags = target.tags;\n      if(target.tags.indexOf(tag) == -1){\n        tags.push(tag);\n      }\n      if($.tags.indexOf(tag) == -1){\n        $.tags.push(tag);\n      }\n    }\n    function onBoldEntry(){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let boldRange = {type:'bold', start: target.text.length};\n      rangesStack.push(boldRange);\n      target.ranges.push(boldRange);\n    }\n    function onBoldExit(node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let boldEnd = _.last(node.children);\n      if(boldEnd.image[boldEnd.image.length - 1] == ' '){\n        target.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = target.text.length - 1;\n      rangesStack.pop();\n    }\n    function onItalicEntry(){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let italicRange = {type:'italic', start: target.text.length};\n      rangesStack.push(italicRange);\n      target.ranges.push(italicRange);\n    }\n    function onItalicExit(node){\n      const target = (currentHeading)? currentHeading : currentStatement;\n      if(!target){\n        return;\n      }\n      let italicEnd = _.last(node.children);\n      if(italicEnd.image[italicEnd.image.length - 1] == ' '){\n        target.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = target.text.length - 1;\n      rangesStack.pop();\n    }\n\n    function onRelationExit(node){\n      let relation = node.relation;\n      let contentNode = node.children[1];\n      let content = contentNode.argument ||contentNode.statement;\n      let target = getRelationTarget(content);\n      if(relation){\n        if(relation.from){\n          relation.to = target;\n        }else {\n          relation.from = target;\n        }\n        let relationExists = false;\n        for(let existingRelation of relation.from.relations){\n          if(relation.to == existingRelation.to && relation.type == existingRelation.type){\n            relationExists = true;\n            break;\n          }else if(relation.type == \"contradictory\" && relation.type == existingRelation.type && relation.from == existingRelation.to && relation.to == existingRelation.from){\n            relationExists = true;\n            break;\n          }\n        }\n        if(!relationExists){\n          $.relations.push(relation);\n          relation.from.relations.push(relation);\n          relation.to.relations.push(relation);\n        }\n      }\n    }\n    function onIncomingSupportEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"support\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onIncomingAttackEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"attack\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onOutgoingSupportEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"support\");\n      currentRelation.to = target;\n      node.relation = currentRelation;\n    }\n    function onOutgoingAttackEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"attack\");\n      currentRelation.to = target;\n      node.relation = currentRelation;\n    }\n    function onContradictionEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"contradictory\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onIncomingUndercutEntry(node) {\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"undercut\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onOutgoingUndercutEntry(node) {\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"undercut\");\n      currentRelation.to = target;\n      node.relation = currentRelation;\n    }\n\n    function onRelationsEntry(){\n      parentsStack.push(getRelationTarget(currentStatementOrArgument));\n    }\n    function getRelationTarget(statementOrArgument){\n      let target = statementOrArgument;\n      if(statementOrArgument instanceof Statement){\n        if(!statementOrArgument.title)\n          statementOrArgument.title = getUniqueTitle();\n        target = getEquivalenceClass(statementOrArgument.title);\n      }\n      return target;\n    }\n    function onRelationsExit(){\n      currentRelation = null;\n      parentsStack.pop();\n    }\n\n    function onArgumentEntry(node, parentNode, childIndex){\n      let argument = null;\n      if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n            argument = precedingSibling.argument;\n          }else if(tokenMatcher(precedingSibling, ArgdownLexer.Emptyline)){\n            precedingSibling = parentNode.children[childIndex - 2];\n            if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n              argument = precedingSibling.argument;\n            }\n          }\n        }\n        if(!argument){\n          argument = updateArgument();\n        }\n        if(currentSection){\n          argument.section = currentSection;\n        }\n        //if there is a previous reconstruction, overwrite it\n        if(argument.pcs.length > 0){\n          //TODO: throw error\n          argument.pcs = [];\n        }\n        node.argument = argument;\n        currentArgumentReconstruction = argument;\n    }\n    function onArgumentExit(){\n      currentStatement = null;\n      currentArgument = null;\n      currentArgumentReconstruction = null;\n    }\n    function onArgumentStatementExit(node, parentNode, childIndex){\n      if(node.children.length > 1){\n        //first node is ArgdownLexer.ArgumentStatementStart\n        let statementNode = node.children[1];\n        let statement = statementNode.statement;\n        let ec = getEquivalenceClass(statement.title);\n        statement.role = \"premise\";\n        if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'inference'){\n            statement.role = \"conclusion\";\n            ec.isUsedAsConclusion = true;\n            statement.inference = precedingSibling.inference;\n          }\n        }\n        if(statement.role == \"premise\"){\n          ec.isUsedAsPremise = true;\n        }\n        currentArgumentReconstruction.pcs.push(statement);\n        node.statement = statement;\n        node.statementNr = currentArgumentReconstruction.pcs.length;\n      }\n    }\n    function onInferenceEntry(node){\n      currentInference = {inferenceRules:[], metaData:{}};\n      node.inference = currentInference;\n    }\n    function onInferenceRulesExit(node){\n      for(let child of node.children){\n        if(child.name == 'freestyleText'){\n          currentInference.inferenceRules.push(child.text.trim());\n        }\n      }\n    }\n    function onMetadataStatementExit(node){\n      let key = node.children[0].text;\n      let value = null;\n      if(node.children.length == 2){\n        value = node.children[1].text;\n      }else{\n        value = [];\n        for(let i = 1; i < node.children.length; i++){\n          value.push(node.children[i].text);\n        }\n      }\n      currentInference.metaData[key] = value;\n    }\n    function onHeadingEntry(node){\n      currentHeading = node;\n      currentHeading.text = '';\n      currentHeading.ranges = [];\n    }\n    function onHeadingExit(node){\n      let headingStart = node.children[0];\n      currentHeading.level = headingStart.image.length;\n      sectionCounter++;\n      let sectionId = 's'+sectionCounter;\n      let newSection = new Section(sectionId, currentHeading.level, currentHeading.text, currentHeading.ranges, currentHeading.tags);\n      \n      if(newSection.level > 1 && currentSection){\n        let parentSection = currentSection;\n        while(parentSection.parent && parentSection.level >= newSection.level){\n          parentSection = parentSection.parent;\n        }\n        parentSection.children.push(newSection);\n        newSection.parent = parentSection;        \n      }else{\n        $.sections.push(newSection);\n      }\n      currentSection = newSection;\n      currentHeading = null;\n    }\n\n    this.argdownListeners = {\n      argdownEntry : onArgdownEntry,\n      headingEntry : onHeadingEntry,\n      headingExit : onHeadingExit,\n      statementEntry : onStatementEntry,\n      statementExit : onStatementExit,\n      argumentEntry : onArgumentEntry,\n      argumentExist : onArgumentExit,\n      argumentStatementExit : onArgumentStatementExit,\n      inferenceEntry : onInferenceEntry,\n      inferenceRulesExit : onInferenceRulesExit,\n      metadataStatementExit : onMetadataStatementExit,\n      StatementDefinitionEntry : onStatementDefinitionEntry,\n      // StatementDefinitionByNumberEntry : onStatementDefinitionByNumberEntry,\n      StatementReferenceEntry : onStatementReferenceEntry,\n      // StatementReferenceByNumberEntry : onStatementReferenceByNumberEntry,\n      StatementMentionExit : onStatementMentionExit,\n      // StatementMentionByNumberExit : onStatementMentionByNumberExit,\n      ArgumentDefinitionEntry : onArgumentDefinitionEntry,\n      ArgumentReferenceEntry : onArgumentReferenceEntry,\n      ArgumentMentionExit : onArgumentMentionExit,\n      argumentDefinitionExit : onArgumentDefinitionExit,\n      argumentReferenceExit : onArgumentReferenceExit,\n      incomingSupportEntry : onIncomingSupportEntry,\n      incomingSupportExit : onRelationExit,\n      incomingAttackEntry : onIncomingAttackEntry,\n      incomingAttackExit : onRelationExit,\n      outgoingSupportEntry : onOutgoingSupportEntry,\n      outgoingSupportExit : onRelationExit,\n      outgoingAttackEntry : onOutgoingAttackEntry,\n      outgoingAttackExit : onRelationExit,\n      contradictionEntry : onContradictionEntry,\n      contradictionExit : onRelationExit,\n      outgoingUndercutEntry : onOutgoingUndercutEntry,\n      outgoingUndercutExit : onRelationExit,\n      incomingUndercutEntry: onIncomingUndercutEntry,\n      incomingUndercutExit: onRelationExit,      \n      relationsEntry : onRelationsEntry,\n      relationsExit : onRelationsExit,\n      freestyleTextEntry : onFreestyleTextEntry,\n      italicEntry : onItalicEntry,\n      italicExit : onItalicExit,\n      boldEntry : onBoldEntry,\n      boldExit : onBoldExit,\n      LinkEntry : onLinkEntry,\n      TagEntry : onTagEntry\n    }\n  }\n  logRelations(data){\n    for(let statementKey of Object.keys(data.statements)){\n      let statement = data.statements[statementKey];\n      for(let relation of statement.relations){\n        if(relation.from == statement){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n    for(let argumentKey of Object.keys(data.arguments)){\n      let argument = data.arguments[argumentKey];\n      for(let relation of argument.relations){\n        if(relation.from == argument){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n  }\n}\nmodule.exports = {\n  ModelPlugin: ModelPlugin,\n  RelationObjectTypes : RelationObjectTypes\n}\n"]}