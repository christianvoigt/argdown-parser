{"version":3,"sources":["../../../src/plugins/ArgdownPreprocessor.js"],"names":["_","ArgdownPreprocessor","result","statements","arguments","name","$","statementReferencePattern","statementDefinitionPattern","statementMentionPattern","argumentReferencePattern","argumentDefinitionPattern","argumentMentionPattern","linkPattern","uniqueTitleCounter","getUniqueTitle","getEquivalenceClass","title","ec","currentStatement","currentStatementOrArgument","currentArgument","currentArgumentReconstruction","currentInference","rangesStack","parentsStack","currentRelation","onArgdownEntry","onStatementEntry","node","parentNode","role","statement","onStatementExit","equivalenceClass","members","push","isUsedAsThesis","onStatementDefinitionEntry","match","exec","image","onStatementReferenceEntry","onStatementMentionExit","length","trailingWhitespace","range","type","start","text","stop","ranges","updateArgument","descriptions","onArgumentDefinitionEntry","argument","onArgumentDefinitionOrReferenceExit","onArgumentReferenceEntry","onArgumentMentionExit","onFreestyleTextEntry","children","child","onLinkEntry","linkRange","url","onBoldEntry","boldRange","onBoldExit","boldEnd","last","pop","onItalicEntry","italicRange","onItalicExit","italicEnd","onRelationExit","relation","contentNode","content","target","getRelationTarget","from","to","relations","onIncomingSupportEntry","onIncomingAttackEntry","onOutgoingSupportEntry","onOutgoingAttackEntry","onRelationsEntry","statementOrArgument","onRelationsExit","onArgumentEntry","childIndex","precedingSibling","Emptyline","onArgumentStatementExit","statementNode","inference","isUsedInArgument","pcs","statementNr","onInferenceEntry","inferenceRules","metaData","onInferenceRulesExit","trim","onMetadataStatementExit","key","value","i","onHeadingExit","headingStart","heading","argdownListeners","argdownEntry","headingExit","statementEntry","statementExit","argumentEntry","argumentStatementExit","inferenceEntry","inferenceRulesExit","metadataStatementExit","StatementDefinitionEntry","StatementReferenceEntry","StatementMentionExit","ArgumentDefinitionEntry","ArgumentReferenceEntry","ArgumentMentionExit","argumentDefinitionExit","argumentReferenceExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","relationsEntry","relationsExist","freestyleTextEntry","italicEntry","italicExit","boldEntry","boldExit","LinkEntry","data","Object","keys","statementKey","console","log","argumentKey","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;AACZ;;AACA;;AACA;;AACA;;AACA;;;;;;IAEMC,mB;;;wBACAC,M,EAAO;AACTA,aAAOC,UAAP,GAAoB,KAAKA,UAAzB;AACAD,aAAOE,SAAP,GAAmB,KAAKA,SAAxB;AACA,aAAOF,MAAP;AACD;;;AACD,iCAAa;AAAA;;AACX,SAAKG,IAAL,GAAY,qBAAZ;AACA,QAAIC,IAAI,IAAR;;AAEA,QAAMC,4BAA4B,UAAlC;AACA,QAAMC,6BAA6B,YAAnC;AACA,QAAMC,0BAA0B,iBAAhC;AACA,QAAMC,2BAA2B,UAAjC;AACA,QAAMC,4BAA4B,YAAlC;AACA,QAAMC,yBAAyB,iBAA/B;AACA,QAAMC,cAAc,kBAApB;;AAEA,QAAIC,qBAAqB,CAAzB;AACA,aAASC,cAAT,GAAyB;AACvBD;AACA,aAAO,cAAYA,kBAAnB;AACD;AACD,aAASE,mBAAT,CAA6BC,KAA7B,EAAmC;AACjC,UAAG,CAACA,KAAJ,EACE,OAAO,IAAP;;AAEF,UAAIC,KAAKZ,EAAEH,UAAF,CAAac,KAAb,CAAT;AACA,UAAG,CAACC,EAAJ,EAAO;AACLA,aAAK,wCAAL;AACAA,WAAGD,KAAH,GAAWA,KAAX;AACAX,UAAEH,UAAF,CAAac,KAAb,IAAsBC,EAAtB;AACD;AACD,aAAOA,EAAP;AACD;;AAGD,QAAIC,mBAAmB,IAAvB;AACA,QAAIC,6BAA6B,IAAjC;AACA,QAAIC,kBAAkB,IAAtB;AACA,QAAIC,gCAAgC,IAApC;AACA,QAAIC,mBAAmB,IAAvB;AACA,QAAIC,cAAc,EAAlB;AACA,QAAIC,eAAe,EAAnB;AACA,QAAIC,kBAAkB,IAAtB;;AAEA,aAASC,cAAT,GAAyB;AACvBrB,QAAEH,UAAF,GAAe,EAAf;AACAG,QAAEF,SAAF,GAAc,EAAd;AACAe,yBAAmB,IAAnB;AACAC,mCAA6B,IAA7B;AACAE,sCAAgC,IAAhC;AACAC,yBAAmB,IAAnB;AACAF,wBAAkB,IAAlB;AACAG,oBAAc,EAAd;AACAC,qBAAe,EAAf;AACAC,wBAAkB,IAAlB;AACD;AACD,aAASE,gBAAT,CAA0BC,IAA1B,EAAgCC,UAAhC,EAA2C;AACzCX,yBAAmB,0BAAnB;AACA,UAAGW,WAAWzB,IAAX,IAAmB,SAAtB,EAAgC;AAC5Bc,yBAAiBY,IAAjB,GAAwB,QAAxB;AACH;AACDX,mCAA6BD,gBAA7B;AACAU,WAAKG,SAAL,GAAiBb,gBAAjB;AACD;AACD,aAASc,eAAT,CAAyBJ,IAAzB,EAA8B;AAC5B,UAAIG,YAAYH,KAAKG,SAArB;AACA,UAAG,CAACA,UAAUf,KAAX,IAAoBe,UAAUf,KAAV,IAAmB,EAA1C,EAA6C;AAC3Ce,kBAAUf,KAAV,GAAkBF,gBAAlB;AACD;AACD,UAAImB,mBAAmBlB,oBAAoBgB,UAAUf,KAA9B,CAAvB;AACAiB,uBAAiBC,OAAjB,CAAyBC,IAAzB,CAA8BJ,SAA9B;AACA,UAAGA,UAAUD,IAAV,IAAkB,QAArB,EAA8B;AAC5BG,yBAAiBG,cAAjB,GAAkC,IAAlC,CAD4B,CACY;AACzC;AACDlB,yBAAmB,IAAnB;AACD;AACD,aAASmB,0BAAT,CAAoCT,IAApC,EAAyC;AACvC,UAAIU,QAAQ/B,2BAA2BgC,IAA3B,CAAgCX,KAAKY,KAArC,CAAZ;AACA,UAAGF,SAAS,IAAZ,EAAiB;AACfpB,yBAAiBF,KAAjB,GAAyBsB,MAAM,CAAN,CAAzB;AACAV,aAAKG,SAAL,GAAiBb,gBAAjB;AACD;AACF;AACD,aAASuB,yBAAT,CAAmCb,IAAnC,EAAwC;AACtC,UAAIU,QAAQhC,0BAA0BiC,IAA1B,CAA+BX,KAAKY,KAApC,CAAZ;AACA,UAAGF,SAAS,IAAZ,EAAiB;AACfpB,yBAAiBF,KAAjB,GAAyBsB,MAAM,CAAN,CAAzB;AACAV,aAAKG,SAAL,GAAiBb,gBAAjB;AACD;AACF;AACD,aAASwB,sBAAT,CAAgCd,IAAhC,EAAqC;AACnC,UAAIU,QAAQ9B,wBAAwB+B,IAAxB,CAA6BX,KAAKY,KAAlC,CAAZ;AACA,UAAGF,KAAH,EAAS;AACPV,aAAKZ,KAAL,GAAasB,MAAM,CAAN,CAAb;AACA,YAAGV,KAAKY,KAAL,CAAWZ,KAAKY,KAAL,CAAWG,MAAX,GAAoB,CAA/B,KAAqC,GAAxC,EAA4C;AAC1Cf,eAAKgB,kBAAL,GAA0B,GAA1B;AACD,SAFD,MAEM;AACJhB,eAAKgB,kBAAL,GAA0B,EAA1B;AACD;AACD,YAAG1B,gBAAH,EAAoB;AAClB,cAAI2B,QAAQ,EAACC,MAAK,mBAAN,EAA0B9B,OAAMY,KAAKZ,KAArC,EAA4C+B,OAAM7B,iBAAiB8B,IAAjB,CAAsBL,MAAxE,EAAZ;AACAzB,2BAAiB8B,IAAjB,IAAyBpB,KAAKY,KAA9B;AACAK,gBAAMI,IAAN,GAAa/B,iBAAiB8B,IAAjB,CAAsBL,MAAtB,GAA8B,CAA3C;AACAzB,2BAAiBgC,MAAjB,CAAwBf,IAAxB,CAA6BU,KAA7B;AACD;AACF;AACF;AACD,aAASM,cAAT,CAAwBnC,KAAxB,EAA8B;AAC5BI,wBAAkBf,EAAEF,SAAF,CAAYa,KAAZ,CAAlB;AACA,UAAG,CAACI,eAAJ,EAAoB;AAClBA,0BAAkB,wBAAlB;AACAD,qCAA6BC,eAA7B;AACAA,wBAAgBJ,KAAhB,GAAwBA,KAAxB;AACA;AACAX,UAAEF,SAAF,CAAYiB,gBAAgBJ,KAA5B,IAAqCI,eAArC;AACD;AACDF,yBAAmB,0BAAnB;AACAE,sBAAgBgC,YAAhB,CAA6BjB,IAA7B,CAAkCjB,gBAAlC;AACD;AACD,aAASmC,yBAAT,CAAmCzB,IAAnC,EAAyCC,UAAzC,EAAoD;AAClD,UAAIS,QAAQ5B,0BAA0B6B,IAA1B,CAA+BX,KAAKY,KAApC,CAAZ;AACA,UAAGF,SAAS,IAAZ,EAAiB;AACf,YAAItB,QAAQsB,MAAM,CAAN,CAAZ;AACAa,uBAAenC,KAAf;AACAa,mBAAWyB,QAAX,GAAsBlC,eAAtB;AACD;AACF;AACD,aAASmC,mCAAT,GAA8C;AAC5CrC,yBAAmB,IAAnB;AACAE,wBAAkB,IAAlB;AACD;AACD,aAASoC,wBAAT,CAAkC5B,IAAlC,EAAwCC,UAAxC,EAAmD;AACjD,UAAIS,QAAQ7B,yBAAyB8B,IAAzB,CAA8BX,KAAKY,KAAnC,CAAZ;AACA,UAAGF,SAAS,IAAZ,EAAiB;AACf,YAAItB,QAAQsB,MAAM,CAAN,CAAZ;AACAa,uBAAenC,KAAf;AACAa,mBAAWyB,QAAX,GAAsBlC,eAAtB;AACD;AACF;AACD,aAASqC,qBAAT,CAA+B7B,IAA/B,EAAoC;AAClC,UAAIU,QAAQ3B,uBAAuB4B,IAAvB,CAA4BX,KAAKY,KAAjC,CAAZ;AACA,UAAGF,KAAH,EAAS;AACPV,aAAKZ,KAAL,GAAasB,MAAM,CAAN,CAAb;AACA,YAAGV,KAAKY,KAAL,CAAWZ,KAAKY,KAAL,CAAWG,MAAX,GAAoB,CAA/B,KAAqC,GAAxC,EAA4C;AAC1Cf,eAAKgB,kBAAL,GAA0B,GAA1B;AACD,SAFD,MAEM;AACJhB,eAAKgB,kBAAL,GAA0B,EAA1B;AACD;AACD,YAAG1B,gBAAH,EAAoB;AAClB,cAAI2B,QAAQ,EAACC,MAAK,kBAAN,EAAyB9B,OAAMY,KAAKZ,KAApC,EAA2C+B,OAAM7B,iBAAiB8B,IAAjB,CAAsBL,MAAvE,EAAZ;AACAzB,2BAAiB8B,IAAjB,IAAyBpB,KAAKY,KAA9B;AACAK,gBAAMI,IAAN,GAAa/B,iBAAiB8B,IAAjB,CAAsBL,MAAtB,GAA8B,CAA3C;AACAzB,2BAAiBgC,MAAjB,CAAwBf,IAAxB,CAA6BU,KAA7B;AACD;AACF;AACF;AACD,aAASa,oBAAT,CAA8B9B,IAA9B,EAAmC;AACjCA,WAAKoB,IAAL,GAAY,EAAZ;AADiC;AAAA;AAAA;;AAAA;AAEjC,6BAAiBpB,KAAK+B,QAAtB,8HAA+B;AAAA,cAAvBC,KAAuB;;AAC7BhC,eAAKoB,IAAL,IAAaY,MAAMpB,KAAnB;AACD;AAJgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKjC,UAAGtB,gBAAH,EACEA,iBAAiB8B,IAAjB,IAAyBpB,KAAKoB,IAA9B;AACH;AACD,aAASa,WAAT,CAAqBjC,IAArB,EAA0B;AACxB,UAAIU,QAAQ1B,YAAY2B,IAAZ,CAAiBX,KAAKY,KAAtB,CAAZ;AACA,UAAIsB,YAAY,EAAChB,MAAK,MAAN,EAAcC,OAAO7B,iBAAiB8B,IAAjB,CAAsBL,MAA3C,EAAhB;AACAf,WAAKmC,GAAL,GAAWzB,MAAM,CAAN,CAAX;AACAV,WAAKoB,IAAL,GAAYV,MAAM,CAAN,CAAZ;AACApB,uBAAiB8B,IAAjB,IAAyBpB,KAAKoB,IAA9B;AACAc,gBAAUb,IAAV,GAAiB/B,iBAAiB8B,IAAjB,CAAsBL,MAAtB,GAA+B,CAAhD;AACAmB,gBAAUC,GAAV,GAAgBnC,KAAKmC,GAArB;AACA7C,uBAAiBgC,MAAjB,CAAwBf,IAAxB,CAA6B2B,SAA7B;AACA,UAAGlC,KAAKY,KAAL,CAAWZ,KAAKY,KAAL,CAAWG,MAAX,GAAoB,CAA/B,KAAqC,GAAxC,EAA4C;AAC1CzB,yBAAiB8B,IAAjB,IAAyB,GAAzB;AACApB,aAAKgB,kBAAL,GAA0B,GAA1B;AACD,OAHD,MAGK;AACHhB,aAAKgB,kBAAL,GAA0B,EAA1B;AACD;AACF;;AAED,aAASoB,WAAT,GAAsB;AACpB,UAAIC,YAAY,EAACnB,MAAK,MAAN,EAAcC,OAAO7B,iBAAiB8B,IAAjB,CAAsBL,MAA3C,EAAhB;AACApB,kBAAYY,IAAZ,CAAiB8B,SAAjB;AACA/C,uBAAiBgC,MAAjB,CAAwBf,IAAxB,CAA6B8B,SAA7B;AACD;AACD,aAASC,UAAT,CAAoBtC,IAApB,EAAyB;AACvB,UAAIuC,UAAUpE,EAAEqE,IAAF,CAAOxC,KAAK+B,QAAZ,CAAd;AACA,UAAGQ,QAAQ3B,KAAR,CAAc2B,QAAQ3B,KAAR,CAAcG,MAAd,GAAuB,CAArC,KAA2C,GAA9C,EAAkD;AAChDzB,yBAAiB8B,IAAjB,IAAyB,GAAzB;AACApB,aAAKgB,kBAAL,GAA0B,GAA1B;AACD,OAHD,MAGK;AACHhB,aAAKgB,kBAAL,GAA0B,EAA1B;AACD;AACD,UAAIC,QAAQ9C,EAAEqE,IAAF,CAAO7C,WAAP,CAAZ;AACAsB,YAAMI,IAAN,GAAa/B,iBAAiB8B,IAAjB,CAAsBL,MAAtB,GAA+B,CAA5C;AACApB,kBAAY8C,GAAZ;AACD;AACD,aAASC,aAAT,GAAwB;AACtB,UAAIC,cAAc,EAACzB,MAAK,QAAN,EAAgBC,OAAO7B,iBAAiB8B,IAAjB,CAAsBL,MAA7C,EAAlB;AACApB,kBAAYY,IAAZ,CAAiBoC,WAAjB;AACArD,uBAAiBgC,MAAjB,CAAwBf,IAAxB,CAA6BoC,WAA7B;AACD;AACD,aAASC,YAAT,CAAsB5C,IAAtB,EAA2B;AACzB,UAAI6C,YAAY1E,EAAEqE,IAAF,CAAOxC,KAAK+B,QAAZ,CAAhB;AACA,UAAGc,UAAUjC,KAAV,CAAgBiC,UAAUjC,KAAV,CAAgBG,MAAhB,GAAyB,CAAzC,KAA+C,GAAlD,EAAsD;AACpDzB,yBAAiB8B,IAAjB,IAAyB,GAAzB;AACApB,aAAKgB,kBAAL,GAA0B,GAA1B;AACD,OAHD,MAGK;AACHhB,aAAKgB,kBAAL,GAA0B,EAA1B;AACD;AACD,UAAIC,QAAQ9C,EAAEqE,IAAF,CAAO7C,WAAP,CAAZ;AACAsB,YAAMI,IAAN,GAAa/B,iBAAiB8B,IAAjB,CAAsBL,MAAtB,GAA+B,CAA5C;AACApB,kBAAY8C,GAAZ;AACD;;AAED,aAASK,cAAT,CAAwB9C,IAAxB,EAA6B;AAC3B,UAAI+C,WAAW/C,KAAK+C,QAApB;AACA,UAAIC,cAAchD,KAAK+B,QAAL,CAAc,CAAd,CAAlB;AACA,UAAIkB,UAAUD,YAAYtB,QAAZ,IAAuBsB,YAAY7C,SAAjD;AACA,UAAI+C,SAASC,kBAAkBF,OAAlB,CAAb;AACA,UAAGF,QAAH,EAAY;AACV,YAAGA,SAASK,IAAZ,EACEL,SAASM,EAAT,GAAcH,MAAd,CADF,KAEK;AACHH,mBAASK,IAAT,GAAgBF,MAAhB;AACD;AACDH,iBAASK,IAAT,CAAcE,SAAd,CAAwB/C,IAAxB,CAA6BwC,QAA7B;AACAA,iBAASM,EAAT,CAAYC,SAAZ,CAAsB/C,IAAtB,CAA2BwC,QAA3B;AACD;AACF;AACD,aAASQ,sBAAT,CAAgCvD,IAAhC,EAAqC;AACnC,UAAIkD,SAAS/E,EAAEqE,IAAF,CAAO5C,YAAP,CAAb;AACAC,wBAAkB,EAACqB,MAAK,SAAN,EAAiBkC,MAAKF,MAAtB,EAAlB;AACAlD,WAAK+C,QAAL,GAAgBlD,eAAhB;AACD;AACD,aAAS2D,qBAAT,CAA+BxD,IAA/B,EAAoC;AAClC,UAAIkD,SAAS/E,EAAEqE,IAAF,CAAO5C,YAAP,CAAb;AACAC,wBAAkB,EAACqB,MAAK,QAAN,EAAgBkC,MAAKF,MAArB,EAAlB;AACAlD,WAAK+C,QAAL,GAAgBlD,eAAhB;AACD;AACD,aAAS4D,sBAAT,CAAgCzD,IAAhC,EAAqC;AACnC,UAAIkD,SAAS/E,EAAEqE,IAAF,CAAO5C,YAAP,CAAb;AACAC,wBAAkB,EAACqB,MAAK,SAAN,EAAiBmC,IAAGH,MAApB,EAAlB;AACAlD,WAAK+C,QAAL,GAAgBlD,eAAhB;AACD;AACD,aAAS6D,qBAAT,CAA+B1D,IAA/B,EAAoC;AAClC,UAAIkD,SAAS/E,EAAEqE,IAAF,CAAO5C,YAAP,CAAb;AACAC,wBAAkB,EAACqB,MAAK,QAAN,EAAgBmC,IAAGH,MAAnB,EAAlB;AACAlD,WAAK+C,QAAL,GAAgBlD,eAAhB;AACD;AACD,aAAS8D,gBAAT,GAA2B;AACzB/D,mBAAaW,IAAb,CAAkB4C,kBAAkB5D,0BAAlB,CAAlB;AACD;AACD,aAAS4D,iBAAT,CAA2BS,mBAA3B,EAA+C;AAC7C,UAAIV,SAASU,mBAAb;AACA,UAAGA,mDAAH,EAA4C;AAC1C,YAAG,CAACA,oBAAoBxE,KAAxB,EACEwE,oBAAoBxE,KAApB,GAA4BF,gBAA5B;AACFgE,iBAAS/D,oBAAoByE,oBAAoBxE,KAAxC,CAAT;AACD;AACD,aAAO8D,MAAP;AACD;AACD,aAASW,eAAT,GAA0B;AACxBhE,wBAAkB,IAAlB;AACAD,mBAAa6C,GAAb;AACD;;AAED,aAASqB,eAAT,CAAyB9D,IAAzB,EAA+BC,UAA/B,EAA2C8D,UAA3C,EAAsD;AACpD,UAAIrC,WAAW,IAAf;AACA,UAAGqC,aAAa,CAAhB,EAAkB;AACd,YAAIC,mBAAmB/D,WAAW8B,QAAX,CAAoBgC,aAAa,CAAjC,CAAvB;AACA,YAAGC,iBAAiBxF,IAAjB,IAAyB,mBAAzB,IAAgDwF,iBAAiBxF,IAAjB,IAAyB,oBAA5E,EAAiG;AAC/FkD,qBAAWsC,iBAAiBtC,QAA5B;AACD,SAFD,MAEM,IAAG,8BAAasC,gBAAb,EAA+B,2BAAaC,SAA5C,CAAH,EAA0D;AAC9DD,6BAAmB/D,WAAW8B,QAAX,CAAoBgC,aAAa,CAAjC,CAAnB;AACA,cAAGC,iBAAiBxF,IAAjB,IAAyB,mBAAzB,IAAgDwF,iBAAiBxF,IAAjB,IAAyB,oBAA5E,EAAiG;AAC/FkD,uBAAWsC,iBAAiBtC,QAA5B;AACD;AACF;AACF;AACD,UAAG,CAACA,QAAJ,EAAa;AACXA,mBAAW,wBAAX;AACAA,iBAAStC,KAAT,GAAiBF,gBAAjB;AACAT,UAAEF,SAAF,CAAYmD,SAAStC,KAArB,IAA8BsC,QAA9B;AACD;AACD1B,WAAK0B,QAAL,GAAgBA,QAAhB;AACAjC,sCAAgCiC,QAAhC;AACH;AACD,aAASwC,uBAAT,CAAiClE,IAAjC,EAAuCC,UAAvC,EAAmD8D,UAAnD,EAA8D;AAC5D,UAAG/D,KAAK+B,QAAL,CAAchB,MAAd,GAAuB,CAA1B,EAA4B;AAC1B;AACA,YAAIoD,gBAAgBnE,KAAK+B,QAAL,CAAc,CAAd,CAApB;AACA,YAAI5B,YAAYgE,cAAchE,SAA9B;AACAA,kBAAUD,IAAV,GAAiB,SAAjB;AACA,YAAG6D,aAAa,CAAhB,EAAkB;AAChB,cAAIC,mBAAmB/D,WAAW8B,QAAX,CAAoBgC,aAAa,CAAjC,CAAvB;AACA,cAAGC,iBAAiBxF,IAAjB,IAAyB,WAA5B,EAAwC;AACtC2B,sBAAUD,IAAV,GAAiB,YAAjB;AACAC,sBAAUiE,SAAV,GAAsBJ,iBAAiBI,SAAvC;AACD;AACF;AACD,YAAI/E,KAAKF,oBAAoBgB,UAAUf,KAA9B,CAAT;AACAC,WAAGgF,gBAAH,GAAsB,IAAtB;AACA5E,sCAA8B6E,GAA9B,CAAkC/D,IAAlC,CAAuCJ,SAAvC;AACAH,aAAKG,SAAL,GAAiBA,SAAjB;AACAH,aAAKuE,WAAL,GAAmB9E,8BAA8B6E,GAA9B,CAAkCvD,MAArD;AACD;AACF;AACD,aAASyD,gBAAT,CAA0BxE,IAA1B,EAA+B;AAC7BN,yBAAmB,EAAC+E,gBAAe,EAAhB,EAAoBC,UAAS,EAA7B,EAAnB;AACA1E,WAAKoE,SAAL,GAAiB1E,gBAAjB;AACD;AACD,aAASiF,oBAAT,CAA8B3E,IAA9B,EAAmC;AAAA;AAAA;AAAA;;AAAA;AACjC,8BAAiBA,KAAK+B,QAAtB,mIAA+B;AAAA,cAAvBC,KAAuB;;AAC7B,cAAGA,MAAMxD,IAAN,IAAc,eAAjB,EAAiC;AAC/BkB,6BAAiB+E,cAAjB,CAAgClE,IAAhC,CAAqCyB,MAAMZ,IAAN,CAAWwD,IAAX,EAArC;AACD;AACF;AALgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMlC;AACD,aAASC,uBAAT,CAAiC7E,IAAjC,EAAsC;AACpC,UAAI8E,MAAM9E,KAAK+B,QAAL,CAAc,CAAd,EAAiBX,IAA3B;AACA,UAAI2D,QAAQ,IAAZ;AACA,UAAG/E,KAAK+B,QAAL,CAAchB,MAAd,IAAwB,CAA3B,EAA6B;AAC3BgE,gBAAQ/E,KAAK+B,QAAL,CAAc,CAAd,EAAiBX,IAAzB;AACD,OAFD,MAEK;AACH2D,gBAAQ,EAAR;AACA,aAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIhF,KAAK+B,QAAL,CAAchB,MAAjC,EAAyCiE,GAAzC,EAA6C;AAC3CD,gBAAMxE,IAAN,CAAWP,KAAK+B,QAAL,CAAciD,CAAd,EAAiB5D,IAA5B;AACD;AACF;AACD1B,uBAAiBgF,QAAjB,CAA0BI,GAA1B,IAAiCC,KAAjC;AACD;AACD,aAASE,aAAT,CAAuBjF,IAAvB,EAA4B;AAC1B,UAAIkF,eAAelF,KAAK+B,QAAL,CAAc,CAAd,CAAnB;AACA/B,WAAKmF,OAAL,GAAeD,aAAatE,KAAb,CAAmBG,MAAlC;AACAf,WAAKoB,IAAL,GAAYpB,KAAK+B,QAAL,CAAc,CAAd,EAAiBX,IAA7B;AACD;;AAED,SAAKgE,gBAAL,GAAwB;AACtBC,oBAAevF,cADO;AAEtBwF,mBAAcL,aAFQ;AAGtBM,sBAAiBxF,gBAHK;AAItByF,qBAAgBpF,eAJM;AAKtBqF,qBAAgB3B,eALM;AAMtB4B,6BAAwBxB,uBANF;AAOtByB,sBAAiBnB,gBAPK;AAQtBoB,0BAAqBjB,oBARC;AAStBkB,6BAAwBhB,uBATF;AAUtBiB,gCAA2BrF,0BAVL;AAWtBsF,+BAA0BlF,yBAXJ;AAYtBmF,4BAAuBlF,sBAZD;AAatBmF,+BAA0BxE,yBAbJ;AActByE,8BAAyBtE,wBAdH;AAetBuE,2BAAsBtE,qBAfA;AAgBtBuE,8BAAyBzE,mCAhBH;AAiBtB0E,6BAAwB1E,mCAjBF;AAkBtB2E,4BAAuB/C,sBAlBD;AAmBtBgD,2BAAsBzD,cAnBA;AAoBtB0D,2BAAsBhD,qBApBA;AAqBtBiD,0BAAqB3D,cArBC;AAsBtB4D,4BAAuBjD,sBAtBD;AAuBtBkD,2BAAsB7D,cAvBA;AAwBtB8D,2BAAsBlD,qBAxBA;AAyBtBmD,0BAAqB/D,cAzBC;AA0BtBgE,sBAAiBnD,gBA1BK;AA2BtBoD,sBAAiBlD,eA3BK;AA4BtBmD,0BAAqBlF,oBA5BC;AA6BtBmF,mBAAcvE,aA7BQ;AA8BtBwE,kBAAatE,YA9BS;AA+BtBuE,iBAAY/E,WA/BU;AAgCtBgF,gBAAW9E,UAhCW;AAiCtB+E,iBAAYpF;AAjCU,KAAxB;AAmCD;;;;iCACYqF,I,EAAK;AAAA;AAAA;AAAA;;AAAA;AAChB,8BAAwBC,OAAOC,IAAP,CAAYF,KAAKhJ,UAAjB,CAAxB,mIAAqD;AAAA,cAA7CmJ,YAA6C;;AACnD,cAAItH,YAAYmH,KAAKhJ,UAAL,CAAgBmJ,YAAhB,CAAhB;AADmD;AAAA;AAAA;;AAAA;AAEnD,kCAAoBtH,UAAUmD,SAA9B,mIAAwC;AAAA,kBAAhCP,QAAgC;;AACtC,kBAAGA,SAASK,IAAT,IAAiBjD,SAApB,EAA8B;AAC5BuH,wBAAQC,GAAR,CAAY,oBAAkB5E,SAASK,IAAT,CAAchE,KAAhC,GAAsC,OAAtC,GAA8C2D,SAASM,EAAT,CAAYjE,KAA1D,GAAgE,SAAhE,GAA0E2D,SAAS7B,IAA/F;AACD;AACF;AANkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOpD;AARe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAShB,8BAAuBqG,OAAOC,IAAP,CAAYF,KAAK/I,SAAjB,CAAvB,mIAAmD;AAAA,cAA3CqJ,WAA2C;;AACjD,cAAIlG,WAAW4F,KAAK/I,SAAL,CAAeqJ,WAAf,CAAf;AADiD;AAAA;AAAA;;AAAA;AAEjD,kCAAoBlG,SAAS4B,SAA7B,mIAAuC;AAAA,kBAA/BP,SAA+B;;AACrC,kBAAGA,UAASK,IAAT,IAAiB1B,QAApB,EAA6B;AAC3BgG,wBAAQC,GAAR,CAAY,oBAAkB5E,UAASK,IAAT,CAAchE,KAAhC,GAAsC,OAAtC,GAA8C2D,UAASM,EAAT,CAAYjE,KAA1D,GAAgE,SAAhE,GAA0E2D,UAAS7B,IAA/F;AACD;AACF;AANgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOlD;AAhBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBjB;;;;;;AAEH2G,OAAOC,OAAP,GAAiB;AACf1J,uBAAqBA;AADN,CAAjB","file":"ArgdownPreprocessor.js","sourcesContent":["import * as _ from 'lodash';\nimport {Statement} from '../model/Statement.js';\nimport {Argument} from '../model/Argument.js';\nimport {EquivalenceClass} from '../model/EquivalenceClass.js';\nimport {tokenMatcher} from 'chevrotain';\nimport {ArgdownLexer} from './../ArgdownLexer.js';\n\nclass ArgdownPreprocessor{\n  run(result){\n    result.statements = this.statements;\n    result.arguments = this.arguments;\n    return result;\n  }\n  constructor(){\n    this.name = \"ArgdownPreprocessor\";\n    let $ = this;\n\n    const statementReferencePattern = /\\[(.+)\\]/;\n    const statementDefinitionPattern = /\\[(.+)\\]\\:/;\n    const statementMentionPattern = /\\@\\[(.+)\\](\\s?)/;\n    const argumentReferencePattern = /\\<(.+)\\>/;\n    const argumentDefinitionPattern = /\\<(.+)\\>\\:/;\n    const argumentMentionPattern = /\\@\\<(.+)\\>(\\s?)/;\n    const linkPattern = /\\[(.+)\\]\\((.+)\\)/;\n\n    let uniqueTitleCounter = 0;\n    function getUniqueTitle(){\n      uniqueTitleCounter++;\n      return \"Untitled \"+uniqueTitleCounter;\n    }\n    function getEquivalenceClass(title){\n      if(!title)\n        return null;\n\n      let ec = $.statements[title];\n      if(!ec){\n        ec = new EquivalenceClass();\n        ec.title = title;\n        $.statements[title] = ec;\n      }\n      return ec;\n    }\n\n\n    let currentStatement = null;\n    let currentStatementOrArgument = null;\n    let currentArgument = null;\n    let currentArgumentReconstruction = null;\n    let currentInference = null;\n    let rangesStack = [];\n    let parentsStack = [];\n    let currentRelation = null;\n\n    function onArgdownEntry(){\n      $.statements = {};\n      $.arguments = {};\n      currentStatement = null;\n      currentStatementOrArgument = null;\n      currentArgumentReconstruction = null;\n      currentInference = null;\n      currentArgument = null;\n      rangesStack = [];\n      parentsStack = [];\n      currentRelation = null;\n    }\n    function onStatementEntry(node, parentNode){\n      currentStatement = new Statement();\n      if(parentNode.name == 'argdown'){\n          currentStatement.role = \"thesis\";\n      }\n      currentStatementOrArgument = currentStatement;\n      node.statement = currentStatement;\n    }\n    function onStatementExit(node){\n      let statement = node.statement;\n      if(!statement.title || statement.title == ''){\n        statement.title = getUniqueTitle();\n      }\n      let equivalenceClass = getEquivalenceClass(statement.title);\n      equivalenceClass.members.push(statement);\n      if(statement.role == \"thesis\"){\n        equivalenceClass.isUsedAsThesis = true; //members are used outside of argument reconstructions (not as premise or conclusion)\n      }\n      currentStatement = null;\n    }\n    function onStatementDefinitionEntry(node){\n      let match = statementDefinitionPattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    function onStatementReferenceEntry(node){\n      let match = statementReferencePattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    function onStatementMentionExit(node){\n      let match = statementMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(currentStatement){\n          let range = {type:'statement-mention',title:node.title, start:currentStatement.text.length};\n          currentStatement.text += node.image;\n          range.stop = currentStatement.text.length -1;\n          currentStatement.ranges.push(range);\n        }\n      }\n    }\n    function updateArgument(title){\n      currentArgument = $.arguments[title];\n      if(!currentArgument){\n        currentArgument = new Argument();\n        currentStatementOrArgument = currentArgument;\n        currentArgument.title = title;\n        //we are in the ArgumentDefinition token, parentNode is the argumentDefinition rule\n        $.arguments[currentArgument.title] = currentArgument;\n      }\n      currentStatement = new Statement();\n      currentArgument.descriptions.push(currentStatement);\n    }\n    function onArgumentDefinitionEntry(node, parentNode){\n      let match = argumentDefinitionPattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(title);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentDefinitionOrReferenceExit(){\n      currentStatement = null;\n      currentArgument = null;\n    }\n    function onArgumentReferenceEntry(node, parentNode){\n      let match = argumentReferencePattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(title);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentMentionExit(node){\n      let match = argumentMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(currentStatement){\n          let range = {type:'argument-mention',title:node.title, start:currentStatement.text.length};\n          currentStatement.text += node.image;\n          range.stop = currentStatement.text.length -1;\n          currentStatement.ranges.push(range);\n        }\n      }\n    }\n    function onFreestyleTextEntry(node){\n      node.text = \"\";\n      for(let child of node.children){\n        node.text += child.image;\n      }\n      if(currentStatement)\n        currentStatement.text += node.text;\n    }\n    function onLinkEntry(node){\n      let match = linkPattern.exec(node.image);\n      let linkRange = {type:'link', start: currentStatement.text.length};\n      node.url = match[2];\n      node.text = match[1];\n      currentStatement.text += node.text;\n      linkRange.stop = currentStatement.text.length - 1;\n      linkRange.url = node.url;\n      currentStatement.ranges.push(linkRange);\n      if(node.image[node.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n    }\n\n    function onBoldEntry(){\n      let boldRange = {type:'bold', start: currentStatement.text.length};\n      rangesStack.push(boldRange);\n      currentStatement.ranges.push(boldRange);\n    }\n    function onBoldExit(node){\n      let boldEnd = _.last(node.children);\n      if(boldEnd.image[boldEnd.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = currentStatement.text.length - 1;\n      rangesStack.pop();\n    }\n    function onItalicEntry(){\n      let italicRange = {type:'italic', start: currentStatement.text.length};\n      rangesStack.push(italicRange);\n      currentStatement.ranges.push(italicRange);\n    }\n    function onItalicExit(node){\n      let italicEnd = _.last(node.children);\n      if(italicEnd.image[italicEnd.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = currentStatement.text.length - 1;\n      rangesStack.pop();\n    }\n\n    function onRelationExit(node){\n      let relation = node.relation;\n      let contentNode = node.children[1];\n      let content = contentNode.argument ||contentNode.statement;\n      let target = getRelationTarget(content);\n      if(relation){\n        if(relation.from)\n          relation.to = target;\n        else {\n          relation.from = target;\n        }\n        relation.from.relations.push(relation);\n        relation.to.relations.push(relation);\n      }\n    }\n    function onIncomingSupportEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = {type:\"support\", from:target};\n      node.relation = currentRelation;\n    }\n    function onIncomingAttackEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = {type:\"attack\", from:target};\n      node.relation = currentRelation;\n    }\n    function onOutgoingSupportEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = {type:\"support\", to:target};\n      node.relation = currentRelation;\n    }\n    function onOutgoingAttackEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = {type:\"attack\", to:target};\n      node.relation = currentRelation;\n    }\n    function onRelationsEntry(){\n      parentsStack.push(getRelationTarget(currentStatementOrArgument));\n    }\n    function getRelationTarget(statementOrArgument){\n      let target = statementOrArgument;\n      if(statementOrArgument instanceof Statement){\n        if(!statementOrArgument.title)\n          statementOrArgument.title = getUniqueTitle();\n        target = getEquivalenceClass(statementOrArgument.title);\n      }\n      return target;\n    }\n    function onRelationsExit(){\n      currentRelation = null;\n      parentsStack.pop();\n    }\n\n    function onArgumentEntry(node, parentNode, childIndex){\n      let argument = null;\n      if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n            argument = precedingSibling.argument;\n          }else if(tokenMatcher(precedingSibling, ArgdownLexer.Emptyline)){\n            precedingSibling = parentNode.children[childIndex - 2];\n            if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n              argument = precedingSibling.argument;\n            }\n          }\n        }\n        if(!argument){\n          argument = new Argument();\n          argument.title = getUniqueTitle();\n          $.arguments[argument.title] = argument;\n        }\n        node.argument = argument;\n        currentArgumentReconstruction = argument;\n    }\n    function onArgumentStatementExit(node, parentNode, childIndex){\n      if(node.children.length > 1){\n        //first node is ArgdownLexer.ArgumentStatementStart\n        let statementNode = node.children[1];\n        let statement = statementNode.statement;\n        statement.role = \"premise\";\n        if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'inference'){\n            statement.role = \"conclusion\";\n            statement.inference = precedingSibling.inference;\n          }\n        }\n        let ec = getEquivalenceClass(statement.title);\n        ec.isUsedInArgument = true;\n        currentArgumentReconstruction.pcs.push(statement);\n        node.statement = statement;\n        node.statementNr = currentArgumentReconstruction.pcs.length;\n      }\n    }\n    function onInferenceEntry(node){\n      currentInference = {inferenceRules:[], metaData:{}};\n      node.inference = currentInference;\n    }\n    function onInferenceRulesExit(node){\n      for(let child of node.children){\n        if(child.name == 'freestyleText'){\n          currentInference.inferenceRules.push(child.text.trim());\n        }\n      }\n    }\n    function onMetadataStatementExit(node){\n      let key = node.children[0].text;\n      let value = null;\n      if(node.children.length == 2){\n        value = node.children[1].text;\n      }else{\n        value = [];\n        for(let i = 1; i < node.children.length; i++){\n          value.push(node.children[i].text);\n        }\n      }\n      currentInference.metaData[key] = value;\n    }\n    function onHeadingExit(node){\n      let headingStart = node.children[0];\n      node.heading = headingStart.image.length;\n      node.text = node.children[1].text;\n    }\n\n    this.argdownListeners = {\n      argdownEntry : onArgdownEntry,\n      headingExit : onHeadingExit,\n      statementEntry : onStatementEntry,\n      statementExit : onStatementExit,\n      argumentEntry : onArgumentEntry,\n      argumentStatementExit : onArgumentStatementExit,\n      inferenceEntry : onInferenceEntry,\n      inferenceRulesExit : onInferenceRulesExit,\n      metadataStatementExit : onMetadataStatementExit,\n      StatementDefinitionEntry : onStatementDefinitionEntry,\n      StatementReferenceEntry : onStatementReferenceEntry,\n      StatementMentionExit : onStatementMentionExit,\n      ArgumentDefinitionEntry : onArgumentDefinitionEntry,\n      ArgumentReferenceEntry : onArgumentReferenceEntry,\n      ArgumentMentionExit : onArgumentMentionExit,\n      argumentDefinitionExit : onArgumentDefinitionOrReferenceExit,\n      argumentReferenceExit : onArgumentDefinitionOrReferenceExit,\n      incomingSupportEntry : onIncomingSupportEntry,\n      incomingSupportExit : onRelationExit,\n      incomingAttackEntry : onIncomingAttackEntry,\n      incomingAttackExit : onRelationExit,\n      outgoingSupportEntry : onOutgoingSupportEntry,\n      outgoingSupportExit : onRelationExit,\n      outgoingAttackEntry : onOutgoingAttackEntry,\n      outgoingAttackExit : onRelationExit,\n      relationsEntry : onRelationsEntry,\n      relationsExist : onRelationsExit,\n      freestyleTextEntry : onFreestyleTextEntry,\n      italicEntry : onItalicEntry,\n      italicExit : onItalicExit,\n      boldEntry : onBoldEntry,\n      boldExit : onBoldExit,\n      LinkEntry : onLinkEntry\n    }\n  }\n  logRelations(data){\n    for(let statementKey of Object.keys(data.statements)){\n      let statement = data.statements[statementKey];\n      for(let relation of statement.relations){\n        if(relation.from == statement){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n    for(let argumentKey of Object.keys(data.arguments)){\n      let argument = data.arguments[argumentKey];\n      for(let relation of argument.relations){\n        if(relation.from == argument){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n  }\n}\nmodule.exports = {\n  ArgdownPreprocessor: ArgdownPreprocessor\n}\n"]}