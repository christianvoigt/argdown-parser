{"version":3,"sources":["../../../src/plugins/ArgdownPreprocessor.js"],"names":["_","RelationObjectTypes","Object","freeze","CONCLUSION","Symbol","STATEMENT","RECONSTRUCTED_ARGUMENT","SKETCHED_ARGUMENT","ArgdownPreprocessor","result","relations","relation","fromType","getElementType","from","toType","to","status","statements","arguments","obj","pcs","length","isUsedConclusion","name","$","statementReferencePattern","statementDefinitionPattern","statementMentionPattern","argumentReferencePattern","argumentDefinitionPattern","argumentMentionPattern","linkPattern","uniqueTitleCounter","getUniqueTitle","getEquivalenceClass","title","ec","currentStatement","currentStatementOrArgument","currentArgument","currentArgumentReconstruction","currentInference","rangesStack","parentsStack","currentRelation","inStatementTree","onArgdownEntry","onStatementEntry","node","parentNode","isRootOfStatementTree","isChildOfStatementTree","statement","onStatementExit","equivalenceClass","members","push","isUsedAsRootOfStatementTree","isUsedAsChildOfStatementTree","onStatementDefinitionEntry","match","exec","image","onStatementReferenceEntry","onStatementMentionExit","trailingWhitespace","range","type","start","text","stop","ranges","updateArgument","descriptions","onArgumentDefinitionEntry","argument","onArgumentDefinitionOrReferenceExit","onArgumentReferenceEntry","onArgumentMentionExit","onFreestyleTextEntry","children","child","onLinkEntry","linkRange","url","onBoldEntry","boldRange","onBoldExit","boldEnd","last","pop","onItalicEntry","italicRange","onItalicExit","italicEnd","onRelationExit","contentNode","content","target","getRelationTarget","onIncomingSupportEntry","onIncomingAttackEntry","onOutgoingSupportEntry","onOutgoingAttackEntry","onContradictionEntry","onRelationsEntry","statementOrArgument","onRelationsExit","onArgumentEntry","childIndex","precedingSibling","Emptyline","onArgumentStatementExit","statementNode","role","isUsedAsConclusion","inference","isUsedAsPremise","statementNr","onInferenceEntry","inferenceRules","metaData","onInferenceRulesExit","trim","onMetadataStatementExit","key","value","i","onHeadingExit","headingStart","heading","argdownListeners","argdownEntry","headingExit","statementEntry","statementExit","argumentEntry","argumentStatementExit","inferenceEntry","inferenceRulesExit","metadataStatementExit","StatementDefinitionEntry","StatementReferenceEntry","StatementMentionExit","ArgumentDefinitionEntry","ArgumentReferenceEntry","ArgumentMentionExit","argumentDefinitionExit","argumentReferenceExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","contradictionEntry","contradictionExit","relationsEntry","relationsExist","freestyleTextEntry","italicEntry","italicExit","boldEntry","boldExit","LinkEntry","data","keys","statementKey","console","log","argumentKey","module","exports"],"mappings":"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","file":"ArgdownPreprocessor.js","sourcesContent":["import * as _ from 'lodash';\nimport {Statement} from '../model/Statement.js';\nimport {Argument} from '../model/Argument.js';\nimport {EquivalenceClass} from '../model/EquivalenceClass.js';\nimport {tokenMatcher} from 'chevrotain';\nimport {ArgdownLexer} from './../ArgdownLexer.js';\n\nconst RelationObjectTypes = Object.freeze({CONCLUSION: Symbol(\"CONCLUSION\"), STATEMENT: Symbol(\"STATEMENT\"), RECONSTRUCTED_ARGUMENT: Symbol(\"RECONSTRUCTED ARGUMENT\"), SKETCHED_ARGUMENT: Symbol(\"SKETCHED ARGUMENT\")});\n\nclass ArgdownPreprocessor{\n  run(result){\n    for(let relation of this.relations){\n      let fromType = this.getElementType(relation.from);\n      let toType = this.getElementType(relation.to);\n      if(fromType == RelationObjectTypes.SKETCHED_ARGUMENT ||toType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT ||toType == RelationObjectTypes.SKETCHED_ARGUMENT){\n        relation.status = \"sketched\";\n      }else if(fromType == RelationObjectTypes.STATEMENT ||fromType == RelationObjectTypes.CONCLUSION ||fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT){\n        relation.status = \"reconstructed\";\n      }\n    }\n\n\n    result.relations = this.relations;\n    result.statements = this.statements;\n    result.arguments = this.arguments;\n    return result;\n  }\n  getElementType(obj){\n    if(obj instanceof Argument){\n      if(obj.pcs && obj.pcs.length > 0){\n        return RelationObjectTypes.SKETCHED_ARGUMENT;\n      }else{\n        return RelationObjectTypes.RECONSTRUCTED_ARGUMENT;\n      }\n    }else if(obj instanceof Statement){\n      if(obj.isUsedConclusion){\n        return RelationObjectTypes.CONCLUSION;\n      }else{\n        return RelationObjectTypes.STATEMENT;\n      }\n    }\n    return null;\n  }\n  constructor(){\n    this.name = \"ArgdownPreprocessor\";\n    let $ = this;\n\n    const statementReferencePattern = /\\[(.+)\\]/;\n    const statementDefinitionPattern = /\\[(.+)\\]\\:/;\n    const statementMentionPattern = /\\@\\[(.+)\\](\\s?)/;\n    const argumentReferencePattern = /\\<(.+)\\>/;\n    const argumentDefinitionPattern = /\\<(.+)\\>\\:/;\n    const argumentMentionPattern = /\\@\\<(.+)\\>(\\s?)/;\n    const linkPattern = /\\[(.+)\\]\\((.+)\\)/;\n\n    let uniqueTitleCounter = 0;\n    function getUniqueTitle(){\n      uniqueTitleCounter++;\n      return \"Untitled \"+uniqueTitleCounter;\n    }\n    function getEquivalenceClass(title){\n      if(!title)\n        return null;\n\n      let ec = $.statements[title];\n      if(!ec){\n        ec = new EquivalenceClass();\n        ec.title = title;\n        $.statements[title] = ec;\n      }\n      return ec;\n    }\n\n\n    let currentStatement = null;\n    let currentStatementOrArgument = null;\n    let currentArgument = null;\n    let currentArgumentReconstruction = null;\n    let currentInference = null;\n    let rangesStack = [];\n    let parentsStack = [];\n    let currentRelation = null;\n    let inStatementTree = false;\n\n    function onArgdownEntry(){\n      $.statements = {};\n      $.arguments = {};\n      $.relations = [];\n      currentStatement = null;\n      currentStatementOrArgument = null;\n      currentArgumentReconstruction = null;\n      currentInference = null;\n      currentArgument = null;\n      rangesStack = [];\n      parentsStack = [];\n      currentRelation = null;\n      inStatementTree = false;\n    }\n    function onStatementEntry(node, parentNode){\n      currentStatement = new Statement();\n      if(parentNode.name == 'argdown'){\n          currentStatement.isRootOfStatementTree = true;\n          inStatementTree = true;\n      }else if(inStatementTree){\n        currentStatement.isChildOfStatementTree = true;\n      }\n      currentStatementOrArgument = currentStatement;\n      node.statement = currentStatement;\n    }\n    function onStatementExit(node){\n      let statement = node.statement;\n      if(!statement.title || statement.title == ''){\n        statement.title = getUniqueTitle();\n      }\n      if(statement.isRootOfStatementTree){\n        inStatementTree = false;\n      }\n      let equivalenceClass = getEquivalenceClass(statement.title);\n      equivalenceClass.members.push(statement);\n      if(statement.isRootOfStatementTree){\n        equivalenceClass.isUsedAsRootOfStatementTree = true; //members are used outside of argument reconstructions (not as premise or conclusion)\n      }else if(statement.isChildOfStatementTree){\n        equivalenceClass.isUsedAsChildOfStatementTree;\n      }\n      currentStatement = null;\n    }\n    function onStatementDefinitionEntry(node){\n      let match = statementDefinitionPattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    function onStatementReferenceEntry(node){\n      let match = statementReferencePattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    function onStatementMentionExit(node){\n      let match = statementMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(currentStatement){\n          let range = {type:'statement-mention',title:node.title, start:currentStatement.text.length};\n          currentStatement.text += node.image;\n          range.stop = currentStatement.text.length -1;\n          currentStatement.ranges.push(range);\n        }\n      }\n    }\n    function updateArgument(title){\n      currentArgument = $.arguments[title];\n      if(!currentArgument){\n        currentArgument = new Argument();\n        currentStatementOrArgument = currentArgument;\n        currentArgument.title = title;\n        //we are in the ArgumentDefinition token, parentNode is the argumentDefinition rule\n        $.arguments[currentArgument.title] = currentArgument;\n      }\n      currentStatement = new Statement();\n      currentArgument.descriptions.push(currentStatement);\n    }\n    function onArgumentDefinitionEntry(node, parentNode){\n      let match = argumentDefinitionPattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(title);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentDefinitionOrReferenceExit(){\n      currentStatement = null;\n      currentArgument = null;\n    }\n    function onArgumentReferenceEntry(node, parentNode){\n      let match = argumentReferencePattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(title);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentMentionExit(node){\n      let match = argumentMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(currentStatement){\n          let range = {type:'argument-mention',title:node.title, start:currentStatement.text.length};\n          currentStatement.text += node.image;\n          range.stop = currentStatement.text.length -1;\n          currentStatement.ranges.push(range);\n        }\n      }\n    }\n    function onFreestyleTextEntry(node){\n      node.text = \"\";\n      for(let child of node.children){\n        node.text += child.image;\n      }\n      if(currentStatement)\n        currentStatement.text += node.text;\n    }\n    function onLinkEntry(node){\n      let match = linkPattern.exec(node.image);\n      let linkRange = {type:'link', start: currentStatement.text.length};\n      node.url = match[2];\n      node.text = match[1];\n      currentStatement.text += node.text;\n      linkRange.stop = currentStatement.text.length - 1;\n      linkRange.url = node.url;\n      currentStatement.ranges.push(linkRange);\n      if(node.image[node.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n    }\n\n    function onBoldEntry(){\n      let boldRange = {type:'bold', start: currentStatement.text.length};\n      rangesStack.push(boldRange);\n      currentStatement.ranges.push(boldRange);\n    }\n    function onBoldExit(node){\n      let boldEnd = _.last(node.children);\n      if(boldEnd.image[boldEnd.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = currentStatement.text.length - 1;\n      rangesStack.pop();\n    }\n    function onItalicEntry(){\n      let italicRange = {type:'italic', start: currentStatement.text.length};\n      rangesStack.push(italicRange);\n      currentStatement.ranges.push(italicRange);\n    }\n    function onItalicExit(node){\n      let italicEnd = _.last(node.children);\n      if(italicEnd.image[italicEnd.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = currentStatement.text.length - 1;\n      rangesStack.pop();\n    }\n\n    function onRelationExit(node){\n      let relation = node.relation;\n      let contentNode = node.children[1];\n      let content = contentNode.argument ||contentNode.statement;\n      let target = getRelationTarget(content);\n      if(relation){\n        if(relation.from)\n          relation.to = target;\n        else {\n          relation.from = target;\n        }\n        $.relations.push(relation);\n        relation.from.relations.push(relation);\n        relation.to.relations.push(relation);\n      }\n    }\n    function onIncomingSupportEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = {type:\"support\", from:target};\n      node.relation = currentRelation;\n    }\n    function onIncomingAttackEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = {type:\"attack\", from:target};\n      node.relation = currentRelation;\n    }\n    function onOutgoingSupportEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = {type:\"support\", to:target};\n      node.relation = currentRelation;\n    }\n    function onOutgoingAttackEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = {type:\"attack\", to:target};\n      node.relation = currentRelation;\n    }\n    function onContradictionEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = {type:\"contradiction\", from:target};\n      node.relation = currentRelation;\n    }\n\n    function onRelationsEntry(){\n      parentsStack.push(getRelationTarget(currentStatementOrArgument));\n    }\n    function getRelationTarget(statementOrArgument){\n      let target = statementOrArgument;\n      if(statementOrArgument instanceof Statement){\n        if(!statementOrArgument.title)\n          statementOrArgument.title = getUniqueTitle();\n        target = getEquivalenceClass(statementOrArgument.title);\n      }\n      return target;\n    }\n    function onRelationsExit(){\n      currentRelation = null;\n      parentsStack.pop();\n    }\n\n    function onArgumentEntry(node, parentNode, childIndex){\n      let argument = null;\n      if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n            argument = precedingSibling.argument;\n          }else if(tokenMatcher(precedingSibling, ArgdownLexer.Emptyline)){\n            precedingSibling = parentNode.children[childIndex - 2];\n            if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n              argument = precedingSibling.argument;\n            }\n          }\n        }\n        if(!argument){\n          argument = new Argument();\n          argument.title = getUniqueTitle();\n          $.arguments[argument.title] = argument;\n        }\n        node.argument = argument;\n        currentArgumentReconstruction = argument;\n    }\n    function onArgumentStatementExit(node, parentNode, childIndex){\n      if(node.children.length > 1){\n        //first node is ArgdownLexer.ArgumentStatementStart\n        let statementNode = node.children[1];\n        let statement = statementNode.statement;\n        let ec = getEquivalenceClass(statement.title);\n        statement.role = \"premise\";\n        if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'inference'){\n            statement.role = \"conclusion\";\n            ec.isUsedAsConclusion = true;\n            statement.inference = precedingSibling.inference;\n          }\n        }\n        if(statement.role == \"premise\"){\n          ec.isUsedAsPremise = true;\n        }\n        currentArgumentReconstruction.pcs.push(statement);\n        node.statement = statement;\n        node.statementNr = currentArgumentReconstruction.pcs.length;\n      }\n    }\n    function onInferenceEntry(node){\n      currentInference = {inferenceRules:[], metaData:{}};\n      node.inference = currentInference;\n    }\n    function onInferenceRulesExit(node){\n      for(let child of node.children){\n        if(child.name == 'freestyleText'){\n          currentInference.inferenceRules.push(child.text.trim());\n        }\n      }\n    }\n    function onMetadataStatementExit(node){\n      let key = node.children[0].text;\n      let value = null;\n      if(node.children.length == 2){\n        value = node.children[1].text;\n      }else{\n        value = [];\n        for(let i = 1; i < node.children.length; i++){\n          value.push(node.children[i].text);\n        }\n      }\n      currentInference.metaData[key] = value;\n    }\n    function onHeadingExit(node){\n      let headingStart = node.children[0];\n      node.heading = headingStart.image.length;\n      node.text = node.children[1].text;\n    }\n\n    this.argdownListeners = {\n      argdownEntry : onArgdownEntry,\n      headingExit : onHeadingExit,\n      statementEntry : onStatementEntry,\n      statementExit : onStatementExit,\n      argumentEntry : onArgumentEntry,\n      argumentStatementExit : onArgumentStatementExit,\n      inferenceEntry : onInferenceEntry,\n      inferenceRulesExit : onInferenceRulesExit,\n      metadataStatementExit : onMetadataStatementExit,\n      StatementDefinitionEntry : onStatementDefinitionEntry,\n      StatementReferenceEntry : onStatementReferenceEntry,\n      StatementMentionExit : onStatementMentionExit,\n      ArgumentDefinitionEntry : onArgumentDefinitionEntry,\n      ArgumentReferenceEntry : onArgumentReferenceEntry,\n      ArgumentMentionExit : onArgumentMentionExit,\n      argumentDefinitionExit : onArgumentDefinitionOrReferenceExit,\n      argumentReferenceExit : onArgumentDefinitionOrReferenceExit,\n      incomingSupportEntry : onIncomingSupportEntry,\n      incomingSupportExit : onRelationExit,\n      incomingAttackEntry : onIncomingAttackEntry,\n      incomingAttackExit : onRelationExit,\n      outgoingSupportEntry : onOutgoingSupportEntry,\n      outgoingSupportExit : onRelationExit,\n      outgoingAttackEntry : onOutgoingAttackEntry,\n      outgoingAttackExit : onRelationExit,\n      contradictionEntry : onContradictionEntry,\n      contradictionExit : onRelationExit,\n      relationsEntry : onRelationsEntry,\n      relationsExist : onRelationsExit,\n      freestyleTextEntry : onFreestyleTextEntry,\n      italicEntry : onItalicEntry,\n      italicExit : onItalicExit,\n      boldEntry : onBoldEntry,\n      boldExit : onBoldExit,\n      LinkEntry : onLinkEntry\n    }\n  }\n  logRelations(data){\n    for(let statementKey of Object.keys(data.statements)){\n      let statement = data.statements[statementKey];\n      for(let relation of statement.relations){\n        if(relation.from == statement){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n    for(let argumentKey of Object.keys(data.arguments)){\n      let argument = data.arguments[argumentKey];\n      for(let relation of argument.relations){\n        if(relation.from == argument){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n  }\n}\nmodule.exports = {\n  ArgdownPreprocessor: ArgdownPreprocessor,\n  RelationObjectTypes : RelationObjectTypes\n}\n"]}