{"version":3,"sources":["../../../src/plugins/ArgdownPreprocessor.js"],"names":["_","RelationObjectTypes","Object","freeze","STATEMENT","Symbol","RECONSTRUCTED_ARGUMENT","SKETCHED_ARGUMENT","ArgdownPreprocessor","data","relations","relation","fromType","getElementType","from","toType","to","status","argument","index","indexOf","splice","conclusionStatement","pcs","length","equivalenceClass","statements","title","relationExists","existingRelation","type","push","arguments","obj","name","$","statementReferencePattern","statementDefinitionPattern","statementMentionPattern","argumentReferencePattern","argumentDefinitionPattern","argumentMentionPattern","linkPattern","uniqueTitleCounter","getUniqueTitle","getEquivalenceClass","ec","currentStatement","currentStatementOrArgument","currentArgument","currentArgumentReconstruction","currentInference","rangesStack","parentsStack","currentRelation","inStatementTree","onArgdownEntry","onStatementEntry","node","parentNode","isRootOfStatementTree","isChildOfStatementTree","statement","onStatementExit","isEmpty","text","members","isUsedAsRootOfStatementTree","isUsedAsChildOfStatementTree","onStatementDefinitionEntry","match","exec","image","onStatementReferenceEntry","onStatementMentionExit","trailingWhitespace","range","start","stop","ranges","updateArgument","onArgumentDefinitionEntry","descriptions","onArgumentDefinitionOrReferenceExit","onArgumentReferenceEntry","onArgumentMentionExit","onFreestyleTextEntry","children","child","onLinkEntry","linkRange","url","onBoldEntry","boldRange","onBoldExit","boldEnd","last","pop","onItalicEntry","italicRange","onItalicExit","italicEnd","onRelationExit","contentNode","content","target","getRelationTarget","onIncomingSupportEntry","onIncomingAttackEntry","onOutgoingSupportEntry","onOutgoingAttackEntry","onContradictionEntry","onRelationsEntry","statementOrArgument","onRelationsExit","onArgumentEntry","childIndex","precedingSibling","Emptyline","onArgumentExit","onArgumentStatementExit","statementNode","role","isUsedAsConclusion","inference","isUsedAsPremise","statementNr","onInferenceEntry","inferenceRules","metaData","onInferenceRulesExit","trim","onMetadataStatementExit","key","value","i","onHeadingExit","headingStart","heading","argdownListeners","argdownEntry","headingExit","statementEntry","statementExit","argumentEntry","argumentExist","argumentStatementExit","inferenceEntry","inferenceRulesExit","metadataStatementExit","StatementDefinitionEntry","StatementReferenceEntry","StatementMentionExit","ArgumentDefinitionEntry","ArgumentReferenceEntry","ArgumentMentionExit","argumentDefinitionExit","argumentReferenceExit","incomingSupportEntry","incomingSupportExit","incomingAttackEntry","incomingAttackExit","outgoingSupportEntry","outgoingSupportExit","outgoingAttackEntry","outgoingAttackExit","contradictionEntry","contradictionExit","relationsEntry","relationsExit","freestyleTextEntry","italicEntry","italicExit","boldEntry","boldExit","LinkEntry","keys","statementKey","console","log","argumentKey","module","exports"],"mappings":"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","file":"ArgdownPreprocessor.js","sourcesContent":["import * as _ from 'lodash';\nimport {Statement} from '../model/Statement.js';\nimport {Argument} from '../model/Argument.js';\nimport {Relation} from '../model/Relation.js';\nimport {EquivalenceClass} from '../model/EquivalenceClass.js';\nimport {tokenMatcher} from 'chevrotain';\nimport {ArgdownLexer} from './../ArgdownLexer.js';\n\nconst RelationObjectTypes = Object.freeze({STATEMENT: Symbol(\"STATEMENT\"), RECONSTRUCTED_ARGUMENT: Symbol(\"RECONSTRUCTED ARGUMENT\"), SKETCHED_ARGUMENT: Symbol(\"SKETCHED ARGUMENT\")});\n\nclass ArgdownPreprocessor{\n  run(data){\n    for(let relation of this.relations){\n      let fromType = this.getElementType(relation.from);\n      let toType = this.getElementType(relation.to);\n      if(fromType == RelationObjectTypes.SKETCHED_ARGUMENT ||toType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT ||toType == RelationObjectTypes.SKETCHED_ARGUMENT){\n        relation.status = \"sketched\";\n      }else if(fromType == RelationObjectTypes.STATEMENT ||fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT){\n        relation.status = \"reconstructed\";\n        if(fromType == RelationObjectTypes.RECONSTRUCTED_ARGUMENT){\n          //change relation.from to point to the argument's conclusion\n          let argument = relation.from;\n          \n          //remove from argument\n          let index = _.indexOf(argument.relations, relation);\n          argument.relations.splice(index, 1);\n                    \n          let conclusionStatement = argument.pcs[relation.from.pcs.length - 1];\n          let equivalenceClass = this.statements[conclusionStatement.title];\n          \n          relation.from = equivalenceClass;\n\n          //check if this relation already exists\n          let relationExists = false;\n          for(let existingRelation of relation.from.relations){\n            if(relation.to == existingRelation.to && relation.type == existingRelation.type){\n              relationExists = true;\n              break;\n            }\n          }\n          if(!relationExists){\n            equivalenceClass.relations.push(relation);            \n          }else{\n            //remove relation from target\n            let index = _.indexOf(relation.to.relations, relation);\n            relation.to.relations.splice(index, 1);\n            //remove relation from relations\n            index = _.indexOf(this.relations, relation);\n            this.relations.splice(index, 1);\n          }\n        }\n      }\n    }\n\n\n    data.relations = this.relations;\n    data.statements = this.statements;\n    data.arguments = this.arguments;\n    return data;\n  }\n  getElementType(obj){\n    if(obj instanceof Argument){\n      if(obj.pcs && obj.pcs.length > 0){\n        return RelationObjectTypes.RECONSTRUCTED_ARGUMENT;\n      }else{\n        return RelationObjectTypes.SKETCHED_ARGUMENT;\n      }\n    }else if(obj instanceof EquivalenceClass){\n        return RelationObjectTypes.STATEMENT;\n    }\n    return null;\n  }\n  constructor(){\n    this.name = \"ArgdownPreprocessor\";\n    let $ = this;\n\n    const statementReferencePattern = /\\[(.+)\\]/;\n    const statementDefinitionPattern = /\\[(.+)\\]\\:/;\n    const statementMentionPattern = /\\@\\[(.+)\\](\\s?)/;\n    const argumentReferencePattern = /\\<(.+)\\>/;\n    const argumentDefinitionPattern = /\\<(.+)\\>\\:/;\n    const argumentMentionPattern = /\\@\\<(.+)\\>(\\s?)/;\n    const linkPattern = /\\[(.+)\\]\\((.+)\\)/;\n\n    let uniqueTitleCounter = 0;\n    function getUniqueTitle(){\n      uniqueTitleCounter++;\n      return \"Untitled \"+uniqueTitleCounter;\n    }\n    function getEquivalenceClass(title){\n      if(!title)\n        return null;\n\n      let ec = $.statements[title];\n      if(!ec){\n        ec = new EquivalenceClass();\n        ec.title = title;\n        $.statements[title] = ec;\n      }\n      return ec;\n    }\n\n\n    let currentStatement = null;\n    let currentStatementOrArgument = null;\n    let currentArgument = null;\n    let currentArgumentReconstruction = null;\n    let currentInference = null;\n    let rangesStack = [];\n    let parentsStack = [];\n    let currentRelation = null;\n    let inStatementTree = false;\n\n    function onArgdownEntry(){\n      $.statements = {};\n      $.arguments = {};\n      $.relations = [];\n      uniqueTitleCounter = 0;\n      currentStatement = null;\n      currentStatementOrArgument = null;\n      currentArgumentReconstruction = null;\n      currentInference = null;\n      currentArgument = null;\n      rangesStack = [];\n      parentsStack = [];\n      currentRelation = null;\n      inStatementTree = false;\n    }\n    function onStatementEntry(node, parentNode){\n      currentStatement = new Statement();\n      if(parentNode.name == 'argdown'){\n          currentStatement.isRootOfStatementTree = true;\n          inStatementTree = true;\n      }else if(inStatementTree){\n        currentStatement.isChildOfStatementTree = true;\n      }\n      currentStatementOrArgument = currentStatement;\n      node.statement = currentStatement;\n    }\n    function onStatementExit(node){\n      let statement = node.statement;\n      if(!statement.title || statement.title == ''){\n        statement.title = getUniqueTitle();\n      }\n      if(statement.isRootOfStatementTree){\n        inStatementTree = false;\n      }\n      let equivalenceClass = getEquivalenceClass(statement.title);\n      if(!_.isEmpty(statement.text)){\n        equivalenceClass.members.push(statement);        \n      }\n      if(statement.isRootOfStatementTree){\n        equivalenceClass.isUsedAsRootOfStatementTree = true; //members are used outside of argument reconstructions (not as premise or conclusion)\n      }else if(statement.isChildOfStatementTree){\n        equivalenceClass.isUsedAsChildOfStatementTree = true;\n      }\n      currentStatement = null;\n    }\n    function onStatementDefinitionEntry(node){\n      let match = statementDefinitionPattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    function onStatementReferenceEntry(node){\n      let match = statementReferencePattern.exec(node.image);\n      if(match != null){\n        currentStatement.title = match[1];\n        node.statement = currentStatement;\n      }\n    }\n    function onStatementMentionExit(node){\n      let match = statementMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(currentStatement){\n          let range = {type:'statement-mention',title:node.title, start:currentStatement.text.length};\n          currentStatement.text += node.image;\n          range.stop = currentStatement.text.length -1;\n          currentStatement.ranges.push(range);\n        }\n      }\n    }\n    function updateArgument(title){\n      if(title){\n        currentArgument = $.arguments[title];        \n      }\n      if(!title || !currentArgument){\n        currentArgument = new Argument();\n        if(!title){\n          currentArgument.title = getUniqueTitle();\n        }else {\n          currentArgument.title = title;\n        }\n        //we are in the ArgumentDefinition token, parentNode is the argumentDefinition rule\n        $.arguments[currentArgument.title] = currentArgument;\n      }\n      currentStatementOrArgument = currentArgument;\n      return currentArgument;\n    }\n    function onArgumentDefinitionEntry(node, parentNode){\n      let match = argumentDefinitionPattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(title);\n        currentStatement = new Statement();\n        currentArgument.descriptions.push(currentStatement);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentDefinitionOrReferenceExit(){\n      currentStatement = null;\n      currentArgument = null;\n    }\n    function onArgumentReferenceEntry(node, parentNode){\n      let match = argumentReferencePattern.exec(node.image);\n      if(match != null){\n        let title = match[1];\n        updateArgument(title);\n        parentNode.argument = currentArgument;\n      }\n    }\n    function onArgumentMentionExit(node){\n      let match = argumentMentionPattern.exec(node.image);\n      if(match){\n        node.title = match[1];\n        if(node.image[node.image.length - 1] == \" \"){\n          node.trailingWhitespace = ' ';\n        }else {\n          node.trailingWhitespace = '';\n        }\n        if(currentStatement){\n          let range = {type:'argument-mention',title:node.title, start:currentStatement.text.length};\n          currentStatement.text += node.image;\n          range.stop = currentStatement.text.length -1;\n          currentStatement.ranges.push(range);\n        }\n      }\n    }\n    function onFreestyleTextEntry(node){\n      node.text = \"\";\n      for(let child of node.children){\n        node.text += child.image;\n      }\n      if(currentStatement)\n        currentStatement.text += node.text;\n    }\n    function onLinkEntry(node){\n      let match = linkPattern.exec(node.image);\n      let linkRange = {type:'link', start: currentStatement.text.length};\n      node.url = match[2];\n      node.text = match[1];\n      currentStatement.text += node.text;\n      linkRange.stop = currentStatement.text.length - 1;\n      linkRange.url = node.url;\n      currentStatement.ranges.push(linkRange);\n      if(node.image[node.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n    }\n\n    function onBoldEntry(){\n      let boldRange = {type:'bold', start: currentStatement.text.length};\n      rangesStack.push(boldRange);\n      currentStatement.ranges.push(boldRange);\n    }\n    function onBoldExit(node){\n      let boldEnd = _.last(node.children);\n      if(boldEnd.image[boldEnd.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = currentStatement.text.length - 1;\n      rangesStack.pop();\n    }\n    function onItalicEntry(){\n      let italicRange = {type:'italic', start: currentStatement.text.length};\n      rangesStack.push(italicRange);\n      currentStatement.ranges.push(italicRange);\n    }\n    function onItalicExit(node){\n      let italicEnd = _.last(node.children);\n      if(italicEnd.image[italicEnd.image.length - 1] == ' '){\n        currentStatement.text += ' ';\n        node.trailingWhitespace = ' ';\n      }else{\n        node.trailingWhitespace = '';\n      }\n      let range = _.last(rangesStack);\n      range.stop = currentStatement.text.length - 1;\n      rangesStack.pop();\n    }\n\n    function onRelationExit(node){\n      let relation = node.relation;\n      let contentNode = node.children[1];\n      let content = contentNode.argument ||contentNode.statement;\n      let target = getRelationTarget(content);\n      if(relation){\n        if(relation.from)\n          relation.to = target;\n        else {\n          relation.from = target;\n        }\n\n        let relationExists = false;\n        for(let existingRelation of relation.from.relations){\n          if(relation.to == existingRelation.to && relation.type == existingRelation.type){\n            relationExists = true;\n            break;\n          }else if(relation.type == \"contradiction\" && relation.type == existingRelation.type && relation.from == existingRelation.to && relation.to == existingRelation.from){\n            relationExists = true;\n            break;\n          }\n        }\n        if(!relationExists){\n          $.relations.push(relation);\n          relation.from.relations.push(relation);\n          relation.to.relations.push(relation);\n        }\n      }\n    }\n    function onIncomingSupportEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"support\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onIncomingAttackEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"attack\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n    function onOutgoingSupportEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"support\");\n      currentRelation.to = target;\n      node.relation = currentRelation;\n    }\n    function onOutgoingAttackEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"attack\");\n      currentRelation.to = target;\n      node.relation = currentRelation;\n    }\n    function onContradictionEntry(node){\n      let target = _.last(parentsStack);\n      currentRelation = new Relation(\"contradiction\");\n      currentRelation.from = target;\n      node.relation = currentRelation;\n    }\n\n    function onRelationsEntry(){\n      parentsStack.push(getRelationTarget(currentStatementOrArgument));\n    }\n    function getRelationTarget(statementOrArgument){\n      let target = statementOrArgument;\n      if(statementOrArgument instanceof Statement){\n        if(!statementOrArgument.title)\n          statementOrArgument.title = getUniqueTitle();\n        target = getEquivalenceClass(statementOrArgument.title);\n      }\n      return target;\n    }\n    function onRelationsExit(){\n      currentRelation = null;\n      parentsStack.pop();\n    }\n\n    function onArgumentEntry(node, parentNode, childIndex){\n      let argument = null;\n      if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n            argument = precedingSibling.argument;\n          }else if(tokenMatcher(precedingSibling, ArgdownLexer.Emptyline)){\n            precedingSibling = parentNode.children[childIndex - 2];\n            if(precedingSibling.name == 'argumentReference' || precedingSibling.name == 'argumentDefinition'){\n              argument = precedingSibling.argument;\n            }\n          }\n        }\n        if(!argument){\n          argument = updateArgument();\n        }\n        //if there is a previous reconstruction, overwrite it\n        if(argument.pcs.length > 0){\n          //TODO: throw error\n          argument.pcs = [];\n        }\n        node.argument = argument;\n        currentArgumentReconstruction = argument;\n    }\n    function onArgumentExit(){\n      currentStatement = null;\n      currentArgument = null;\n      currentArgumentReconstruction = null;\n    }\n    function onArgumentStatementExit(node, parentNode, childIndex){\n      if(node.children.length > 1){\n        //first node is ArgdownLexer.ArgumentStatementStart\n        let statementNode = node.children[1];\n        let statement = statementNode.statement;\n        let ec = getEquivalenceClass(statement.title);\n        statement.role = \"premise\";\n        if(childIndex > 0){\n          let precedingSibling = parentNode.children[childIndex - 1];\n          if(precedingSibling.name == 'inference'){\n            statement.role = \"conclusion\";\n            ec.isUsedAsConclusion = true;\n            statement.inference = precedingSibling.inference;\n          }\n        }\n        if(statement.role == \"premise\"){\n          ec.isUsedAsPremise = true;\n        }\n        currentArgumentReconstruction.pcs.push(statement);\n        node.statement = statement;\n        node.statementNr = currentArgumentReconstruction.pcs.length;\n      }\n    }\n    function onInferenceEntry(node){\n      currentInference = {inferenceRules:[], metaData:{}};\n      node.inference = currentInference;\n    }\n    function onInferenceRulesExit(node){\n      for(let child of node.children){\n        if(child.name == 'freestyleText'){\n          currentInference.inferenceRules.push(child.text.trim());\n        }\n      }\n    }\n    function onMetadataStatementExit(node){\n      let key = node.children[0].text;\n      let value = null;\n      if(node.children.length == 2){\n        value = node.children[1].text;\n      }else{\n        value = [];\n        for(let i = 1; i < node.children.length; i++){\n          value.push(node.children[i].text);\n        }\n      }\n      currentInference.metaData[key] = value;\n    }\n    function onHeadingExit(node){\n      let headingStart = node.children[0];\n      node.heading = headingStart.image.length;\n      node.text = node.children[1].text;\n    }\n\n    this.argdownListeners = {\n      argdownEntry : onArgdownEntry,\n      headingExit : onHeadingExit,\n      statementEntry : onStatementEntry,\n      statementExit : onStatementExit,\n      argumentEntry : onArgumentEntry,\n      argumentExist : onArgumentExit,\n      argumentStatementExit : onArgumentStatementExit,\n      inferenceEntry : onInferenceEntry,\n      inferenceRulesExit : onInferenceRulesExit,\n      metadataStatementExit : onMetadataStatementExit,\n      StatementDefinitionEntry : onStatementDefinitionEntry,\n      StatementReferenceEntry : onStatementReferenceEntry,\n      StatementMentionExit : onStatementMentionExit,\n      ArgumentDefinitionEntry : onArgumentDefinitionEntry,\n      ArgumentReferenceEntry : onArgumentReferenceEntry,\n      ArgumentMentionExit : onArgumentMentionExit,\n      argumentDefinitionExit : onArgumentDefinitionOrReferenceExit,\n      argumentReferenceExit : onArgumentDefinitionOrReferenceExit,\n      incomingSupportEntry : onIncomingSupportEntry,\n      incomingSupportExit : onRelationExit,\n      incomingAttackEntry : onIncomingAttackEntry,\n      incomingAttackExit : onRelationExit,\n      outgoingSupportEntry : onOutgoingSupportEntry,\n      outgoingSupportExit : onRelationExit,\n      outgoingAttackEntry : onOutgoingAttackEntry,\n      outgoingAttackExit : onRelationExit,\n      contradictionEntry : onContradictionEntry,\n      contradictionExit : onRelationExit,\n      relationsEntry : onRelationsEntry,\n      relationsExit : onRelationsExit,\n      freestyleTextEntry : onFreestyleTextEntry,\n      italicEntry : onItalicEntry,\n      italicExit : onItalicExit,\n      boldEntry : onBoldEntry,\n      boldExit : onBoldExit,\n      LinkEntry : onLinkEntry\n    }\n  }\n  logRelations(data){\n    for(let statementKey of Object.keys(data.statements)){\n      let statement = data.statements[statementKey];\n      for(let relation of statement.relations){\n        if(relation.from == statement){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n    for(let argumentKey of Object.keys(data.arguments)){\n      let argument = data.arguments[argumentKey];\n      for(let relation of argument.relations){\n        if(relation.from == argument){\n          console.log(\"Relation from: \"+relation.from.title+\" to: \"+relation.to.title+\" type: \"+relation.type);\n        }\n      }\n    }\n  }\n}\nmodule.exports = {\n  ArgdownPreprocessor: ArgdownPreprocessor,\n  RelationObjectTypes : RelationObjectTypes\n}\n"]}