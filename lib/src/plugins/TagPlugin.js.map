{"version":3,"sources":["../../../src/plugins/TagPlugin.js"],"names":["_","TagPlugin","config","defaultSettings","colorScheme","defaults","defaultsDeep","name","request","tagPlugin","settings","getSettings","tagColorScheme","tags","response","statements","arguments","tagsDictionary","selectedTags","tagData","push","tag","tagConfig","find","clone","index","indexOf","cssClass","stringToClassName","color","length","Object","keys","title","equivalenceClass","sortedTags","sortTags","argument","filtered","filter","sorted","sortBy","module","exports"],"mappings":"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","file":"TagPlugin.js","sourcesContent":["import * as _ from \"lodash\";\nimport utils from \"../utils.js\";\n\nclass TagPlugin {\n    constructor(config) {\n        let defaultSettings = {\n            colorScheme: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\", \"#e6ab02\", \"#a6761d\", \"#666666\"]\n        };\n        this.defaults = _.defaultsDeep({}, config, defaultSettings);\n        this.name = \"TagPlugin\";\n        this.config = config;\n    }\n    getSettings(request) {\n        if (!request.tagPlugin) {\n            request.tagPlugin = {};\n        }\n        return request.tagPlugin;\n    }\n    prepare(request) {\n        const settings = this.getSettings(request);\n        _.defaultsDeep(settings, this.defaults);\n        if (request.tagColorScheme) {\n            settings.colorScheme = request.tagColorScheme;\n        }\n        if (request.tags) {\n            settings.tags = request.tags;\n        }\n    }\n    run(request, response) {\n        if (!response.tags || !response.statements || !response.arguments) {\n            return;\n        }\n        response.tagsDictionary = {};\n\n        let selectedTags = response.tags;\n        const settings = this.getSettings(request);\n        if (settings.tags) {\n            selectedTags = [];\n            for (let tagData of settings.tags) {\n                selectedTags.push(tagData.tag);\n            }\n        }\n        for (let tag of response.tags) {\n            let tagData = null;\n            if (settings.tags) {\n                let tagConfig = _.find(request.tags, { tag: tag });\n                tagData = _.clone(tagConfig);\n            }\n            if (!tagData) {\n                tagData = { tag: tag };\n            }\n            response.tagsDictionary[tag] = tagData;\n            let index = selectedTags.indexOf(tag);\n            tagData.cssClass = utils.stringToClassName(\"tag-\" + tag);\n            if (index > -1) {\n                if (!tagData.color && index < settings.colorScheme.length) {\n                    tagData.color = settings.colorScheme[index];\n                }\n                tagData.cssClass += \" tag\" + index;\n                tagData.index = index;\n            }\n        }\n        for (let title of Object.keys(response.statements)) {\n            let equivalenceClass = response.statements[title];\n            if (equivalenceClass.tags) {\n                equivalenceClass.sortedTags = this.sortTags(equivalenceClass.tags, response);\n            }\n        }\n        for (let title of Object.keys(response.arguments)) {\n            let argument = response.arguments[title];\n            if (argument.tags) {\n                argument.sortedTags = this.sortTags(argument.tags, response);\n            }\n        }\n    }\n    sortTags(tags, response) {\n        const filtered = _.filter(tags, function(tag) {\n            return response.tagsDictionary[tag].index != null;\n        });\n        const sorted = _.sortBy(filtered, function(tag) {\n            return response.tagsDictionary[tag].index;\n        });\n        return sorted;\n    }\n}\nmodule.exports = {\n    TagPlugin: TagPlugin\n};\n"]}