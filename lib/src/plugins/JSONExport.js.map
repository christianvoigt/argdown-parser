{"version":3,"sources":["../../../src/plugins/JSONExport.js"],"names":["_","JSONExport","request","response","json","config","argdown","arguments","statements","relations","settings","exportMap","map","nodes","edges","exportSections","sections","exportTags","tags","$","JSON","stringify","key","value","removeEmbeddedRelations","undefined","spaces","previousSettings","defaultsDeep","name","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;AACZ;;AACA;;;;;;IAEMC,U;;;wBAeAC,O,EAASC,Q,EAAS;AACpB,UAAGD,QAAQE,IAAX,EAAgB;AACd,aAAKC,MAAL,GAAcH,QAAQE,IAAtB;AACD,OAFD,MAEM,IAAGF,QAAQD,UAAX,EAAsB;AAC1B,aAAKI,MAAL,GAAcH,QAAQD,UAAtB;AACD;AACD,UAAMK,UAAU;AACdC,mBAAWJ,SAASI,SADN;AAEdC,oBAAYL,SAASK,UAFP;AAGdC,mBAAWN,SAASM;AAHN,OAAhB;AAKA,UAAG,KAAKC,QAAL,CAAcC,SAAd,IAA2BR,SAASS,GAApC,IAA2CT,SAASS,GAAT,CAAaC,KAAxD,IAAiEV,SAASS,GAAT,CAAaE,KAAjF,EAAuF;AACrFR,gBAAQM,GAAR,GAAc;AACZC,iBAAOV,SAASS,GAAT,CAAaC,KADR;AAEZC,iBAAOX,SAASS,GAAT,CAAaE;AAFR,SAAd;AAID;AACD,UAAG,KAAKJ,QAAL,CAAcK,cAAd,IAAgCZ,SAASa,QAA5C,EAAqD;AACnDV,gBAAQU,QAAR,GAAmBb,SAASa,QAA5B;AACD;AACD,UAAG,KAAKN,QAAL,CAAcO,UAAd,IAA4Bd,SAASe,IAAxC,EAA6C;AAC3CZ,gBAAQY,IAAR,GAAef,SAASe,IAAxB;AACD;AACD,UAAMC,IAAI,IAAV;AACAhB,eAASC,IAAT,GAAgBgB,KAAKC,SAAL,CAAef,OAAf,EAAwB,UAASgB,GAAT,EAAcC,KAAd,EAAoB;AAC1D,YAAGJ,EAAET,QAAF,CAAWc,uBAAX,IAAsCF,OAAO,WAA7C,KAA6D,sCAA4B,kDAAzF,CAAH,EAA8H;AAC5H,iBAAOG,SAAP;AACD;;AAED,YAAG,CAACN,EAAET,QAAF,CAAWK,cAAZ,IAA8BO,OAAO,SAArC,KAAmD,sCAA4B,kDAA/E,CAAH,EAAoH;AAClH,iBAAOG,SAAP;AACD;;AAED,eAAOF,KAAP;AACD,OAVe,EAUb,KAAKb,QAAL,CAAcgB,MAVD,CAAhB;AAWA,aAAOvB,QAAP;AACD;;;sBAlDUE,M,EAAO;AAChB,UAAIsB,mBAAmB,KAAKjB,QAA5B;AACA,UAAG,CAACiB,gBAAJ,EAAqB;AACnBA,2BAAmB;AACjBD,kBAAS,CADQ;AAEjBF,mCAAyB,KAFR;AAGjBb,qBAAY,IAHK;AAIjBI,0BAAiB,IAJA;AAKjBE,sBAAa;AALI,SAAnB;AAOD;AACD,WAAKP,QAAL,GAAgBV,EAAE4B,YAAF,CAAe,EAAf,EAAmBvB,MAAnB,EAA2BsB,gBAA3B,CAAhB;AACD;;;AAuCD,sBAAYtB,MAAZ,EAAmB;AAAA;;AACjB,SAAKwB,IAAL,GAAY,YAAZ;AACA,SAAKxB,MAAL,GAAcA,MAAd;AACD;;;;;AAEHyB,OAAOC,OAAP,GAAiB;AACf9B,cAAYA;AADG,CAAjB","file":"JSONExport.js","sourcesContent":["import * as _ from 'lodash';\nimport {Argument} from '../model/Argument.js';\nimport {EquivalenceClass} from '../model/EquivalenceClass.js';\n\nclass JSONExport{\n  set config(config){\n    let previousSettings = this.settings;\n    if(!previousSettings){\n      previousSettings = {\n        spaces : 2,\n        removeEmbeddedRelations: false,\n        exportMap : true,\n        exportSections : true,\n        exportTags : true\n      };\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);\n  }\n  \n  run(request, response){\n    if(request.json){\n      this.config = request.json;\n    }else if(request.JSONExport){\n      this.config = request.JSONExport;\n    }\n    const argdown = {\n      arguments: response.arguments,\n      statements: response.statements,\n      relations: response.relations\n    };\n    if(this.settings.exportMap && response.map && response.map.nodes && response.map.edges){\n      argdown.map = {\n        nodes: response.map.nodes,\n        edges: response.map.edges\n      }\n    }\n    if(this.settings.exportSections && response.sections){\n      argdown.sections = response.sections;\n    }\n    if(this.settings.exportTags && response.tags){\n      argdown.tags = response.tags;\n    }\n    const $ = this;\n    response.json = JSON.stringify(argdown, function(key, value){\n      if($.settings.removeEmbeddedRelations && key == \"relations\" && (this instanceof Argument || this instanceof EquivalenceClass)){\n        return undefined;\n      }\n      \n      if(!$.settings.exportSections && key == \"section\" && (this instanceof Argument || this instanceof EquivalenceClass)){\n        return undefined;\n      }\n      \n      return value;\n    }, this.settings.spaces);\n    return response;\n  }\n  constructor(config){\n    this.name = \"JSONExport\";\n    this.config = config;    \n  }\n}\nmodule.exports = {\n  JSONExport: JSONExport\n}\n"]}