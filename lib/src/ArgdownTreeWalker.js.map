{"version":3,"sources":["../../src/ArgdownTreeWalker.js"],"names":["ArgdownTreeWalker","tree","visitNode","tokenInstance","constr","tokenName","node","parentNode","childIndex","name","emit","getTokenName","children","length","i","child","string","charAt","toUpperCase","slice","module","exports"],"mappings":";;;;AAAA;;AACA;;;;;;;;IAGMA,iB;;;;;;;;;;;yBACCC,I,EAAK;AACR,WAAKC,SAAL,CAAeD,IAAf;AACD;;;iCAEYE,a,EAAc;AACzB,UAAIC,SAAS,qCAAoBD,aAApB,CAAb;AACA,aAAOC,OAAOC,SAAd;AACD;;;8BAESC,I,EAAMC,U,EAAYC,U,EAAW;AACrC,UAAGF,KAAKG,IAAR,EAAa;AACX,aAAKC,IAAL,CAAUJ,KAAKG,IAAL,GAAU,OAApB,EAA6BH,IAA7B,EAAmCC,UAAnC,EAA+CC,UAA/C;AACD,OAFD,MAEM;AACJ,aAAKE,IAAL,CAAU,KAAKC,YAAL,CAAkBL,IAAlB,IAA0B,OAApC,EAA6CA,IAA7C,EAAmDC,UAAnD,EAA+DC,UAA/D;AACD;;AAED,UAAGF,KAAKM,QAAL,IAAiBN,KAAKM,QAAL,CAAcC,MAAd,GAAuB,CAA3C,EAA6C;AAC3C,aAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIR,KAAKM,QAAL,CAAcC,MAAjC,EAAyCC,GAAzC,EAA6C;AAC3C,cAAIC,QAAQT,KAAKM,QAAL,CAAcE,CAAd,CAAZ;AACA,eAAKZ,SAAL,CAAea,KAAf,EAAsBT,IAAtB,EAA4BQ,CAA5B;AACD;AACF;;AAED,UAAGR,KAAKG,IAAR,EAAa;AACX,aAAKC,IAAL,CAAUJ,KAAKG,IAAL,GAAU,MAApB,EAA4BH,IAA5B,EAAkCC,UAAlC,EAA8CC,UAA9C;AACD,OAFD,MAEK;AACH,aAAKE,IAAL,CAAU,KAAKC,YAAL,CAAkBL,IAAlB,IAA0B,MAApC,EAA4CA,IAA5C,EAAkDC,UAAlD,EAA8DC,UAA9D;AACD;AACF;;;0CAEqBQ,M,EAAQ;AAC1B,aAAOA,OAAOC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,OAAOG,KAAP,CAAa,CAAb,CAAxC;AACH;;;;;;AAEHC,OAAOC,OAAP,GAAiB;AACfrB,qBAAmBA;AADJ,CAAjB","file":"ArgdownTreeWalker.js","sourcesContent":["import {EventEmitter} from \"eventemitter3\";\nimport {getTokenConstructor} from \"chevrotain\";\n\n\nclass ArgdownTreeWalker extends EventEmitter{\n  walk(tree){\n    this.visitNode(tree);\n  }\n\n  getTokenName(tokenInstance){\n    let constr = getTokenConstructor(tokenInstance);\n    return constr.tokenName;\n  }\n\n  visitNode(node, parentNode, childIndex){\n    if(node.name){\n      this.emit(node.name+'Entry', node, parentNode, childIndex);\n    }else {\n      this.emit(this.getTokenName(node) + 'Entry', node, parentNode, childIndex);\n    }\n\n    if(node.children && node.children.length > 0){\n      for(var i = 0; i < node.children.length; i++){\n        let child = node.children[i];\n        this.visitNode(child, node, i);\n      }\n    }\n\n    if(node.name){\n      this.emit(node.name+'Exit', node, parentNode, childIndex);\n    }else{\n      this.emit(this.getTokenName(node) + 'Exit', node, parentNode, childIndex);\n    }\n  }\n\n  capitalizeFirstLetter(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n}\nmodule.exports = {\n  ArgdownTreeWalker: ArgdownTreeWalker\n}\n"]}