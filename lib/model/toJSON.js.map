{"version":3,"sources":["../../src/model/toJSON.ts"],"names":["prepareStatementForJSON","s","copy","section","id","prepareArgumentForJSON","a","prepareMapEdgeForJSON","e","edge","type","relationType","from","to","fromEquivalenceClass","title","toEquivalenceClass","prepareMapNodeForJSON","n","node","labelTitle","labelText","prepareGroupMapNodeForJSON","children","parent","prepareRelationForJSON","r","rel","fromType","toType","prepareSectionForJSON","heading","jsonReplacer","key","value","ArgdownTypes","ARGUMENT","ARGUMENT_MAP_NODE","EQUIVALENCE_CLASS","GROUP_MAP_NODE","INFERENCE","MAP_EDGE","RELATION","RULE_NODE","SECTION","STATEMENT","STATEMENT_MAP_NODE","toJSON","obj","replacer","space","wrapper","JSON","stringify"],"mappings":"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","sourcesContent":["import { ArgdownTypes, IRelation, ISection, IMapEdge, IMapNode, IStatement, IArgument, IGroupMapNode } from \"./model\";\nimport { clone } from \"lodash\";\nconst prepareStatementForJSON = (s: IStatement): any => {\n  let copy: any = clone(s);\n  if (copy.section) {\n    copy.section = copy.section.id;\n  }\n  return copy;\n};\n/**\n * Substitutes sections with their ids.\n */\nconst prepareArgumentForJSON = (a: IArgument) => {\n  let copy: any = clone(a);\n  if (copy.section) {\n    copy.section = copy.section.id;\n  }\n  return copy;\n};\nconst prepareMapEdgeForJSON = (e: IMapEdge) => {\n  let edge: any = { id: e.id, type: e.type, relationType: e.relationType };\n  if (e.from) {\n    edge.from = e.from.id;\n  }\n  if (e.to) {\n    edge.to = e.to.id;\n  }\n  if (e.fromEquivalenceClass) {\n    edge.fromEquivalenceClass = e.fromEquivalenceClass.title;\n  }\n  if (e.toEquivalenceClass) {\n    edge.toEquivalenceClass = e.toEquivalenceClass.title;\n  }\n  return edge;\n};\nconst prepareMapNodeForJSON = (n: IMapNode) => {\n  let node = {\n    id: n.id,\n    title: n.title,\n    type: n.type,\n    labelTitle: n.labelTitle,\n    labelText: n.labelText\n  };\n  return node;\n};\nconst prepareGroupMapNodeForJSON = (n: IGroupMapNode) => {\n  let node = {\n    id: n.id,\n    title: n.title,\n    type: n.type,\n    labelTitle: n.labelTitle,\n    labelText: n.labelText,\n    children: n.children,\n    parent: n.parent\n  };\n  return node;\n};\nconst prepareRelationForJSON = (r: IRelation): any => {\n  let rel: any = {\n    type: r.type,\n    relationType: r.relationType\n  };\n\n  if (r.from) {\n    rel.from = r.from.title;\n    rel.fromType = r.from.type;\n  }\n\n  if (r.to) {\n    rel.to = r.to.title;\n    rel.toType = r.to.type;\n  }\n\n  return rel;\n};\n/**\n * Substitutes parent with parent's id.\n */\nconst prepareSectionForJSON = (s: ISection) => {\n  let copy: any = clone(s);\n  if (copy.parent) {\n    copy.parent = copy.parent.id;\n  }\n  if (copy.heading) {\n    delete copy.heading;\n  }\n  return copy;\n};\nconst jsonReplacer = (key: string, value: any): any => {\n  if (value && value.type) {\n    switch (value.type) {\n      case ArgdownTypes.ARGUMENT:\n        return prepareArgumentForJSON(value);\n      case ArgdownTypes.ARGUMENT_MAP_NODE:\n        return prepareMapNodeForJSON(value);\n      case ArgdownTypes.EQUIVALENCE_CLASS:\n        return value;\n      case ArgdownTypes.GROUP_MAP_NODE:\n        return prepareGroupMapNodeForJSON(value);\n      case ArgdownTypes.INFERENCE:\n        return value;\n      case ArgdownTypes.MAP_EDGE:\n        return prepareMapEdgeForJSON(value);\n      case ArgdownTypes.RELATION:\n        return prepareRelationForJSON(value);\n      case ArgdownTypes.RULE_NODE:\n        return value;\n      case ArgdownTypes.SECTION:\n        return prepareSectionForJSON(value);\n      case ArgdownTypes.STATEMENT:\n        return prepareStatementForJSON(value);\n      case ArgdownTypes.STATEMENT_MAP_NODE:\n        return prepareMapNodeForJSON(value);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\nexport const toJSON = (\n  obj: object,\n  replacer?: ((key: string, value: any) => any) | undefined | null,\n  space?: number\n): string => {\n  const wrapper = (key: string, value: any) => {\n    if (replacer) {\n      return jsonReplacer(key, replacer(key, value));\n    }\n    return jsonReplacer(key, value);\n  };\n  return JSON.stringify(obj, wrapper, space);\n};\n"],"file":"toJSON.js"}