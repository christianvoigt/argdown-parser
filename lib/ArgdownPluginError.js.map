{"version":3,"sources":["../src/ArgdownPluginError.ts"],"names":["ArgdownPluginError","plugin","message","Object","setPrototypeOf","prototype","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;IAKaA,kB;;;;;AACX;;;;AAIA;;;;;AAKA;;;;;;AAMA,8BAAYC,MAAZ,EAA4BC,OAA5B,EAA8C;AAAA;;AAAA;;AAC5C,4FAAMA,OAAN,GAD4C,CAC5B;;AAD4B;;AAAA;;AAE5CC,WAAOC,cAAP,wDAA4B,iEAAWC,SAAvC,EAF4C,CAEO;;AACnD,UAAKJ,MAAL,GAAcA,MAAd;AAH4C;AAI7C;;;mBApBqCK,K","sourcesContent":["/**\n * [[IArgdownPlugin]] implementations are expected to check in their [[IArgdownPlugin.prepare]] method\n * that all required data is available in the response object. If this is not the case, they should throw an\n * [[ArgdownPluginError]].\n */\nexport class ArgdownPluginError extends Error {\n  /**\n   * The name of the plugin throwing the error.\n   */\n  plugin: string;\n  /**\n   * The name of the processor the plugin is a part of.\n   * Will be added automatically by [[ArgdownApplication]].\n   */\n  processor?: string;\n  /**\n   *\n   * @param plugin the nname of the plugin throwing this error\n   * @param message the reason why this error was thrown\n   * @param e\n   */\n  constructor(plugin: string, message?: string) {\n    super(message); // 'Error' breaks prototype chain here\n    Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain\n    this.plugin = plugin;\n  }\n}\n"],"file":"ArgdownPluginError.js"}