{"version":3,"sources":["../../test/ModelPlugin.spec.ts"],"names":["app","ArgdownApplication","describe","parserPlugin","ParserPlugin","modelPlugin","ModelPlugin","addPlugin","it","source","result","run","process","input","logLevel","statements","to","exist","isUsedAsTopLevelStatement","be","true","members","text","equal","role","StatementRole","TOP_LEVEL_STATEMENT","ranges","length","type","start","stop","arguments","descriptions","description","Object","keys","relations","isUsedAsRelationStatement","relationType","RelationType","ENTAILS","from","ATTACK","SUPPORT","parserErrors","UNDERCUT","title","argument","pcs","PREMISE","PRELIMINARY_CONCLUSION","MAIN_CONCLUSION","conclusionEc","isUsedAsMainConclusion","premise","false","isUsedAsPreliminaryConclusion","isUsedAsPremise","preConclusion","conclusion","CONTRARY","inference","inferenceRules","statement","sketchedArgument","sections","children","section","tags","fs","readFileSync","previousToken","startLine","startColumn","logExceptions","exceptions","message","contain","ast","rel","ArgdownTypes","EQUIVALENCE_CLASS"],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport {\n  ArgdownApplication,\n  ParserPlugin,\n  ModelPlugin,\n  IRelation,\n  IConclusion,\n  ITokenNode,\n  IAstNode,\n  RelationType,\n  IEquivalenceClass,\n  ArgdownTypes,\n  StatementRole\n} from \"../src/index\";\nimport fs from \"fs\";\nimport { getCanonicalMemberText, getCanonicalMember, getCanonicalDescription, getCanonicalDescriptionText } from \"../src/model/model-utils\";\n\nlet app = new ArgdownApplication();\n\ndescribe(\"ModelPlugin\", function() {\n  const parserPlugin = new ParserPlugin();\n  let modelPlugin = new ModelPlugin();\n  app.addPlugin(parserPlugin, \"parse-input\");\n  app.addPlugin(modelPlugin, \"build-model\");\n\n  it(\"can create statements dictionary and save statement by title\", function() {\n    const source = `\n    [Test]: Hello Earth!\n\n    [Test]: Hello _World_!`;\n    const result = app.run({ process: [\"parse-input\", \"build-model\"], input: source, logLevel: \"error\" });\n    const statements = result.statements!;\n    expect(statements).to.exist;\n    expect(statements[\"Test\"]).to.exist;\n    expect(statements[\"Test\"].isUsedAsTopLevelStatement).to.be.true;\n    expect(statements[\"Test\"].members[0].text).to.equal(\"Hello Earth!\");\n    expect(statements[\"Test\"].members[0].role).to.equal(StatementRole.TOP_LEVEL_STATEMENT);\n    expect(statements[\"Test\"].members[1].text).to.equal(\"Hello World!\");\n    expect(statements[\"Test\"].members[1].role).to.equal(StatementRole.TOP_LEVEL_STATEMENT);\n    expect(getCanonicalMember(statements[\"Test\"])!.text).to.equal(\"Hello World!\");\n    expect(getCanonicalMemberText(statements[\"Test\"])).to.equal(\"Hello World!\");\n    expect(statements[\"Test\"].members[1].ranges!.length).to.equal(1);\n    expect(statements[\"Test\"].members[1].ranges![0].type).to.equal(\"italic\");\n    expect(statements[\"Test\"].members[1].ranges![0].start).to.equal(6);\n    expect(statements[\"Test\"].members[1].ranges![0].stop).to.equal(10);\n  });\n  it(\"can create arguments dictionary and save argument by title\", function() {\n    let source = `\n    <Test>: Hello Earth!\n\n    <Test>: Hello _World_!`;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(result.arguments![\"Test\"]).to.exist;\n    expect(result.arguments![\"Test\"].descriptions.length).to.equal(2);\n    let description = result.arguments![\"Test\"].descriptions[1];\n    expect(getCanonicalDescription(result.arguments![\"Test\"])).to.equal(description);\n    expect(getCanonicalDescriptionText(result.arguments![\"Test\"])).to.equal(description.text);\n    expect(description.text).to.equal(\"Hello World!\");\n    expect(description.ranges!.length).to.equal(1);\n    expect(description.ranges![0].type).to.equal(\"italic\");\n    expect(description.ranges![0].start).to.equal(6);\n    expect(description.ranges![0].stop).to.equal(10);\n  });\n  it(\"can create statement relations and ignore duplicates\", function() {\n    let source = `\n    [A]: The Beatles are the best!\n      + [B]: The Beatles made 'Rubber Soul'!\n      -> <C>: The Rolling Stones were cooler!\n        \n    [A]\n      + [B]\n      -> <C>\n    `;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n\n    expect(Object.keys(result.statements!).length).to.equal(2);\n    expect(Object.keys(result.arguments!).length).to.equal(1);\n    expect(result.relations!.length).to.equal(2);\n\n    expect(result.statements![\"A\"]).to.exist;\n    expect(result.statements![\"A\"].isUsedAsTopLevelStatement).to.equal(true);\n    expect(!!result.statements![\"A\"].isUsedAsRelationStatement).to.equal(false);\n    expect(result.statements![\"A\"].relations!.length).to.equal(2);\n    expect(result.statements![\"A\"].relations![0].relationType).to.equal(RelationType.ENTAILS);\n    expect(result.statements![\"A\"].relations![0].to).to.equal(result.statements![\"A\"]);\n    expect(result.statements![\"A\"].relations![0].from).to.equal(result.statements![\"B\"]);\n    expect(result.statements![\"B\"]).to.exist;\n    expect(!!result.statements![\"B\"].isUsedAsTopLevelStatement).to.equal(false);\n    expect(result.statements![\"B\"].isUsedAsRelationStatement).to.equal(true);\n    expect(result.statements![\"B\"].relations!.length).to.equal(1);\n    expect(result.arguments![\"C\"]).to.exist;\n    expect(result.arguments![\"C\"].relations!.length).to.equal(1);\n    expect(result.arguments![\"C\"].relations![0].relationType).to.equal(RelationType.ATTACK);\n    expect(result.arguments![\"C\"].relations![0].from).to.equal(result.statements![\"A\"]);\n    expect(result.arguments![\"C\"].relations![0].to).to.equal(result.arguments![\"C\"]);\n  });\n  it(\"can ignore duplicates of argument relations\", function() {\n    let source = `\n    [A]: text\n      + <Argument 1>\n    \n    <Argument 1>\n    \n    (1) text\n    (2) text\n    ----\n    (3) [B]: text\n      +> [A]\n    `;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(Object.keys(result.statements!).length).to.equal(4);\n    expect(Object.keys(result.arguments!).length).to.equal(1);\n    expect(result.relations!.length).to.equal(1);\n  });\n  it(\"can create sketched argument relations\", function() {\n    let source =\n      \"<A>: The Beatles are the best!\\n  +<B>: The Beatles made 'Rubber Soul'!\\n  ->[C]: The Rolling Stones were cooler!\";\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(result.arguments![\"A\"]).to.exist;\n    expect(result.arguments![\"A\"].relations!.length).to.equal(2);\n    expect(result.arguments![\"A\"].relations![0].relationType).to.equal(RelationType.SUPPORT);\n    expect(result.arguments![\"A\"].relations![0].to).to.equal(result.arguments![\"A\"]);\n    expect(result.arguments![\"A\"].relations![0].from).to.equal(result.arguments![\"B\"]);\n    expect(result.arguments![\"B\"]).to.exist;\n    expect(result.arguments![\"B\"].relations!.length).to.equal(1);\n    expect(result.statements![\"C\"]).to.exist;\n    expect(result.statements![\"C\"].relations!.length).to.equal(1);\n    expect(result.statements![\"C\"].relations![0].relationType).to.equal(RelationType.ATTACK);\n    expect(result.statements![\"C\"].relations![0].from).to.equal(result.arguments![\"A\"]);\n    expect(result.statements![\"C\"].relations![0].to).to.equal(result.statements![\"C\"]);\n  });\n  it(\"does not create duplicate relations for contradictions\", function() {\n    let source = `[A]: A\n      >< [B]: B\n    \n    [B]\n      >< [A]`;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(result.parserErrors!.length).to.equal(0);\n    expect(Object.keys(result.statements!).length).to.equal(2);\n    expect(Object.keys(result.relations!).length).to.equal(1);\n  });\n  it(\"can parse undercuts\", function() {\n    let source = `[A]: A\n      _> <B>\n    \n    <B>\n      <_ [D]`;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    //console.log(parserPlugin.parser.astToString(result.ast));\n    //console.log(result.parserErrors[0]);\n    expect(result.parserErrors!.length).to.equal(0);\n    expect(Object.keys(result.statements!).length).to.equal(2);\n    expect(Object.keys(result.relations!).length).to.equal(2);\n    expect(result.relations![0].relationType!).to.equal(RelationType.UNDERCUT);\n    expect(result.relations![0].from!.title).to.equal(\"A\");\n    expect(result.relations![0].to!.title).to.equal(\"B\");\n    expect(result.relations![1].relationType!).to.equal(RelationType.UNDERCUT);\n    expect(result.relations![1].from!.title).to.equal(\"D\");\n    expect(result.relations![1].to!.title).to.equal(\"B\");\n  });\n  it(\"can process a single argument\", function() {\n    let source = \"(1) [s1]: A\\n(2) [s2]: B\\n----\\n(3) [s3]: C\";\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(result.arguments![\"Untitled 1\"]).to.exist;\n    expect(result.statements![\"s1\"]).to.exist;\n    expect(result.statements![\"s2\"]).to.exist;\n    expect(result.statements![\"s3\"]).to.exist;\n  });\n\n  it(\"can create premise conclusion structures\", function() {\n    let source = `\n  <Reconstructed Argument>\n  \n  (1) [A]: text\n    -<Sketched Argument 1>\n    +[E]\n  (2) B\n  ----\n  (3) C\n  -- Modus Ponens {uses:1,2; depends on: 1} --\n  (4) [D]: text\n    ->[E]: text\n    +><Sketched Argument 1>: text\n    \n<Reconstructed Argument>\n  ->[F]: text\n  +><Sketched Argument 2>`;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(Object.keys(result.arguments!).length).to.equal(3);\n    expect(Object.keys(result.statements!).length).to.equal(6);\n\n    let argument = result.arguments![\"Reconstructed Argument\"];\n    //console.log(util.inspect(argument));\n    expect(argument).to.exist;\n    expect(argument.pcs!.length).to.equal(4);\n    expect(argument.relations!.length).to.equal(0); //all relations get transformed to relations of conclusion\n\n    expect(argument.pcs![0].role).to.equal(StatementRole.PREMISE);\n    expect(argument.pcs![1].role).to.equal(StatementRole.PREMISE);\n    expect(argument.pcs![2].role).to.equal(StatementRole.PRELIMINARY_CONCLUSION);\n    expect(argument.pcs![3].role).to.equal(StatementRole.MAIN_CONCLUSION);\n    expect(result.statements![argument.pcs[0].title!]).to.exist;\n    expect(result.statements![argument.pcs[1].title!]).to.exist;\n    expect(result.statements![argument.pcs[2].title!]).to.exist;\n    expect(result.statements![argument.pcs[3].title!]).to.exist;\n\n    const conclusionEc = result.statements![\"D\"];\n    expect(conclusionEc.members.length).to.equal(1);\n    expect(conclusionEc.members[0].role).to.equal(StatementRole.MAIN_CONCLUSION);\n    expect(conclusionEc.isUsedAsMainConclusion).to.be.true;\n\n    let premise = result.statements![argument.pcs[0].title!];\n    expect(!!premise.isUsedAsTopLevelStatement).to.be.false;\n    expect(!!premise.isUsedAsRelationStatement).to.be.false;\n    expect(!!premise.isUsedAsMainConclusion).to.be.false;\n    expect(!!premise.isUsedAsPreliminaryConclusion).to.be.false;\n    expect(!!premise.isUsedAsPremise).to.be.true;\n    expect(premise.relations!.length).to.equal(2);\n\n    expect(premise.relations![0].from!.title).to.equal(\"Sketched Argument 1\");\n    expect(premise.relations![0].to!.title).to.equal(\"A\");\n    expect(premise.relations![0].relationType).to.equal(RelationType.ATTACK);\n\n    expect(premise.relations![1].from!.title).to.equal(\"E\");\n    expect(premise.relations![1].to!.title).to.equal(\"A\");\n    expect(premise.relations![1].relationType).to.equal(RelationType.ENTAILS);\n\n    let preConclusion = result.statements![argument.pcs[2].title!];\n    expect(!!preConclusion.isUsedAsPremise).to.be.false;\n    expect(!!preConclusion.isUsedAsTopLevelStatement).to.be.false;\n    expect(!!preConclusion.isUsedAsRelationStatement).to.be.false;\n    expect(!!preConclusion.isUsedAsPreliminaryConclusion).to.be.true;\n    expect(!!preConclusion.isUsedAsMainConclusion).to.be.false;\n\n    expect(argument.pcs[3].title).to.equal(\"D\");\n    let conclusion = result.statements![argument.pcs[3].title!];\n    expect(!!conclusion.isUsedAsTopLevelStatement).to.be.false;\n    expect(!!conclusion.isUsedAsRelationStatement).to.be.false;\n    expect(!!conclusion.isUsedAsPreliminaryConclusion).to.be.false;\n    expect(!!conclusion.isUsedAsMainConclusion).to.be.true;\n    expect(!!conclusion.isUsedAsPremise).to.be.false;\n    expect(conclusion.relations!.length).to.equal(4); //with transformed relations from the argument\n\n    expect(conclusion.relations![0].from!.title).to.equal(\"D\");\n    expect(conclusion.relations![0].to!.title).to.equal(\"E\");\n    expect(conclusion.relations![0].relationType).to.equal(RelationType.CONTRARY);\n\n    expect(conclusion.relations![1].from!.title).to.equal(\"D\");\n    expect(conclusion.relations![1].to!.title).to.equal(\"Sketched Argument 1\");\n    expect(conclusion.relations![1].relationType).to.equal(RelationType.SUPPORT);\n\n    expect(conclusion.relations![2].relationType).to.equal(RelationType.CONTRARY);\n    expect(conclusion.relations![2].from!.title).to.equal(\"D\");\n    expect(conclusion.relations![2].to!.title).to.equal(\"F\");\n\n    expect(conclusion.relations![3].relationType).to.equal(RelationType.SUPPORT);\n    expect(conclusion.relations![3].from!.title).to.equal(\"D\");\n    expect(conclusion.relations![3].to!.title).to.equal(\"Sketched Argument 2\");\n\n    let inference = (<IConclusion>argument.pcs[3]).inference!;\n    expect(inference).to.exist;\n    expect(inference.inferenceRules!.length).to.equal(1);\n    expect(inference.inferenceRules![0]).to.equal(\"Modus Ponens\");\n\n    let statement = result.statements![\"E\"];\n    expect(statement).to.exist;\n    expect(!!statement.isUsedAsPreliminaryConclusion).to.be.false;\n    expect(!!statement.isUsedAsMainConclusion).to.be.false;\n    expect(!!statement.isUsedAsPremise).to.be.false;\n    expect(statement.relations!.length).to.equal(2);\n\n    let sketchedArgument = result.arguments![\"Sketched Argument 1\"];\n    expect(sketchedArgument).to.exist;\n    expect(sketchedArgument.relations!.length).to.equal(2);\n  });\n  it(\"can create the section hierarchy and set section property of statements and arguments\", function() {\n    let source = `# Section 1\n  \n  ## Section 2\n  \n  [A]: Text\n  \n  ### Section 3\n  \n  <B>: Text\n  \n  ## Section 4\n  \n  <B>\n  \n  (1) p\n  (2) q\n  ----\n  (3) r\n  `;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    //console.log(JSON.stringify(result.sections,null,2));\n    expect(result.sections).to.exist;\n    expect(result.sections!.length).to.equal(1);\n    expect(result.sections![0].title).to.equal(\"Section 1\");\n    expect(result.sections![0].children).to.exist;\n    expect(result.sections![0].children.length).to.equal(2);\n    expect(result.sections![0].children[0].title).to.equal(\"Section 2\");\n    expect(result.sections![0].children[0].children.length).to.equal(1);\n    expect(result.sections![0].children[0].children[0].title).to.equal(\"Section 3\");\n    expect(result.sections![0].children[0].children[0].children.length).to.equal(0);\n    expect(result.sections![0].children[1].title).to.equal(\"Section 4\");\n    expect(result.sections![0].children[1].children.length).to.equal(0);\n\n    expect(result.statements![\"A\"]).to.exist;\n    expect(result.statements![\"A\"].members[0].section).to.exist;\n    expect(result.statements![\"A\"].members[0].section!.title).to.equal(\"Section 2\");\n\n    expect(result.arguments![\"B\"]).to.exist;\n    expect(result.arguments![\"B\"].section).to.exist;\n    expect(result.arguments![\"B\"].section!.title).to.equal(\"Section 4\");\n    expect(result.arguments![\"B\"].descriptions[0].section).to.exist;\n    expect(result.arguments![\"B\"].descriptions[0].section!.title).to.equal(\"Section 3\");\n  });\n  it(\"can create tags lists\", function() {\n    let source = `[Statement 1]: #tag-1 text\n  \n  [Statement 2]: text #tag-1 #(tag 2)\n  \n  <Argument 1>: text #tag-1 #tag3 #tag4\n  \n  [Statement 1]: #tag-5 #tag-6 \n  `;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(result.tags).to.exist;\n    expect(result.tags!.length).to.equal(6);\n    expect(result.statements![\"Statement 1\"].tags!.length).to.equal(3);\n    expect(\n      result.statements![\"Statement 2\"].members[result.statements![\"Statement 2\"].members.length - 1].text\n    ).to.equal(\"text #tag-1 #(tag 2)\");\n    expect(result.statements![\"Statement 2\"].tags!.length).to.equal(2);\n    expect(result.arguments![\"Argument 1\"].tags!.length).to.equal(3);\n  });\n  it(\"can identify duplicates in outgoing relations of reconstructed argument and main conclusion\", function() {\n    let source = `<A1>: A1\n  - <A2>: A2\n    \n<A2>\n\n (1) P\n (2) P\n ----\n (3) C\n   -> <A1> \n  `;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(result.relations).to.exist;\n    expect(result.relations!.length).to.equal(1);\n  });\n  it(\"can create section titles from headings with mentions, tags and ranges\", function() {\n    let source = `# @[A] @<B> #tag **bold** _italic_\n  \n  [A]\n  \n  <B>\n  `;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(result.sections).to.exist;\n    expect(result.sections!.length).to.equal(1);\n    expect(result.sections![0].title).to.equal(\"@[A] @<B> #tag bold italic\");\n    expect(result.sections![0].tags!.length).to.equal(1);\n    expect(result.sections![0].ranges!.length).to.equal(5);\n    expect(result.arguments![\"B\"]).to.exist;\n    expect(result.statements![\"A\"]).to.exist;\n  });\n  it(\"can parse escaped chars\", function() {\n    let source = fs.readFileSync(\"./test/model-escaped-chars.argdown\", \"utf8\");\n\n    //let source = `[A]: \\\\[text\\\\] text`;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(result.statements![\"A\"]).to.exist;\n    expect(getCanonicalMemberText(result.statements![\"A\"])).to.equal(\"[text] text\");\n  });\n  it(\"can return error with token location for incomplete reconstruction\", function() {\n    let source = `sdsadad\n\n(1) adasdasd`;\n    let result = app.run({ process: [\"parse-input\"], input: source });\n    //console.log(result.parserErrors[0]);\n    expect((<any>result.parserErrors![0]).previousToken.startLine).to.equal(3);\n    expect((<any>result.parserErrors![0]).previousToken.startColumn).to.equal(5);\n  });\n  it(\"throws exception if AST is missing\", function() {\n    const source = \"[Test]: Hello _World_!\";\n    const result = app.run({ process: [\"build-model\"], input: source, logLevel: \"error\", logExceptions: false });\n    expect(result.exceptions!.length).to.equal(1);\n    expect(result.exceptions![0].message).to.contain(\"No AST field\");\n  });\n  it(\"throws exception if statements are missing\", function() {\n    const source = \"[Test]: Hello _World_!\";\n    const result = app.run(\n      { process: [\"build-model\"], input: source, logLevel: \"error\", logExceptions: false },\n      { ast: <IAstNode>{} }\n    );\n    expect(result.exceptions!.length).to.equal(1);\n    expect(result.exceptions![0].message).to.contain(\"No statements field\");\n  });\n  it(\"throws exception if arguments are missing\", function() {\n    const source = \"[Test]: Hello _World_!\";\n    const result = app.run(\n      { process: [\"build-model\"], input: source, logLevel: \"error\", logExceptions: false },\n      { ast: <IAstNode>{}, statements: {} }\n    );\n    expect(result.exceptions!.length).to.equal(1);\n    expect(result.exceptions![0].message).to.contain(\"No arguments field\");\n  });\n  it(\"throws exception if relations are missing\", function() {\n    const source = \"[Test]: Hello _World_!\";\n    const result = app.run(\n      { process: [\"build-model\"], input: source, logLevel: \"error\", logExceptions: false },\n      { ast: <IAstNode>{}, statements: {}, arguments: {} }\n    );\n    expect(result.exceptions!.length).to.equal(1);\n    expect(result.exceptions![0].message).to.contain(\"No relations field\");\n  });\n  it(\"throws exception if relation source is missing\", function() {\n    const source = \"[Test]: Hello _World_!\";\n    const result = app.run(\n      { process: [\"build-model\"], input: source, logLevel: \"error\", logExceptions: false },\n      {\n        ast: <IAstNode>{},\n        statements: {},\n        arguments: {},\n        relations: [<IRelation>{ relationType: RelationType.SUPPORT }]\n      }\n    );\n    expect(result.exceptions!.length).to.equal(1);\n    expect(result.exceptions![0].message).to.contain(\"without source\");\n  });\n  it(\"throws exception if relation target is missing\", function() {\n    const source = \"[Test]: Hello _World_!\";\n    const rel = <IRelation>{ relationType: RelationType.SUPPORT };\n    rel.from = { type: ArgdownTypes.EQUIVALENCE_CLASS, relations: [], members: [], title: \"test\" };\n    const result = app.run(\n      { process: [\"build-model\"], input: source, logLevel: \"error\", logExceptions: false },\n      { ast: <IAstNode>{}, statements: {}, arguments: {}, relations: [rel] }\n    );\n    expect(result.exceptions!.length).to.equal(1);\n    expect(result.exceptions![0].message).to.contain(\"without target\");\n  });\n  it(\"adds two members for main conclusion and relation statement\", function () {\n    const source = `\n        [S1]: test\n            - [S2]: test\n\n        (1) A\n        (2) B\n        ----\n        (3) [S2]\n    `;\n    const result = app.run(\n      { process: [\"parse-input\", \"build-model\"], input: source, logLevel: \"error\", logExceptions: false }\n    );\n    expect(Object.keys(result.statements!).length).to.equal(4);\n    expect(result.statements![\"S2\"].members.length).to.equal(2);\n  });\n});\n"],"file":"ModelPlugin.spec.js"}