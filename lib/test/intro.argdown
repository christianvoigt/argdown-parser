# Welcome to Argdown!

Argdown is a simple syntax for defining argumentative structures, inspired by Markdown.

  * With Argdown, writing a pro & contra list is as simple as writing a twitter message.
  * But Argdown also supports detailed __logical reconstructions__ of the arguments' premise-conclusion structures 
    and arbitrarily complex dialectical relations between them.
  * By exporting Argdown as a graph it can even be used for creating __argument maps__ of whole debates. 

## Argdown Basics

This is a normal statement with __bold__ and __italic__ text 
and a [link](https://github.com/christianvoigt/argdown-parser).

[Statement 1]: Another statement (after a blank line), this time with a title defined in square brackets. 
We can use the title to refer to this statement later or mention it in other statements.

[Statement 2]: Let's do that now: The previous statement was @[Statement 1].
  + <Argument title>: Statements can be supported by __arguments__. 
  Arguments are defined by using angle brackets.
  - <Another argument>: This arguments attacks @[Statement 2].
    - <Yet another argument>: Arguments can also be supported or attacked.
      -> [Statement 1]
      <!--
      In the above line, we have defined a relation the other way around: @<Yet another argument> attacks @[Statement 1]. 
      By the way, this is a multiline comment.
      -->

A blank line signals that the above "tree" of statements and arguments is finished 
and that we want to start with a new block (in this case a new statement).

## Argument reconstructions

Arguments can be logically reconstructed, by defining their premise-conclusion structure.

<Argument 1>

(1) First premise
(this is is a normal statement and you can do everything with it, we have done with the statements above).
(2) [Statement 2]: We have already defined a statement with this statement.
But Argdown allows you to add multiple statements to the same "equivalence class" by giving them the same title. 
The statements will then be treated as logically equivalent.
--
Some inference rule (Some additional info: 1,2)
--
(3) And now the conclusion
  -> Outgoing relations of the conclusion, 
  are also interpreted as outgoing relations of the whole argument.
  +> <Argument 2>
  <!--
  The second relation is only "sketched", 
  because it does not declare which premise of @<Argument 2> is supported. 
  (At this point this is not possible, 
  as we have not yet reconstructed @<Argument 2>)
  -->
  -> [Statement 1]
