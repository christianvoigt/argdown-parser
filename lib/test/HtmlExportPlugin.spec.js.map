{"version":3,"sources":["../../test/HtmlExportPlugin.spec.ts"],"names":["app","ArgdownApplication","parserPlugin","ParserPlugin","modelPlugin","ModelPlugin","tagPlugin","TagPlugin","addPlugin","describe","htmlExport","HtmlExportPlugin","it","request","process","input","result","run","html","to","equal","source","fs","readFileSync","lexerErrors","be","empty","parserErrors","tagsDictionary","exist","Object","keys","length","cssClass","index","statements","sortedTags","headless"],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { ArgdownApplication, ParserPlugin, ModelPlugin, TagPlugin, HtmlExportPlugin } from \"../src/index\";\nimport fs from \"fs\";\nimport { IHtmlResponse, IHtmlRequest } from \"../src/plugins/HtmlExportPlugin\";\n\nconst app = new ArgdownApplication();\nconst parserPlugin = new ParserPlugin();\nconst modelPlugin = new ModelPlugin();\nconst tagPlugin = new TagPlugin();\napp.addPlugin(parserPlugin, \"parse-input\");\napp.addPlugin(modelPlugin, \"build-model\");\napp.addPlugin(tagPlugin, \"build-model\");\n\ndescribe(\"HtmlExport\", function() {\n  let htmlExport = new HtmlExportPlugin();\n  app.addPlugin(htmlExport, \"export-html\");\n  it(\"can export Argdown\", function() {\n    let request = {\n      process: [\"parse-input\", \"build-model\", \"export-html\"],\n      input: \"# Title\\n\\n[Statement]: Hello World!\\n +<Argument>\\n\\n<Argument>: Description 1 < 2\"\n    };\n    let result = app.run(request);\n    //console.log(result.html);\n    expect((<IHtmlResponse>result).html).to.equal(\n      `<!doctype html><html lang=\"en\"><head><meta charset=\"utf8\"><title>Title</title><link rel=\"stylesheet\" href=./argdown.css\"></head><body><div class=\"argdown\"><h1 data-line=\"1\" id=\"heading-title\" class=\"has-line heading\">Title</h1><div data-line=\"has-line 3\" class=\"statement\"><span id=statement-statement\" class=\"definition statement-definition definiendum\">[<span class=\"title statement-title\">Statement</span>]: </span>Hello World!<div class=\"relations\"><div data-line=\"4\" class=\"has-line outgoing support relation\"><div class=\"outgoing support relation-symbol\"><span>+</span></div><a href=\"#argument-argument\" data-line=\"4\" class=\"has-line reference argument-reference\">&lt;<span class=\"title argument-title\">Argument</span>&gt; </a></div></div></div><div id=\"argument-argument\" data-line=\"6\" class=\"has-line definition argument-definition\"><span class=\"definiendum argument-definiendum\">&lt;<span class=\"title argument-title\">Argument</span>&gt;: </span><span class=\"argument-definiens definiens description\">Description 1 &lt; 2</span></div></div></body></html>`\n    );\n  });\n  it(\"can export the argdown intro\", function() {\n    let source = fs.readFileSync(\"./test/intro.argdown\", \"utf8\");\n    let result = app.run({ process: [\"parse-input\", \"build-model\", \"export-html\"], input: source });\n    expect(result.lexerErrors).to.be.empty;\n    expect(result.parserErrors).to.be.empty;\n  });\n  it(\"can create class names for tags\", function() {\n    let source = `[Statement 1]: #tag1\n      + [Statement 2]: #tag2\n        - [Statement 3]: #tag3`;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(result.tagsDictionary).to.exist;\n    expect(Object.keys(result.tagsDictionary!).length).to.be.equal(3);\n    expect(result.tagsDictionary![\"tag1\"].cssClass).to.be.equal(\"tag-tag1 tag0\");\n    expect(result.tagsDictionary![\"tag1\"].index).to.be.equal(0);\n    expect(result.tagsDictionary![\"tag2\"].cssClass).to.be.equal(\"tag-tag2 tag1\");\n    expect(result.tagsDictionary![\"tag2\"].index).to.be.equal(1);\n    expect(result.tagsDictionary![\"tag3\"].cssClass).to.be.equal(\"tag-tag3 tag2\");\n    expect(result.tagsDictionary![\"tag3\"].index).to.be.equal(2);\n    expect(result.statements).to.exist;\n    expect(result.statements![\"Statement 1\"].sortedTags).to.exist;\n    expect(result.statements![\"Statement 1\"].sortedTags!.length).to.equal(1);\n  });\n  it(\"can export titles with ranges\", function() {\n    let source = `# title _italic_ **bold**`;\n    let result = app.run(<IHtmlRequest>{\n      process: [\"parse-input\", \"build-model\", \"export-html\"],\n      input: source,\n      html: { headless: true }\n    });\n    expect((<IHtmlResponse>result).html).to.equal(\n      `<div class=\"argdown\"><h1 data-line=\"1\" id=\"heading-title-italic-bold\" class=\"has-line heading\">title <i>italic</i> <b>bold</b></h1></div>`\n    );\n  });\n});\n"],"file":"HtmlExportPlugin.spec.js"}