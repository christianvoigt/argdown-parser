{"version":3,"sources":["../../test/tags-configuration.spec.js"],"names":["app","parserPlugin","addPlugin","modelPlugin","tagPlugin","describe","it","source","result","run","input","tagsDictionary","to","exist","Object","keys","length","be","equal","cssClass","index","statements","sortedTags"],"mappings":";;AAAA;;AACA;;AAEA,IAAIA,MAAM,+BAAV;AACA,IAAIC,eAAe,yBAAnB;AACAD,IAAIE,SAAJ,CAAcD,YAAd,EAA4B,aAA5B;AACA,IAAIE,cAAc,wBAAlB;AACA,IAAIC,YAAY,sBAAhB;AACAJ,IAAIE,SAAJ,CAAcC,WAAd,EAA0B,aAA1B;AACAH,IAAIE,SAAJ,CAAcE,SAAd,EAAyB,aAAzB;;AAEAC,SAAS,WAAT,EAAsB,YAAW;AAC/BC,KAAG,+CAAH,EAAoD,YAAU;AAC5D,QAAIC,mGAAJ;AAGA,QAAIC,SAASR,IAAIS,GAAJ,CAAQ,CAAC,aAAD,EAAe,aAAf,CAAR,EAAuC,EAACC,OAAMH,MAAP,EAAvC,CAAb;AACA,sBAAOC,OAAOG,cAAd,EAA8BC,EAA9B,CAAiCC,KAAjC;AACA,sBAAOC,OAAOC,IAAP,CAAYP,OAAOG,cAAnB,EAAmCK,MAA1C,EAAkDJ,EAAlD,CAAqDK,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AACA,sBAAOV,OAAOG,cAAP,CAAsB,MAAtB,EAA8BQ,QAArC,EAA+CP,EAA/C,CAAkDK,EAAlD,CAAqDC,KAArD,CAA2D,eAA3D;AACA,sBAAOV,OAAOG,cAAP,CAAsB,MAAtB,EAA8BS,KAArC,EAA4CR,EAA5C,CAA+CK,EAA/C,CAAkDC,KAAlD,CAAwD,CAAxD;AACA,sBAAOV,OAAOG,cAAP,CAAsB,MAAtB,EAA8BQ,QAArC,EAA+CP,EAA/C,CAAkDK,EAAlD,CAAqDC,KAArD,CAA2D,eAA3D;AACA,sBAAOV,OAAOG,cAAP,CAAsB,MAAtB,EAA8BS,KAArC,EAA4CR,EAA5C,CAA+CK,EAA/C,CAAkDC,KAAlD,CAAwD,CAAxD;AACA,sBAAOV,OAAOG,cAAP,CAAsB,MAAtB,EAA8BQ,QAArC,EAA+CP,EAA/C,CAAkDK,EAAlD,CAAqDC,KAArD,CAA2D,eAA3D;AACA,sBAAOV,OAAOG,cAAP,CAAsB,MAAtB,EAA8BS,KAArC,EAA4CR,EAA5C,CAA+CK,EAA/C,CAAkDC,KAAlD,CAAwD,CAAxD;AACA,sBAAOV,OAAOa,UAAP,CAAkB,aAAlB,EAAiCC,UAAxC,EAAoDV,EAApD,CAAuDC,KAAvD;AACA,sBAAOL,OAAOa,UAAP,CAAkB,aAAlB,EAAiCC,UAAjC,CAA4CN,MAAnD,EAA2DJ,EAA3D,CAA8DM,KAA9D,CAAoE,CAApE;AACA,sBAAOV,OAAOa,UAAP,CAAkB,aAAlB,EAAiCC,UAAjC,CAA4CN,MAAnD,EAA2DJ,EAA3D,CAA8DM,KAA9D,CAAoE,CAApE;AACD,GAhBD;AAiBD,CAlBD","file":"tags-configuration.spec.js","sourcesContent":["import { expect } from 'chai';\nimport {ArgdownApplication, ParserPlugin, ModelPlugin, TagPlugin} from '../src/index.js';\n\nlet app = new ArgdownApplication();\nlet parserPlugin = new ParserPlugin();\napp.addPlugin(parserPlugin, 'parse-input');\nlet modelPlugin = new ModelPlugin();\nlet tagPlugin = new TagPlugin();\napp.addPlugin(modelPlugin,'build-model');\napp.addPlugin(tagPlugin, 'build-model');\n\ndescribe(\"TagPlugin\", function() {\n  it(\"can sort tags and create class names for tags\", function(){\n    let source = `[Statement 1]: #tag1\n      + [Statement 2]: #tag2 #tag3\n        - [Statement 3]: #tag3`;\n    let result = app.run(['parse-input','build-model'], {input:source});\n    expect(result.tagsDictionary).to.exist;\n    expect(Object.keys(result.tagsDictionary).length).to.be.equal(3);\n    expect(result.tagsDictionary[\"tag1\"].cssClass).to.be.equal(\"tag-tag1 tag0\");\n    expect(result.tagsDictionary[\"tag1\"].index).to.be.equal(0);\n    expect(result.tagsDictionary[\"tag2\"].cssClass).to.be.equal(\"tag-tag2 tag1\");\n    expect(result.tagsDictionary[\"tag2\"].index).to.be.equal(1);\n    expect(result.tagsDictionary[\"tag3\"].cssClass).to.be.equal(\"tag-tag3 tag2\");\n    expect(result.tagsDictionary[\"tag3\"].index).to.be.equal(2);\n    expect(result.statements[\"Statement 1\"].sortedTags).to.exist;\n    expect(result.statements[\"Statement 1\"].sortedTags.length).to.equal(1);\n    expect(result.statements[\"Statement 2\"].sortedTags.length).to.equal(2);\n  });\n});\n"]}