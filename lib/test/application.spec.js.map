{"version":3,"sources":["../../test/application.spec.js"],"names":["app","parserPlugin","addPlugin","describe","it","source","statements","plugin","name","argdownListeners","statementEntry","run","data","testRunCompleted","getPlugin","to","equal","result","input","be","true","removePlugin","undefined"],"mappings":";;AAAA;;AACA;;AAEA,IAAMA,MAAM,+BAAZ;AACA,IAAMC,eAAe,yBAArB;AACAD,IAAIE,SAAJ,CAAcD,YAAd,EAA4B,aAA5B;;AAEAE,SAAS,aAAT,EAAwB,YAAW;AACjCC,KAAG,uCAAH,EAA4C,YAAU;AACpD,QAAIC,SAAS,cAAb;AACA,QAAIC,aAAa,CAAjB;AACA,QAAIC,SAAS;AACXC,YAAM,YADK;AAEXC,wBAAmB;AACjBC,wBAAgB;AAAA,iBAAIJ,YAAJ;AAAA;AADC,OAFR;AAKXK,SALW,eAKPC,IALO,EAKF;AACPA,aAAKC,gBAAL,GAAwB,IAAxB;AACA,eAAOD,IAAP;AACD;AARU,KAAb;AAUAZ,QAAIE,SAAJ,CAAcK,MAAd,EAAsB,MAAtB;AACA,sBAAOP,IAAIc,SAAJ,CAAcP,OAAOC,IAArB,EAA2B,MAA3B,CAAP,EAA2CO,EAA3C,CAA8CC,KAA9C,CAAoDT,MAApD;AACA,QAAIU,SAASjB,IAAIW,GAAJ,CAAQ,CAAC,aAAD,EAAe,MAAf,CAAR,EAA+B,EAACO,OAAMb,MAAP,EAA/B,CAAb;AACA,sBAAOC,UAAP,EAAmBS,EAAnB,CAAsBC,KAAtB,CAA4B,CAA5B;AACA,sBAAOC,OAAOJ,gBAAd,EAAgCE,EAAhC,CAAmCI,EAAnC,CAAsCC,IAAtC;AACAd,iBAAa,CAAb;AACAN,QAAIqB,YAAJ,CAAiBd,MAAjB,EAAyB,MAAzB;AACAU,aAASjB,IAAIW,GAAJ,CAAQ,CAAC,aAAD,EAAe,MAAf,CAAR,EAA+B,EAACO,OAAMb,MAAP,EAA/B,CAAT;AACA,sBAAOC,UAAP,EAAmBS,EAAnB,CAAsBC,KAAtB,CAA4B,CAA5B;AACA,sBAAOC,OAAOJ,gBAAd,EAAgCE,EAAhC,CAAmCI,EAAnC,CAAsCG,SAAtC;AACD,GAvBD;AAwBD,CAzBD","file":"application.spec.js","sourcesContent":["import { expect } from 'chai';\nimport {ArgdownApplication, ParserPlugin} from '../src/index.js';\n\nconst app = new ArgdownApplication();\nconst parserPlugin = new ParserPlugin();\napp.addPlugin(parserPlugin, 'parse-input');\n\ndescribe(\"Application\", function() {\n  it(\"can add, get, call and remove plugins\", function(){\n    let source = \"Hello World!\";\n    let statements = 0;\n    let plugin = {\n      name: \"TestPlugin\",\n      argdownListeners : {\n        statementEntry: ()=>statements++\n      },\n      run(data){\n        data.testRunCompleted = true;\n        return data;\n      }\n    };\n    app.addPlugin(plugin, 'test');\n    expect(app.getPlugin(plugin.name, 'test')).to.equal(plugin);\n    let result = app.run(['parse-input','test'],{input:source});\n    expect(statements).to.equal(1);\n    expect(result.testRunCompleted).to.be.true;\n    statements = 0;\n    app.removePlugin(plugin, 'test');\n    result = app.run(['parse-input','test'],{input:source});\n    expect(statements).to.equal(0);\n    expect(result.testRunCompleted).to.be.undefined;\n  });\n});\n"]}