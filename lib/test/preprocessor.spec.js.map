{"version":3,"sources":["../../test/preprocessor.spec.js"],"names":["app","describe","plugin","addPlugin","it","source","parse","result","run","statements","to","exist","members","text","equal","ranges","length","type","start","stop","arguments","descriptions","description","Object","keys","relations","from","status","parserErrors","argument","pcs","title","role","premise","isUsedAsPremise","be","true","isUsedAsConclusion","false","isUsedAsRootOfStatementTree","isUsedAsChildOfStatementTree","conclusion","inference","inferenceRules","metaData","statement","sketchedArgument"],"mappings":"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","file":"preprocessor.spec.js","sourcesContent":["import { expect } from 'chai';\nimport {ArgdownApplication, ArgdownPreprocessor} from '../src/index.js';\n\nlet app = new ArgdownApplication();\n\ndescribe(\"ArgdownPreprocessor\", function() {\n  let plugin = new ArgdownPreprocessor();\n  app.addPlugin(plugin,'preprocessor');\n\n  it(\"can create statements dictionary and save statement by title\", function(){\n    let source = \"[Test]: Hello _World_!\";\n    app.parse(source);\n    let result = app.run('preprocessor');\n    expect(result.statements['Test']).to.exist;\n    expect(result.statements['Test'].members[0].text).to.equal('Hello World!');\n    expect(result.statements['Test'].members[0].ranges.length).to.equal(1);\n    expect(result.statements['Test'].members[0].ranges[0].type).to.equal('italic');\n    expect(result.statements['Test'].members[0].ranges[0].start).to.equal(6);\n    expect(result.statements['Test'].members[0].ranges[0].stop).to.equal(10);\n  });\n  it(\"can create arguments dictionary and save argument by title\", function(){\n    let source = \"<Test>: Hello _World_!\";\n    app.parse(source);\n    let result = app.run('preprocessor');\n    expect(result.arguments['Test']).to.exist;\n    expect(result.arguments['Test'].descriptions.length).to.equal(1);\n    let description = result.arguments['Test'].descriptions[0];\n    expect(description.text).to.equal('Hello World!');\n    expect(description.ranges.length).to.equal(1);\n    expect(description.ranges[0].type).to.equal('italic');\n    expect(description.ranges[0].start).to.equal(6);\n    expect(description.ranges[0].stop).to.equal(10);\n  });\n  it(\"can create statement relations and ignore duplicates\", function(){\n    let source = \"[A]: The Beatles are the best!\\n  +[B]: The Beatles made 'Rubber Soul'!\\n  -><C>: The Rolling Stones were cooler!\\n\\n [A]\\n  +[B]\\n  -><C>\";\n    app.parse(source);\n    let result = app.run('preprocessor');\n    expect(Object.keys(result.statements).length).to.equal(2);\n    expect(Object.keys(result.arguments).length).to.equal(1);\n    expect(result.relations.length).to.equal(2);\n\n    expect(result.statements['A']).to.exist;\n    expect(result.statements['A'].relations.length).to.equal(2);\n    expect(result.statements['A'].relations[0].type).to.equal('support');\n    expect(result.statements['A'].relations[0].to).to.equal(plugin.statements['A']);\n    expect(result.statements['A'].relations[0].from).to.equal(plugin.statements['B']);\n    expect(result.statements['A'].relations[0].status).to.equal('reconstructed');\n    expect(result.statements['B']).to.exist;\n    expect(result.statements['B'].relations.length).to.equal(1);\n    expect(result.arguments['C']).to.exist;\n    expect(result.arguments['C'].relations.length).to.equal(1);\n    expect(result.arguments['C'].relations[0].type).to.equal('attack');\n    expect(result.arguments['C'].relations[0].from).to.equal(plugin.statements['A']);\n    expect(result.arguments['C'].relations[0].to).to.equal(plugin.arguments['C']);\n    expect(result.arguments['C'].relations[0].status).to.equal('sketched');\n  });\n  it(\"can ignore duplicates of argument relations\", function(){\n    let source = `\n    [A]: text\n      + <Argument 1>\n    \n    <Argument 1>\n    \n    (1) text\n    (2) text\n    ----\n    (3) [B]: text\n      +> [A]\n    `;\n    app.parse(source);\n    let result = app.run('preprocessor');\n    expect(Object.keys(result.statements).length).to.equal(4);\n    expect(Object.keys(result.arguments).length).to.equal(1);\n    expect(result.relations.length).to.equal(1);\n  });  \n  it(\"can create sketched argument relations\", function(){\n    let source = \"<A>: The Beatles are the best!\\n  +<B>: The Beatles made 'Rubber Soul'!\\n  ->[C]: The Rolling Stones were cooler!\";\n    app.parse(source);\n    let result = app.run('preprocessor');\n    expect(result.arguments['A']).to.exist;\n    expect(result.arguments['A'].relations.length).to.equal(2);\n    expect(result.arguments['A'].relations[0].type).to.equal('support');\n    expect(result.arguments['A'].relations[0].to).to.equal(plugin.arguments['A']);\n    expect(result.arguments['A'].relations[0].from).to.equal(plugin.arguments['B']);\n    expect(result.arguments['A'].relations[0].status).to.equal('sketched');\n    expect(result.arguments['B']).to.exist;\n    expect(result.arguments['B'].relations.length).to.equal(1);\n    expect(result.statements['C']).to.exist;\n    expect(result.statements['C'].relations.length).to.equal(1);\n    expect(result.statements['C'].relations[0].type).to.equal('attack');\n    expect(result.statements['C'].relations[0].from).to.equal(plugin.arguments['A']);\n    expect(result.statements['C'].relations[0].to).to.equal(plugin.statements['C']);\n    expect(result.statements['C'].relations[0].status).to.equal('sketched');\n  });\n  it(\"does not add empty statements as members to equivalence class\", function(){\n    let source = `[A]: B\n    \n    [A]`;\n    app.parse(source);\n    let result = app.run('preprocessor');\n    expect(result.statements['A']).to.exist;\n    expect(result.statements['A'].members.length).to.equal(1);\n  });  \n  it(\"does not create duplicate relations for contradictions\", function(){\n    let source = `[A]: A\n      >< [B]: B\n    \n    [B]\n      >< [A]`;\n    app.parse(source);\n    let result = app.run('preprocessor');\n    expect(result.parserErrors.length).to.equal(0);\n    expect(Object.keys(result.statements).length).to.equal(2);\n    expect(Object.keys(result.relations).length).to.equal(1);\n  });      \n  it(\"can process a single argument\", function(){\n    let source = \"(1) [s1]: A\\n(2) [s2]: B\\n----\\n(3) [s3]: C\";\n    app.parse(source);\n    let result = app.run('preprocessor');\n    expect(result.arguments['Untitled 1']).to.exist;\n    expect(result.statements['s1']).to.exist;\n    expect(result.statements['s2']).to.exist;\n    expect(result.statements['s3']).to.exist;\n  });  \n\n  it(\"can create argument reconstructions\", function(){\n  let source = `<Reconstructed Argument>\n  \n  (1) [A]: text\n    -<Sketched Argument 1>\n    +[E]\n  (2) B\n  ----\n  (3) C\n  -- Modus Ponens (uses:1,2; depends on: 1) --\n  (4) [D]: text\n    ->[E]: text\n    +><Sketched Argument 1>: text\n    \n<Reconstructed Argument>\n  ->[F]: text\n  +><Sketched Argument 2>`;\n  app.parse(source);\n  let result = app.run('preprocessor');\n  expect(Object.keys(result.arguments).length).to.equal(3);\n  expect(Object.keys(result.statements).length).to.equal(6);\n\n  let argument = result.arguments['Reconstructed Argument'];\n  //console.log(util.inspect(argument));\n  expect(argument).to.exist;\n  expect(argument.pcs.length).to.equal(4);\n  expect(argument.relations.length).to.equal(1); //second relation gets transformed to relation of conclusion\n\n  expect(argument.relations[0].type).to.equal(\"support\");\n  expect(argument.relations[0].from.title).to.equal(\"Reconstructed Argument\");\n  expect(argument.relations[0].to.title).to.equal(\"Sketched Argument 2\");\n  expect(argument.relations[0].status).to.equal(\"sketched\");\n\n\n  expect(argument.pcs[0].role).to.equal('premise');\n  expect(argument.pcs[1].role).to.equal('premise');\n  expect(argument.pcs[2].role).to.equal('conclusion');\n  expect(argument.pcs[3].role).to.equal('conclusion');\n  expect(result.statements[argument.pcs[0].title]).to.exist;\n  expect(result.statements[argument.pcs[1].title]).to.exist;\n  expect(result.statements[argument.pcs[2].title]).to.exist;\n  expect(result.statements[argument.pcs[3].title]).to.exist;\n\n  let premise = result.statements[argument.pcs[0].title];\n  expect(premise.isUsedAsPremise).to.be.true;\n  expect(premise.isUsedAsConclusion).to.be.false;\n  expect(premise.isUsedAsRootOfStatementTree).to.be.false;\n  expect(premise.isUsedAsChildOfStatementTree).to.be.false;\n  expect(premise.relations.length).to.equal(2);\n\n  expect(premise.relations[0].from.title).to.equal('Sketched Argument 1');\n  expect(premise.relations[0].to.title).to.equal('A');\n  expect(premise.relations[0].type).to.equal('attack');\n  expect(premise.relations[0].status).to.equal('sketched');\n\n  expect(premise.relations[1].from.title).to.equal('E');\n  expect(premise.relations[1].to.title).to.equal('A');\n  expect(premise.relations[1].type).to.equal('support');\n  expect(premise.relations[1].status).to.equal('reconstructed');\n\n  expect(argument.pcs[3].title).to.equal('D');\n  let conclusion = result.statements[argument.pcs[3].title];\n  expect(conclusion.isUsedAsConclusion).to.be.true;\n  expect(conclusion.isUsedAsPremise).to.be.false;\n  expect(conclusion.isUsedAsRootOfStatementTree).to.be.false;\n  expect(conclusion.isUsedAsChildOfStatementTree).to.be.false;\n  expect(conclusion.relations.length).to.equal(3); //with transformed relation from the argument\n\n  expect(conclusion.relations[0].status).to.equal('reconstructed');\n  expect(conclusion.relations[0].from.title).to.equal('D');\n  expect(conclusion.relations[0].to.title).to.equal('E');\n  expect(conclusion.relations[0].type).to.equal('attack');\n\n  expect(conclusion.relations[1].status).to.equal('sketched');\n  expect(conclusion.relations[1].from.title).to.equal('D');\n  expect(conclusion.relations[1].to.title).to.equal('Sketched Argument 1');\n  expect(conclusion.relations[1].type).to.equal('support');\n\n\n  expect(conclusion.relations[2].type).to.equal(\"attack\");\n  expect(conclusion.relations[2].from.title).to.equal(\"D\");\n  expect(conclusion.relations[2].to.title).to.equal(\"F\");\n  expect(conclusion.relations[2].status).to.equal(\"reconstructed\");\n\n\n  let inference = argument.pcs[3].inference;\n  expect(inference).to.exist;\n  expect(inference.inferenceRules.length).to.equal(1);\n  expect(inference.inferenceRules[0]).to.equal('Modus Ponens');\n  expect(inference.metaData['uses'].length).to.equal(2);\n  expect(inference.metaData['uses'][0]).to.equal('1');\n  expect(inference.metaData['uses'][1]).to.equal('2');\n  expect(inference.metaData['depends on']).to.equal('1');\n\n  let statement = result.statements['E'];\n  expect(statement).to.exist;\n  expect(statement.isUsedAsRootOfStatementTree).to.be.false;\n  expect(statement.isUsedAsChildOfStatementTree).to.be.false;\n  expect(statement.isUsedAsConclusion).to.be.false;\n  expect(statement.isUsedAsPremise).to.be.false;\n  expect(statement.relations.length).to.equal(2);\n\n  let sketchedArgument = result.arguments['Sketched Argument 1'];\n  expect(sketchedArgument).to.exist;\n  expect(sketchedArgument.relations.length).to.equal(2);\n\n});\n});\n"]}