{"version":3,"sources":["../../test/lexer.spec.js"],"names":["describe","it","source","readFileSync","result","tokenize","tokens","to","be","an","instanceof","OutgoingSupport","OutgoingAttack","IncomingSupport","IncomingAttack","Freestyle","Emptyline","Indent","Dedent","StatementReference","StatementDefinition","ArgumentReference","ArgumentDefinition"],"mappings":"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","file":"lexer.spec.js","sourcesContent":["//import { before, after, describe, it } from 'mocha';\nimport { expect } from 'chai';\nimport fs from 'fs';\nimport argdownLexer from '../src/ArgdownLexer.js';\n\n\ndescribe(\"Lexer\", function() {\n  it(\"recognizes incoming and outgoing relations\", function(){\n    let source = fs.readFileSync(\"./test/lexer-relations.argdown\", 'utf8');\n    const result = argdownLexer.tokenize(source);\n    const tokens = result.tokens;\n    expect(tokens[0]).to.be.an.instanceof(argdownLexer.OutgoingSupport);\n    expect(tokens[1]).to.be.an.instanceof(argdownLexer.OutgoingAttack);\n    expect(tokens[2]).to.be.an.instanceof(argdownLexer.OutgoingSupport);\n    expect(tokens[3]).to.be.an.instanceof(argdownLexer.OutgoingAttack);\n    expect(tokens[4]).to.be.an.instanceof(argdownLexer.IncomingSupport);\n    expect(tokens[5]).to.be.an.instanceof(argdownLexer.IncomingAttack);\n  });\n  it(\"can distinguish between Emptyline and Newline\", function(){\n    let source = fs.readFileSync(\"./test/lexer-emptyline.argdown\", 'utf8');\n    const result = argdownLexer.tokenize(source);\n    const tokens = result.tokens;\n    expect(tokens[0]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[1]).to.be.an.instanceof(argdownLexer.Emptyline);\n    expect(tokens[2]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[3]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[4]).to.be.an.instanceof(argdownLexer.Emptyline);\n    expect(tokens[5]).to.be.an.instanceof(argdownLexer.Freestyle);\n  });\n  it(\"can dedent on Emptyline\",function(){\n    let source = fs.readFileSync(\"./test/lexer-emptyline-dedent.argdown\", 'utf8');\n    const result = argdownLexer.tokenize(source);\n    const tokens = result.tokens;\n    expect(tokens[0]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[1]).to.be.an.instanceof(argdownLexer.Indent);\n    expect(tokens[2]).to.be.an.instanceof(argdownLexer.OutgoingSupport);\n    expect(tokens[3]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[4]).to.be.an.instanceof(argdownLexer.Dedent);\n    expect(tokens[5]).to.be.an.instanceof(argdownLexer.Emptyline);\n    expect(tokens[6]).to.be.an.instanceof(argdownLexer.Freestyle);\n  });\n  it(\"can ignore Newlines in relations\",function(){\n    let source = fs.readFileSync(\"./test/lexer-linebreak.argdown\", 'utf8');\n    const result = argdownLexer.tokenize(source);\n    const tokens = result.tokens;\n    expect(tokens[0]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[1]).to.be.an.instanceof(argdownLexer.Indent);\n    expect(tokens[2]).to.be.an.instanceof(argdownLexer.OutgoingSupport);\n    expect(tokens[3]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[4]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[5]).to.be.an.instanceof(argdownLexer.OutgoingAttack);\n    expect(tokens[6]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[7]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[8]).to.be.an.instanceof(argdownLexer.OutgoingSupport);\n    expect(tokens[9]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[10]).to.be.an.instanceof(argdownLexer.Freestyle);\n    expect(tokens[11]).to.be.an.instanceof(argdownLexer.Dedent);\n  });\n   it(\"can lex complex indentation\", function() {\n     let source = fs.readFileSync(\"./test/lexer-indentation.argdown\", 'utf8');\n     const result = argdownLexer.tokenize(source);\n     const tokens = result.tokens;\n     expect(tokens[0]).to.be.an.instanceof(argdownLexer.Freestyle);\n     expect(tokens[1]).to.be.an.instanceof(argdownLexer.Indent);\n     expect(tokens[2]).to.be.an.instanceof(argdownLexer.OutgoingSupport);\n     expect(tokens[3]).to.be.an.instanceof(argdownLexer.Freestyle);\n     expect(tokens[4]).to.be.an.instanceof(argdownLexer.OutgoingAttack);\n     expect(tokens[5]).to.be.an.instanceof(argdownLexer.Freestyle);\n     expect(tokens[6]).to.be.an.instanceof(argdownLexer.Indent);\n     expect(tokens[7]).to.be.an.instanceof(argdownLexer.OutgoingSupport);\n     expect(tokens[8]).to.be.an.instanceof(argdownLexer.Freestyle);\n     expect(tokens[9]).to.be.an.instanceof(argdownLexer.Indent);\n     expect(tokens[10]).to.be.an.instanceof(argdownLexer.OutgoingAttack);\n     expect(tokens[11]).to.be.an.instanceof(argdownLexer.Freestyle);\n     expect(tokens[12]).to.be.an.instanceof(argdownLexer.Indent);\n     expect(tokens[13]).to.be.an.instanceof(argdownLexer.IncomingSupport);\n     expect(tokens[14]).to.be.an.instanceof(argdownLexer.Freestyle);\n     expect(tokens[15]).to.be.an.instanceof(argdownLexer.Dedent);\n     expect(tokens[16]).to.be.an.instanceof(argdownLexer.Dedent);\n     expect(tokens[17]).to.be.an.instanceof(argdownLexer.Dedent);\n     expect(tokens[18]).to.be.an.instanceof(argdownLexer.IncomingAttack);\n     expect(tokens[19]).to.be.an.instanceof(argdownLexer.Freestyle);\n     expect(tokens[20]).to.be.an.instanceof(argdownLexer.Dedent);\n\n   });\n   it(\"can recognize argument and statement references and definitions\", function(){\n     let source = fs.readFileSync(\"./test/lexer-definitions-references.argdown\", 'utf8');\n     const result = argdownLexer.tokenize(source);\n     const tokens = result.tokens;\n     expect(tokens[0]).to.be.an.instanceof(argdownLexer.StatementReference);\n     expect(tokens[1]).to.be.an.instanceof(argdownLexer.StatementDefinition);\n     expect(tokens[2]).to.be.an.instanceof(argdownLexer.ArgumentReference);\n     expect(tokens[3]).to.be.an.instanceof(argdownLexer.ArgumentDefinition);\n     expect(tokens[4]).to.be.an.instanceof(argdownLexer.Freestyle);\n\n   });\n});\n"]}