{"version":3,"sources":["../../test/html-export.spec.js"],"names":["app","parserPlugin","modelPlugin","tagPlugin","addPlugin","describe","htmlExport","it","data","input","result","run","html","to","equal","source","readFileSync","lexerErrors","be","empty","parserErrors","tagsDictionary","exist","Object","keys","length","cssClass","index","statements","sortedTags"],"mappings":";;AAAA;;AACA;;AACA;;;;;;AAEA,IAAMA,MAAM,+BAAZ;AACA,IAAMC,eAAe,yBAArB;AACA,IAAMC,cAAc,wBAApB;AACA,IAAMC,YAAY,sBAAlB;AACAH,IAAII,SAAJ,CAAcH,YAAd,EAA4B,aAA5B;AACAD,IAAII,SAAJ,CAAcF,WAAd,EAA0B,aAA1B;AACAF,IAAII,SAAJ,CAAcD,SAAd,EAAyB,aAAzB;;AAEAE,SAAS,YAAT,EAAuB,YAAW;AAChC,MAAIC,aAAa,uBAAjB;AACAN,MAAII,SAAJ,CAAcE,UAAd,EAA0B,aAA1B;AACAC,KAAG,oBAAH,EAAyB,YAAU;AACjC,QAAIC,OAAO;AACTC,aAAO;AADE,KAAX;AAGA,QAAIC,SAASV,IAAIW,GAAJ,CAAQ,CAAC,aAAD,EAAe,aAAf,EAA6B,aAA7B,CAAR,EAAqDH,IAArD,CAAb;AACA;AACA,sBAAOE,OAAOE,IAAd,EAAoBC,EAApB,CAAuBC,KAAvB,CAA6B,u6BAA7B;AACD,GAPD;AAQAP,KAAG,8BAAH,EAAmC,YAAU;AAC3C,QAAIQ,SAAS,aAAGC,YAAH,CAAgB,sBAAhB,EAAwC,MAAxC,CAAb;AACA,QAAIN,SAASV,IAAIW,GAAJ,CAAQ,CAAC,aAAD,EAAe,aAAf,EAA6B,aAA7B,CAAR,EAAoD,EAACF,OAAMM,MAAP,EAApD,CAAb;AACA,sBAAOL,OAAOO,WAAd,EAA2BJ,EAA3B,CAA8BK,EAA9B,CAAiCC,KAAjC;AACA,sBAAOT,OAAOU,YAAd,EAA4BP,EAA5B,CAA+BK,EAA/B,CAAkCC,KAAlC;AACD,GALD;AAMAZ,KAAG,iCAAH,EAAsC,YAAU;AAC9C,QAAIQ,6FAAJ;AAGA,QAAIL,SAASV,IAAIW,GAAJ,CAAQ,CAAC,aAAD,EAAe,aAAf,CAAR,EAAsC,EAACF,OAAMM,MAAP,EAAtC,CAAb;AACA,sBAAOL,OAAOW,cAAd,EAA8BR,EAA9B,CAAiCS,KAAjC;AACA,sBAAOC,OAAOC,IAAP,CAAYd,OAAOW,cAAnB,EAAmCI,MAA1C,EAAkDZ,EAAlD,CAAqDK,EAArD,CAAwDJ,KAAxD,CAA8D,CAA9D;AACA,sBAAOJ,OAAOW,cAAP,CAAsB,MAAtB,EAA8BK,QAArC,EAA+Cb,EAA/C,CAAkDK,EAAlD,CAAqDJ,KAArD,CAA2D,eAA3D;AACA,sBAAOJ,OAAOW,cAAP,CAAsB,MAAtB,EAA8BM,KAArC,EAA4Cd,EAA5C,CAA+CK,EAA/C,CAAkDJ,KAAlD,CAAwD,CAAxD;AACA,sBAAOJ,OAAOW,cAAP,CAAsB,MAAtB,EAA8BK,QAArC,EAA+Cb,EAA/C,CAAkDK,EAAlD,CAAqDJ,KAArD,CAA2D,eAA3D;AACA,sBAAOJ,OAAOW,cAAP,CAAsB,MAAtB,EAA8BM,KAArC,EAA4Cd,EAA5C,CAA+CK,EAA/C,CAAkDJ,KAAlD,CAAwD,CAAxD;AACA,sBAAOJ,OAAOW,cAAP,CAAsB,MAAtB,EAA8BK,QAArC,EAA+Cb,EAA/C,CAAkDK,EAAlD,CAAqDJ,KAArD,CAA2D,eAA3D;AACA,sBAAOJ,OAAOW,cAAP,CAAsB,MAAtB,EAA8BM,KAArC,EAA4Cd,EAA5C,CAA+CK,EAA/C,CAAkDJ,KAAlD,CAAwD,CAAxD;AACA,sBAAOJ,OAAOkB,UAAP,CAAkB,aAAlB,EAAiCC,UAAxC,EAAoDhB,EAApD,CAAuDS,KAAvD;AACA,sBAAOZ,OAAOkB,UAAP,CAAkB,aAAlB,EAAiCC,UAAjC,CAA4CJ,MAAnD,EAA2DZ,EAA3D,CAA8DC,KAA9D,CAAoE,CAApE;AACD,GAfD;AAgBD,CAjCD","file":"html-export.spec.js","sourcesContent":["import { expect } from 'chai';\nimport {ArgdownApplication, ParserPlugin, ModelPlugin, TagPlugin, HtmlExport} from '../src/index.js';\nimport fs from 'fs';\n\nconst app = new ArgdownApplication();\nconst parserPlugin = new ParserPlugin();\nconst modelPlugin = new ModelPlugin();\nconst tagPlugin = new TagPlugin();\napp.addPlugin(parserPlugin, 'parse-input');\napp.addPlugin(modelPlugin,'build-model');\napp.addPlugin(tagPlugin, 'build-model');\n\ndescribe(\"HtmlExport\", function() {\n  let htmlExport = new HtmlExport();\n  app.addPlugin(htmlExport, \"export-html\");\n  it(\"can export Argdown\", function(){\n    let data = {\n      input: \"#Title\\n\\n[Statement]: Hello World!\\n +<Argument>\\n\\n<Argument>: Description\"\n    }\n    let result = app.run(['parse-input','build-model','export-html'], data);\n    //console.log(result.html);\n    expect(result.html).to.equal(\"<!doctype html>\\n\\n<html lang='en'>\\n<head>\\n<meta charset='utf8'>\\n<title>Title</title>\\n<link rel='stylesheet' href='./argdown.css'>\\n</head><body><div class='argdown'><h1 id='heading-title'>Title</h1><div class='statement'><span id='statement-statement' class='definition statement-definition definiendum'>[<span class='title statement-title'>Statement</span>]: </span>Hello World!<div class='relations'><div class='outgoing support relation'><div class='outgoing support relation-symbol'><span>+</span></div><a href='#argument-argument' class='reference argument-reference'>&lt;<span class='title argument-title'>Argument</span>&gt; </a></div></div></div><div id='argument-argument' class='definition argument-definition'><span class='definiendum argument-definiendum'>&lt;<span class='title argument-title'>Argument</span>&gt;: </span><span class='argument-definiens definiens description'>Description</span></div></body></html>\");\n  });\n  it(\"can export the argdown intro\", function(){\n    let source = fs.readFileSync(\"./test/intro.argdown\", 'utf8');\n    let result = app.run(['parse-input','build-model','export-html'],{input:source});\n    expect(result.lexerErrors).to.be.empty;\n    expect(result.parserErrors).to.be.empty;\n  });  \n  it(\"can create class names for tags\", function(){\n    let source = `[Statement 1]: #tag1\n      + [Statement 2]: #tag2\n        - [Statement 3]: #tag3`;\n    let result = app.run(['parse-input','build-model'],{input:source});\n    expect(result.tagsDictionary).to.exist;\n    expect(Object.keys(result.tagsDictionary).length).to.be.equal(3);\n    expect(result.tagsDictionary[\"tag1\"].cssClass).to.be.equal(\"tag-tag1 tag0\");\n    expect(result.tagsDictionary[\"tag1\"].index).to.be.equal(0);\n    expect(result.tagsDictionary[\"tag2\"].cssClass).to.be.equal(\"tag-tag2 tag1\");\n    expect(result.tagsDictionary[\"tag2\"].index).to.be.equal(1);\n    expect(result.tagsDictionary[\"tag3\"].cssClass).to.be.equal(\"tag-tag3 tag2\");\n    expect(result.tagsDictionary[\"tag3\"].index).to.be.equal(2);\n    expect(result.statements[\"Statement 1\"].sortedTags).to.exist;\n    expect(result.statements[\"Statement 1\"].sortedTags.length).to.equal(1);\n  });\n});\n"]}