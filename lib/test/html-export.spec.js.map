{"version":3,"sources":["../../test/html-export.spec.js"],"names":["app","parserPlugin","modelPlugin","tagPlugin","addPlugin","describe","htmlExport","it","request","process","input","result","run","html","to","equal","source","readFileSync","lexerErrors","be","empty","parserErrors","tagsDictionary","exist","Object","keys","length","cssClass","index","statements","sortedTags","headless"],"mappings":"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","file":"html-export.spec.js","sourcesContent":["import { expect } from 'chai';\nimport {ArgdownApplication, ParserPlugin, ModelPlugin, TagPlugin, HtmlExport} from '../src/index.js';\nimport fs from 'fs';\n\nconst app = new ArgdownApplication();\nconst parserPlugin = new ParserPlugin();\nconst modelPlugin = new ModelPlugin();\nconst tagPlugin = new TagPlugin();\napp.addPlugin(parserPlugin, 'parse-input');\napp.addPlugin(modelPlugin,'build-model');\napp.addPlugin(tagPlugin, 'build-model');\n\ndescribe(\"HtmlExport\", function() {\n  let htmlExport = new HtmlExport();\n  app.addPlugin(htmlExport, \"export-html\");\n  it(\"can export Argdown\", function(){\n    let request = {\n      process: ['parse-input', 'build-model', 'export-html'],\n      input: \"# Title\\n\\n[Statement]: Hello World!\\n +<Argument>\\n\\n<Argument>: Description 1 \\< 2\"\n    }\n    let result = app.run(request);\n    //console.log(result.html);\n    expect(result.html).to.equal(`<!doctype html><html lang=\"en\"><head><meta charset=\"utf8\"><title>Title</title><link rel=\"stylesheet\" href=./argdown.css\"></head><body><div class=\"argdown\"><h1 data-line=\"1\" id=\"heading-title\" class=\"has-line heading\">Title</h1><div data-line=\"has-line 3\" class=\"statement\"><span id=statement-statement\" class=\"definition statement-definition definiendum\">[<span class=\"title statement-title\">Statement</span>]: </span>Hello World!<div class=\"relations\"><div data-line=\"4\" class=\"has-line outgoing support relation\"><div class=\"outgoing support relation-symbol\"><span>+</span></div><a href=\"#argument-argument\" data-line=\"4\" class=\"has-line reference argument-reference\">&lt;<span class=\"title argument-title\">Argument</span>&gt; </a></div></div></div><div id=\"argument-argument\" data-line=\"6\" class=\"has-line definition argument-definition\"><span class=\"definiendum argument-definiendum\">&lt;<span class=\"title argument-title\">Argument</span>&gt;: </span><span class=\"argument-definiens definiens description\">Description 1 &lt; 2</span></div></div></body></html>`);\n  });\n  it(\"can export the argdown intro\", function(){\n    let source = fs.readFileSync(\"./test/intro.argdown\", 'utf8');\n    let result = app.run({process: ['parse-input','build-model','export-html'], input:source});\n    expect(result.lexerErrors).to.be.empty;\n    expect(result.parserErrors).to.be.empty;\n  });  \n  it(\"can create class names for tags\", function(){\n    let source = `[Statement 1]: #tag1\n      + [Statement 2]: #tag2\n        - [Statement 3]: #tag3`;\n    let result = app.run({process: ['parse-input','build-model'], input:source});\n    expect(result.tagsDictionary).to.exist;\n    expect(Object.keys(result.tagsDictionary).length).to.be.equal(3);\n    expect(result.tagsDictionary[\"tag1\"].cssClass).to.be.equal(\"tag-tag1 tag0\");\n    expect(result.tagsDictionary[\"tag1\"].index).to.be.equal(0);\n    expect(result.tagsDictionary[\"tag2\"].cssClass).to.be.equal(\"tag-tag2 tag1\");\n    expect(result.tagsDictionary[\"tag2\"].index).to.be.equal(1);\n    expect(result.tagsDictionary[\"tag3\"].cssClass).to.be.equal(\"tag-tag3 tag2\");\n    expect(result.tagsDictionary[\"tag3\"].index).to.be.equal(2);\n    expect(result.statements[\"Statement 1\"].sortedTags).to.exist;\n    expect(result.statements[\"Statement 1\"].sortedTags.length).to.equal(1);\n  });\n  it(\"can export titles with ranges\", function(){\n    let source = `# title _italic_ **bold**`;\n    let result = app.run({process: ['parse-input','build-model', 'export-html'], input:source, html:{headless:true}});\n    expect(result.html).to.equal(`<div class=\"argdown\"><h1 data-line=\"1\" id=\"heading-title-italic-bold\" class=\"has-line heading\">title <i>italic</i> <b>bold</b></h1></div>`);\n  });\n});\n"]}