{"version":3,"sources":["../../test/TagPlugin.spec.ts"],"names":["app","ArgdownApplication","parserPlugin","ParserPlugin","addPlugin","modelPlugin","ModelPlugin","tagPlugin","TagPlugin","describe","it","source","result","run","process","input","tagsDictionary","to","exist","Object","keys","length","be","equal","cssClass","index","statements","sortedTags"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA,IAAIA,MAAM,IAAIC,yBAAJ,EAAV;AACA,IAAIC,eAAe,IAAIC,mBAAJ,EAAnB;AACAH,IAAII,SAAJ,CAAcF,YAAd,EAA4B,aAA5B;AACA,IAAIG,cAAc,IAAIC,kBAAJ,EAAlB;AACA,IAAIC,YAAY,IAAIC,gBAAJ,EAAhB;AACAR,IAAII,SAAJ,CAAcC,WAAd,EAA2B,aAA3B;AACAL,IAAII,SAAJ,CAAcG,SAAd,EAAyB,aAAzB;AAEAE,SAAS,WAAT,EAAsB,YAAW;AAC/BC,KAAG,+CAAH,EAAoD,YAAW;AAC7D,QAAIC,mGAAJ;AAGA,QAAIC,SAASZ,IAAIa,GAAJ,CAAQ;AAAEC,eAAS,CAAC,aAAD,EAAgB,aAAhB,CAAX;AAA2CC,aAAOJ;AAAlD,KAAR,CAAb;AACA,sBAAOC,OAAOI,cAAd,EAA8BC,EAA9B,CAAiCC,KAAjC;AACA,sBAAOC,OAAOC,IAAP,CAAYR,OAAOI,cAAnB,EAAoCK,MAA3C,EAAmDJ,EAAnD,CAAsDK,EAAtD,CAAyDC,KAAzD,CAA+D,CAA/D;AACA,sBAAOX,OAAOI,cAAP,CAAuB,MAAvB,EAA+BQ,QAAtC,EAAgDP,EAAhD,CAAmDK,EAAnD,CAAsDC,KAAtD,CAA4D,eAA5D;AACA,sBAAOX,OAAOI,cAAP,CAAuB,MAAvB,EAA+BS,KAAtC,EAA6CR,EAA7C,CAAgDK,EAAhD,CAAmDC,KAAnD,CAAyD,CAAzD;AACA,sBAAOX,OAAOI,cAAP,CAAuB,MAAvB,EAA+BQ,QAAtC,EAAgDP,EAAhD,CAAmDK,EAAnD,CAAsDC,KAAtD,CAA4D,eAA5D;AACA,sBAAOX,OAAOI,cAAP,CAAuB,MAAvB,EAA+BS,KAAtC,EAA6CR,EAA7C,CAAgDK,EAAhD,CAAmDC,KAAnD,CAAyD,CAAzD;AACA,sBAAOX,OAAOI,cAAP,CAAuB,MAAvB,EAA+BQ,QAAtC,EAAgDP,EAAhD,CAAmDK,EAAnD,CAAsDC,KAAtD,CAA4D,eAA5D;AACA,sBAAOX,OAAOI,cAAP,CAAuB,MAAvB,EAA+BS,KAAtC,EAA6CR,EAA7C,CAAgDK,EAAhD,CAAmDC,KAAnD,CAAyD,CAAzD;AACA,sBAAOX,OAAOc,UAAP,CAAmB,aAAnB,EAAkCC,UAAzC,EAAqDV,EAArD,CAAwDC,KAAxD;AACA,sBAAON,OAAOc,UAAP,CAAmB,aAAnB,EAAkCC,UAAlC,CAA8CN,MAArD,EAA6DJ,EAA7D,CAAgEM,KAAhE,CAAsE,CAAtE;AACA,sBAAOX,OAAOc,UAAP,CAAmB,aAAnB,EAAkCC,UAAlC,CAA8CN,MAArD,EAA6DJ,EAA7D,CAAgEM,KAAhE,CAAsE,CAAtE;AACD,GAhBD;AAiBD,CAlBD","sourcesContent":["import { expect } from \"chai\";\nimport { ArgdownApplication, ParserPlugin, ModelPlugin, TagPlugin } from \"../src/index\";\n\nlet app = new ArgdownApplication();\nlet parserPlugin = new ParserPlugin();\napp.addPlugin(parserPlugin, \"parse-input\");\nlet modelPlugin = new ModelPlugin();\nlet tagPlugin = new TagPlugin();\napp.addPlugin(modelPlugin, \"build-model\");\napp.addPlugin(tagPlugin, \"build-model\");\n\ndescribe(\"TagPlugin\", function() {\n  it(\"can sort tags and create class names for tags\", function() {\n    let source = `[Statement 1]: #tag1\n      + [Statement 2]: #tag2 #tag3\n        - [Statement 3]: #tag3`;\n    let result = app.run({ process: [\"parse-input\", \"build-model\"], input: source });\n    expect(result.tagsDictionary).to.exist;\n    expect(Object.keys(result.tagsDictionary!).length).to.be.equal(3);\n    expect(result.tagsDictionary![\"tag1\"].cssClass).to.be.equal(\"tag-tag1 tag0\");\n    expect(result.tagsDictionary![\"tag1\"].index).to.be.equal(0);\n    expect(result.tagsDictionary![\"tag2\"].cssClass).to.be.equal(\"tag-tag2 tag1\");\n    expect(result.tagsDictionary![\"tag2\"].index).to.be.equal(1);\n    expect(result.tagsDictionary![\"tag3\"].cssClass).to.be.equal(\"tag-tag3 tag2\");\n    expect(result.tagsDictionary![\"tag3\"].index).to.be.equal(2);\n    expect(result.statements![\"Statement 1\"].sortedTags).to.exist;\n    expect(result.statements![\"Statement 1\"].sortedTags!.length).to.equal(1);\n    expect(result.statements![\"Statement 2\"].sortedTags!.length).to.equal(2);\n  });\n});\n"],"file":"TagPlugin.spec.js"}