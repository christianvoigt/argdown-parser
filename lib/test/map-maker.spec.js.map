{"version":3,"sources":["../../test/map-maker.spec.js"],"names":["app","preprocessor","addPlugin","mapMaker","describe","it","source","parse","result","run","console","log","JSON","stringify","map","statementNodes","to","exist","argumentNodes","relations","length","equal","type","equals","from","title"],"mappings":";;AAAA;;AACA;;AAEA,IAAIA,MAAM,+BAAV;AACA,IAAIC,eAAe,gCAAnB;AACAD,IAAIE,SAAJ,CAAcD,YAAd,EAA2B,cAA3B;AACA,IAAIE,WAAW,qBAAf;AACAH,IAAIE,SAAJ,CAAcC,QAAd,EAAwB,UAAxB;;AAEAC,SAAS,UAAT,EAAqB,YAAW;AAC9BC,KAAG,gEAAH,EAAqE,YAAU;AAC7E,QAAIC,SAAS,+EAAb;AACAN,QAAIO,KAAJ,CAAUD,MAAV;AACA,QAAIE,SAASR,IAAIS,GAAJ,CAAQ,CAAC,cAAD,EAAgB,UAAhB,CAAR,CAAb;AACAC,YAAQC,GAAR,CAAYC,KAAKC,SAAL,CAAeL,OAAOM,GAAtB,EAA2B,IAA3B,EAAiC,CAAjC,CAAZ;AACA;AACA;;AAEA,sBAAON,OAAOM,GAAP,CAAWC,cAAX,CAA0B,aAA1B,CAAP,EAAiDC,EAAjD,CAAoDC,KAApD;AACA,sBAAOT,OAAOM,GAAP,CAAWI,aAAX,CAAyB,YAAzB,CAAP,EAA+CF,EAA/C,CAAkDC,KAAlD;AACA,sBAAOT,OAAOM,GAAP,CAAWI,aAAX,CAAyB,YAAzB,CAAP,EAA+CF,EAA/C,CAAkDC,KAAlD;AACA,sBAAOT,OAAOM,GAAP,CAAWK,SAAX,CAAqBC,MAA5B,EAAoCJ,EAApC,CAAuCK,KAAvC,CAA6C,CAA7C;AACD,GAZD;AAaAhB,KAAG,oDAAH,EAAyD,YAAU;AACjE,QAAIC,SAAS,gGACb,oHADA;AAEAN,QAAIO,KAAJ,CAAUD,MAAV;AACA,QAAIE,SAASR,IAAIS,GAAJ,CAAQ,CAAC,cAAD,EAAgB,UAAhB,CAAR,CAAb;AACA;AACA;AACA;;AAEA,sBAAOD,OAAOM,GAAP,CAAWI,aAAX,CAAyB,YAAzB,CAAP,EAA+CF,EAA/C,CAAkDC,KAAlD;AACA,sBAAOT,OAAOM,GAAP,CAAWI,aAAX,CAAyB,YAAzB,CAAP,EAA+CF,EAA/C,CAAkDC,KAAlD;AACA,sBAAOT,OAAOM,GAAP,CAAWK,SAAX,CAAqBC,MAA5B,EAAoCJ,EAApC,CAAuCK,KAAvC,CAA6C,CAA7C;AACA,sBAAOb,OAAOM,GAAP,CAAWK,SAAX,CAAqB,CAArB,EAAwBG,IAA/B,EAAqCN,EAArC,CAAwCO,MAAxC,CAA+C,QAA/C;AACA,sBAAOf,OAAOM,GAAP,CAAWK,SAAX,CAAqB,CAArB,EAAwBK,IAAxB,CAA6BC,KAApC,EAA2CT,EAA3C,CAA8CO,MAA9C,CAAqD,YAArD;AACA,sBAAOf,OAAOM,GAAP,CAAWK,SAAX,CAAqB,CAArB,EAAwBH,EAAxB,CAA2BS,KAAlC,EAAyCT,EAAzC,CAA4CO,MAA5C,CAAmD,YAAnD;AAED,GAhBD;AAiBD,CA/BD","file":"map-maker.spec.js","sourcesContent":["import { expect } from 'chai';\nimport {ArgdownApplication, ArgdownPreprocessor,MapMaker} from '../src/index.js';\n\nlet app = new ArgdownApplication();\nlet preprocessor = new ArgdownPreprocessor();\napp.addPlugin(preprocessor,'preprocessor');\nlet mapMaker = new MapMaker();\napp.addPlugin(mapMaker, \"make-map\");\n\ndescribe(\"MapMaker\", function() {\n  it(\"can create map from one statement and two argument definitions\", function(){\n    let source = \"<Argument 1>\\n  + [Statement 1]: Hello World!\\n    +<Argument 2>: Description\";\n    app.parse(source);\n    let result = app.run(['preprocessor','make-map']);\n    console.log(JSON.stringify(result.map, null, 2));\n    //app.parser.logAst(result.ast);\n    //preprocessor.logRelations(result);\n\n    expect(result.map.statementNodes[\"Statement 1\"]).to.exist;\n    expect(result.map.argumentNodes[\"Argument 1\"]).to.exist;\n    expect(result.map.argumentNodes[\"Argument 2\"]).to.exist;\n    expect(result.map.relations.length).to.equal(2);\n  });\n  it(\"can create a map from two argument reconstructions\", function(){\n    let source = \"<Argument 1>\\n\\n  (1)[Statement 1]: A\\n  (2)[Statement 2]: B\\n  ----\\n  (3)[Statement 2]: C\"+\n    \"\\n\\n<Argument 2>\\n\\n  (1)[Statement 4]: A\\n  (2)[Statement 5]: B\\n  ----\\n  (3)[Statement 6]: C\\n  ->[Statement 1]\";\n    app.parse(source);\n    let result = app.run(['preprocessor','make-map']);\n    //console.log(JSON.stringify(result.map, null, 2));\n    //app.parser.logAst(result.ast);\n    //preprocessor.logRelations(result);\n\n    expect(result.map.argumentNodes[\"Argument 1\"]).to.exist;\n    expect(result.map.argumentNodes[\"Argument 2\"]).to.exist;\n    expect(result.map.relations.length).to.equal(1);\n    expect(result.map.relations[0].type).to.equals(\"attack\");\n    expect(result.map.relations[0].from.title).to.equals(\"Argument 2\");\n    expect(result.map.relations[0].to.title).to.equals(\"Argument 1\");\n\n  });\n});\n"]}